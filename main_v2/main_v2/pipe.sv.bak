//-------------------------------------------------------------------------
//      stair.sv                                                         --
//      Created by Yuhao Ge & Haina Lou                                  --
//      Fall 2021                                                        --
//                                                                       --
//      This module is used to generate stairs                           --
//      UIUC ECE Department                                              --
//-------------------------------------------------------------------------

// NIO-2 give messages to control the status of the stairs
// The new positon is ramdomlly generated by NOI-2


module pipe ( input Clk, Reset,
					input frame_clk,  
					input [9:0]   DrawX, DrawY,       // Current pixel coordinates
					input [19:0]  random_num,
//					input [9:0]  distance,
					input [13:0]  move_message, active_message, tool_message,
//					output logic [13:0][9:0]  stair_x, stair_y,
					output logic [39:0][479:0]pipe_size,   //weight,height
					output logic  is_pipe,
//					output logic [3:0] counter,
//					output logic [13:0][9:0] tool_x, tool_y, tool_size
					);	
					
	 
	 parameter [9:0] Pipe_X_Center = 10'd600;  // Center position on the X axis
    parameter [9:0] Pipe_Y_Center = 10'd240;  // Center position on the Y axis
    parameter [9:0] Pipe_X_Min = 10'd100;       // Leftmost point on the X axis
    parameter [9:0] Pipe_X_Max = 10'd600;     // Rightmost point on the X axis
//    parameter [9:0] Pipe_Y_Min = 10'd0;       // Topmost point on the Y axis
//    parameter [9:0] Pipe_Y_Max = 10'd479;     // Bottommost point on the Y axis
//    parameter [9:0] pipe_Y_Step = 10'd1;      // Step size on the Y axis
//    parameter [9:0] pipe_Size = 10'd4;        // pipe size
    
    logic [9:0] Pipe_X_Pos, Pipe_X_Motion;
    logic [9:0] Pipe_X_Pos_in, Pipe_X_Motion_in;
    logic [9:0] pipe_X_Step;      // Step size on the X axis
	 //logic [9:0] pipe_Y_Step;
	 
	 
    //////// Do not modify the always_ff blocks. ////////
    // Detect rising edge of frame_clk
    logic frame_clk_delayed, frame_clk_rising_edge;
    always_ff @ (posedge Clk) begin
        frame_clk_delayed <= frame_clk;
        frame_clk_rising_edge <= (frame_clk == 1'b1) && (frame_clk_delayed == 1'b0);
    end
    // Update registers
	 
	 
    always_ff @ (posedge Clk)
    begin
        if (Reset)
        begin
            pipe_X_Pos <= pipe_X_Center;
            pipe_Y_Pos <= pipe_Y_Center;
            pipe_X_Motion <= 10'd0;
				pipe_X_Step <= 10'd1;
				//pipe_Y_Step <= 10'd1;
        end
        else
        begin
            pipe_X_Pos <= pipe_X_Pos_in;
            pipe_X_Motion <= pipe_X_Motion_in;
        end
    end
    //////// Do not modify the always_ff blocks. ////////
	 
	 class RandomGenerator;
		 rand bit [7:0] random_number;
		 function void randomize();
			  random_number = $urandom_range(40, 440); //form a random number from 40 to 440
		 endfunction
	endclass

	 
    generate
		 for (int i = 0; i < 479; i++) begin : ROW_GEN
			  for (int j = 0; j < 40; j++) begin : COL_GEN
					assign rectangle[j][i] = (j >= current_x && j < current_x + WIDTH && i >= current_y && i < current_y + HEIGHT) ? 1'b1 : 1'b0;
			  end
		 end
	endgenerate

    // You need to modify always_comb block.
    always_comb
    begin
        // By default, keep motion and position unchanged
        pipe_X_Pos_in = pipe_X_Pos;
        pipe_Y_Pos_in = pipe_Y_Pos;
        pipe_X_Motion_in = pipe_X_Motion;
        pipe_Y_Motion_in = pipe_Y_Motion;
        
        // Update position and motion only at rising edge of frame clock
        if (frame_clk_rising_edge)
        begin
            if( pipe_Y_Pos + pipe_Size >= pipe_Y_Max ) begin // pipe is at the bottom edge, BOUNCE!
                pipe_Y_Motion_in = (~(pipe_Y_Step) + 1'b1);  // 2's complement.
					 pipe_X_Motion_in <= 10'd0;
					 end
            else if ( pipe_Y_Pos <= pipe_Y_Min + pipe_Size )begin  // pipe is at the top edge, BOUNCE!
                pipe_Y_Motion_in = pipe_Y_Step;
					 pipe_X_Motion_in <= 10'd0;
					 end
            else if( pipe_X_Pos + pipe_Size >= pipe_X_Max ) begin // pipe is at the bottom edge, BOUNCE!
                pipe_X_Motion_in = (~(pipe_X_Step) + 1'b1);
					 pipe_Y_Motion_in <= 10'd0;	 // 2's complement.  
					 end
            else if ( pipe_X_Pos <= pipe_X_Min + pipe_Size ) begin // pipe is at the top edge, BOUNCE!
                pipe_X_Motion_in = pipe_X_Step;
					 pipe_Y_Motion_in <= 10'd0;
					 end
		  
				else 
					case(keycode)
						//A
						8'h04: begin
									pipe_X_Motion_in = (~(pipe_X_Step) + 1'b1);
									pipe_Y_Motion_in = 10'd0;
								end
								
						//D
						8'h07: begin
									pipe_X_Motion_in = pipe_X_Step;
									pipe_Y_Motion_in = 10'd0;
								end
						
						//W
						8'h1a: begin
									pipe_Y_Motion_in = (~(pipe_Y_Step) + 1'b1);
									pipe_X_Motion_in = 10'd0;
								end
						
						//S
						8'h16: begin
									pipe_Y_Motion_in = pipe_Y_Step;
									pipe_X_Motion_in = 10'd0;
								end
						default:
							begin
							end
					endcase
		  
            // Update the pipe's position with its motion
            pipe_X_Pos_in = pipe_X_Pos + pipe_X_Motion;
            pipe_Y_Pos_in = pipe_Y_Pos + pipe_Y_Motion;
        end
   
    end
    
    // Compute whether the pixel corresponds to pipe or background
    /* Since the multiplicants are required to be signed, we have to first cast them
       from logic to int (signed by default) before they are multiplied. */
    int DistX, DistY, Size;
    assign DistX = DrawX - pipe_X_Pos;
    assign DistY = DrawY - pipe_Y_Pos;
    assign Size = pipe_Size;
    always_comb begin
        if ( ( DistX*DistX + DistY*DistY) <= (Size*Size) ) 
            is_pipe = 1'b1;
        else
            is_pipe = 1'b0;
        /* The pipe's (pixelated) circle is generated using the standard circle formula.  Note that while 
           the single line is quite powerful descriptively, it causes the synthesis tool to use up three
           of the 12 available multipliers on the chip! */
    end
	 
endmodule