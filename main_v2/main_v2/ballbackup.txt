//-------------------------------------------------------------------------
//    Ball.sv                                                            --
//    Viral Mehta                                                        --
//    Spring 2005                                                        --
//                                                                       --
//    Modified by Stephen Kempf 03-01-2006                               --
//                              03-12-2007                               --
//    Translated by Joe Meng    07-07-2013                               --
//    Modified by Po-Han Huang  12-08-2017                               --
//    Spring 2018 Distribution                                           --
//                                                                       --
//    For use with ECE 385 Lab 8                                         --
//    UIUC ECE Department                                                --
//-------------------------------------------------------------------------


module  ball ( input         Clk,                // 50 MHz clock
                             Reset,              // Active-high reset signal
                             frame_clk,          // The clock indicating a new frame (~60Hz)
               input [9:0]   DrawX, DrawY,       // Current pixel coordinates
					input [7:0]	  keycode,
//					input 		  collision, pass_num,
//					output logic  drop,					 // means falling
               output logic  is_ball             // Whether current pixel belongs to ball or background
              );
    
	 parameter [9:0] Ball_X_Center = 10'd320;  // Center position on the X axis
    parameter [9:0] Ball_Y_Center = 10'd240;  // Center position on the Y axis
    parameter [9:0] Ball_Y_Min = 10'd0;       // Topmost point on the Y axis
    parameter [9:0] Ball_Y_Max = 10'd479;     // Bottommost point on the Y axis
    parameter [9:0] Ball_Y_step = 10'd3;      // Step size on the Y axis
    parameter [9:0] Ball_Size = 10'd10;       // Ball size
    parameter [9:0] Jump_Height = 10'd50;     // Maximum height of jump
    parameter [9:0] Gravity = 10'd2;          // Gravity effect 
	 
	 logic [9:0] Ball_X_Pos, Ball_Y_Pos, Ball_Y_Motion;
    logic [9:0] Ball_Y_Pos_in, Ball_Y_Motion_in;	
    logic jump_request, jump_active;          // Control signals for jumping
	 logic jump_request_in,jump_active_in;
    logic [9:0] jump_counter,next_jump_counter;                 // Counter to manage jump height
	 logic space_key_pressed, last_space_key_state;
	 logic game_active;
	 
    //////// Do not modify the always_ff blocks. ////////
    // Detect rising edge of frame_clk
    logic frame_clk_delayed, frame_clk_rising_edge;
    always_ff @ (posedge Clk) begin
        frame_clk_delayed <= frame_clk;
        frame_clk_rising_edge <= (frame_clk == 1'b1) && (frame_clk_delayed == 1'b0);
		  last_space_key_state <= space_key_pressed;
	 end
	 
	 
	 
	 
    // Update registers
    always_ff @ (posedge Clk)
    begin
        if (Reset)
        begin
            Ball_Y_Pos <= Ball_Y_Center;
            Ball_Y_Motion <= 10'd0;
				jump_active <= 0;
            jump_counter <= 0;
				game_active <=0;

        end
        else
        begin
            Ball_Y_Pos <= Ball_Y_Pos_in;
            Ball_Y_Motion <= Ball_Y_Motion_in;
				jump_counter <= next_jump_counter;
				jump_active <= jump_active_in;
				jump_request <= jump_request_in;
        end
    end
    //////// Do not modify the always_ff blocks. ////////
	 
	 
    // Space key press detection
    always_comb 
	 begin
        space_key_pressed = (keycode == 8'h2C);
        if (!last_space_key_state && space_key_pressed) begin
            jump_request_in = 1;
				game_active = 1;
        end else begin
            jump_request_in = 0;
		  end
	 end
	  
    // You need to modify always_comb block.
    always_comb
    begin
        // By default, keep motion and position unchanged
        Ball_Y_Pos_in = Ball_Y_Pos;
        Ball_Y_Motion_in = Ball_Y_Motion;
		  jump_active_in = jump_active;
		  next_jump_counter = jump_counter; 

        
        // Update position and motion only at rising edge of frame clock
        if (frame_clk_rising_edge && game_active)
		  
        begin
				if (jump_request && !jump_active) begin
                jump_active_in = 1;
                next_jump_counter = Jump_Height;
            end
				
				
        end
		  
		  if (jump_active) begin
				 if (jump_counter > 0) begin
					  Ball_Y_Motion_in = -Gravity;
					  next_jump_counter = jump_counter - 1;
				 end else begin
					  jump_active_in = 0;
				 end
			end else begin
				 Ball_Y_Motion_in = Gravity; // Apply gravity if not jumping
			end
			
			Ball_Y_Pos_in = Ball_Y_Pos + Ball_Y_Motion_in; // Update position
			if (Ball_Y_Pos_in < Ball_Y_Min + Ball_Size) Ball_Y_Pos_in = Ball_Y_Min; // Constrain within bounds
			if (Ball_Y_Pos_in > Ball_Y_Max - Ball_Size) Ball_Y_Pos_in = Ball_Y_Max;
    end
    
    // Compute whether the pixel corresponds to ball or background
    /* Since the multiplicants are required to be signed, we have to first cast them
       from logic to int (signed by default) before they are multiplied. */
    int DistX, DistY, Size;
    assign DistX = DrawX - Ball_X_Center;
    assign DistY = DrawY - Ball_Y_Pos;
    assign Size = Ball_Size;
    always_comb begin
        if ( ( DistX*DistX + DistY*DistY) <= (Size*Size) ) 
            is_ball = 1'b1;
        else
            is_ball = 1'b0;
        /* The ball's (pixelated) circle is generated using the standard circle formula.  Note that while 
           the single line is quite powerful descriptively, it causes the synthesis tool to use up three
           of the 12 available multipliers on the chip! */
    end
    
endmodule
