
fp.elf:     file format elf32-littlenios2
fp.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000129f8 memsz 0x000129f8 flags r-x
    LOAD off    0x00013a18 vaddr 0x10012a18 paddr 0x10014504 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00015ff0 vaddr 0x10015ff0 paddr 0x10015ff0 align 2**12
         filesz 0x00000000 memsz 0x00000174 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011d2c  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000abc  10011f5c  10011f5c  00012f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  10012a18  10014504  00013a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000174  10015ff0  10015ff0  00015ff0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00015504  2**0
                  CONTENTS
  7 .sdram        00000000  10016164  10016164  00015504  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00015504  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fc0  00000000  00000000  00015528  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00025633  00000000  00000000  000164e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009896  00000000  00000000  0003bb1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c014  00000000  00000000  000453b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000024d8  00000000  00000000  000513c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003c30  00000000  00000000  000538a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017a97  00000000  00000000  000574d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006ef68  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001938  00000000  00000000  0006efa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00073dbe  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00073dc1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00073dcd  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00073dce  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00073dcf  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00073dd3  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00073dd7  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00073ddb  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00073de6  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00073df1  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  00073dfc  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001b  00000000  00000000  00073e04  2**0
                  CONTENTS, READONLY
 30 .jdi          00005256  00000000  00000000  00073e1f  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0007e562  00000000  00000000  00079075  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10011f5c l    d  .rodata	00000000 .rodata
10012a18 l    d  .rwdata	00000000 .rwdata
10015ff0 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10016164 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../fp_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
10015ff0 l     O .bss	00000002 ctl_reg.3589
10015ff2 l     O .bss	00000002 no_device.3590
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
1001275e l     O .rodata	00000010 zeroes.4404
10004b24 l     F .text	000000bc __sbprintf
1001276e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10004d34 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1000688c l     F .text	00000008 __fp_unlock
100068a0 l     F .text	0000019c __sinit.part.1
10006a3c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
10012a18 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
10012e5c l     O .rwdata	00000020 lc_ctype_charset
10012e3c l     O .rwdata	00000020 lc_message_charset
10012e7c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
100127a0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
10009f6c l     F .text	000000fc __sprint_r.part.0
100128c4 l     O .rodata	00000010 zeroes.4349
1000b5a8 l     F .text	000000bc __sbprintf
100128d4 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000f548 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000f65c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000f688 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
1000f970 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000fa58 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000fb44 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000fd20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100144f4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
10010168 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
100102a4 l     F .text	00000034 alt_dev_reg
10013464 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10010580 l     F .text	0000020c altera_avalon_jtag_uart_irq
1001078c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10011068 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
100114c8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10011628 l     F .text	0000003c alt_get_errno
10011664 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10016038 g     O .bss	00000004 alt_instruction_exception_handler
100095b0 g     F .text	00000074 _mprec_log10
1000969c g     F .text	0000008c __any_on
1000bb5c g     F .text	00000054 _isatty_r
100127ac g     O .rodata	00000028 __mprec_tinytens
1000fc5c g     F .text	0000007c alt_main
100025f4 g     F .text	000000c0 _puts_r
10016064 g     O .bss	00000100 alt_irq
1000bbb0 g     F .text	00000060 _lseek_r
10014504 g       *ABS*	00000000 __flash_rwdata_start
1000df20 g     F .text	00000088 .hidden __eqdf2
100076c0 g     F .text	0000005c _gettimeofday_r
10016164 g       *ABS*	00000000 __alt_heap_start
100025b8 g     F .text	0000003c printf
1000bdc8 g     F .text	0000009c _wcrtomb_r
10009e2c g     F .text	0000005c __sseek
10006bec g     F .text	00000010 __sinit
1000bc70 g     F .text	00000140 __swbuf_r
1000771c g     F .text	0000007c _setlocale_r
10006a44 g     F .text	00000078 __sfmoreglue
1000fcfc g     F .text	00000024 __malloc_unlock
100022d4 g     F .text	00000080 UsbGetRetryCnt
100083ec g     F .text	0000015c memmove
1000026c g     F .text	00000088 IO_init
10006bd4 g     F .text	00000018 _cleanup
10008670 g     F .text	000000a8 _Balloc
1000dfa8 g     F .text	000000dc .hidden __gtdf2
100118ac g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000bb00 g     F .text	0000005c _fstat_r
10015ff4 g     O .bss	00000004 errno
10009da8 g     F .text	00000008 __seofread
10016024 g     O .bss	00000004 alt_argv
1001c4c4 g       *ABS*	00000000 _gp
10010138 g     F .text	00000030 usleep
100132e4 g     O .rwdata	00000180 alt_fd_list
100118d0 g     F .text	00000090 alt_find_dev
100082a4 g     F .text	00000148 memcpy
10006894 g     F .text	0000000c _cleanup_r
1000f360 g     F .text	000000dc .hidden __floatsidf
100115ac g     F .text	0000007c alt_io_redirect
1000e084 g     F .text	000000f4 .hidden __ltdf2
10011f5c g       *ABS*	00000000 __DTOR_END__
100026b4 g     F .text	00000014 puts
10011b2c g     F .text	0000009c alt_exception_cause_generated_bad_addr
10009c8c g     F .text	00000074 __fpclassifyd
1000950c g     F .text	000000a4 __ratio
1000b58c g     F .text	0000001c __vfiprintf_internal
10010984 g     F .text	0000021c altera_avalon_jtag_uart_read
10002588 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
100024cc g     F .text	00000064 .hidden __udivsi3
1000f9ac g     F .text	000000ac isatty
100127fc g     O .rodata	000000c8 __mprec_tens
10007798 g     F .text	0000000c __locale_charset
10016010 g     O .bss	00000008 alt_timezone
1001600c g     O .bss	00000004 __malloc_top_pad
10001960 g     F .text	00000268 UsbGetConfigDesc2
100144cc g     O .rwdata	00000004 __mb_cur_max
100077c8 g     F .text	0000000c _localeconv_r
10008aa4 g     F .text	0000003c __i2b
10007070 g     F .text	000004c8 __sfvwrite_r
10009d00 g     F .text	00000054 _sbrk_r
1000bc10 g     F .text	00000060 _read_r
100144ec g     O .rwdata	00000004 alt_max_fd
1000b7f4 g     F .text	000000f0 _fclose_r
1000685c g     F .text	00000030 fflush
10016008 g     O .bss	00000004 __malloc_max_sbrked_mem
1000cca4 g     F .text	000008ac .hidden __adddf3
100092b4 g     F .text	0000010c __b2d
1000c6b8 g     F .text	000005c4 .hidden __umoddi3
1000fb80 g     F .text	000000dc lseek
100144c4 g     O .rwdata	00000004 _global_impure_ptr
10009728 g     F .text	00000564 _realloc_r
10016164 g       *ABS*	00000000 __bss_end
100113d8 g     F .text	000000f0 alt_iic_isr_register
10010030 g     F .text	00000108 alt_tick
1000c0bc g     F .text	000005fc .hidden __udivdi3
1000ba5c g     F .text	00000024 _fputwc_r
100127d4 g     O .rodata	00000028 __mprec_bigtens
10008888 g     F .text	00000104 __s2b
1000f43c g     F .text	000000a8 .hidden __floatunsidf
10008ff4 g     F .text	00000060 __mcmp
100013b0 g     F .text	00000100 UsbSetAddress
10006c0c g     F .text	00000018 __fp_lock_all
1001138c g     F .text	0000004c alt_ic_irq_enabled
1000ff94 g     F .text	0000009c alt_alarm_stop
10016034 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
100132bc g     O .rwdata	00000028 alt_dev_null
10011048 g     F .text	00000020 alt_dcache_flush_all
1000898c g     F .text	00000068 __hi0bits
10000364 g     F .text	00000068 IO_read
1000f2e0 g     F .text	00000080 .hidden __fixdfsi
10014504 g       *ABS*	00000000 __ram_rwdata_end
100144e4 g     O .rwdata	00000008 alt_dev_list
100101a4 g     F .text	00000100 write
10012a18 g       *ABS*	00000000 __ram_rodata_end
1000f6c4 g     F .text	000000b8 fstat
1000e084 g     F .text	000000f4 .hidden __ledf2
10002354 g     F .text	00000080 UsbPrintMem
10008d6c g     F .text	00000140 __pow5mult
1000a080 g     F .text	0000150c ___vfiprintf_internal_r
10016000 g     O .bss	00000004 __nlocale_changed
10002530 g     F .text	00000058 .hidden __umodsi3
10016164 g       *ABS*	00000000 end
100104c0 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10011f5c g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000f4e4 g     F .text	00000064 .hidden __clzsi2
10010ba0 g     F .text	00000224 altera_avalon_jtag_uart_write
10006bfc g     F .text	00000004 __sfp_lock_acquire
100081c0 g     F .text	000000e4 memchr
1000282c g     F .text	000022dc ___vfprintf_internal_r
10001cc8 g     F .text	00000100 UsbClassRequest
10006d60 g     F .text	00000310 _free_r
100077a4 g     F .text	00000010 __locale_mb_cur_max
10011da8 g     F .text	00000180 __call_exitprocs
10015ffc g     O .bss	00000004 __mlocale_changed
100144d0 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
1001602c g     O .bss	00000004 _alt_tick_rate
100026e0 g     F .text	00000064 rand
10008eac g     F .text	00000148 __lshift
10016030 g     O .bss	00000004 _alt_nticks
1000fd5c g     F .text	00000104 read
10010310 g     F .text	0000004c alt_sys_init
10011c90 g     F .text	00000118 __register_exitproc
10008ae0 g     F .text	0000028c __multiply
1001082c g     F .text	00000068 altera_avalon_jtag_uart_close
1000cc7c g     F .text	00000028 .hidden __mulsi3
10012a18 g       *ABS*	00000000 __ram_rwdata_start
10011f5c g       *ABS*	00000000 __ram_rodata_start
1001603c g     O .bss	00000028 __malloc_current_mallinfo
100093c0 g     F .text	0000014c __d2b
100014b0 g     F .text	00000148 UsbGetDeviceDesc1
1001035c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10011a68 g     F .text	000000c4 alt_get_fd
10010ef0 g     F .text	00000158 alt_busy_sleep
1000b6c4 g     F .text	00000054 _close_r
10011c14 g     F .text	0000007c memcmp
1001041c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10016164 g       *ABS*	00000000 __alt_stack_base
1001046c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10004be0 g     F .text	00000154 __swsetup_r
1000d550 g     F .text	000009d0 .hidden __divdf3
10006abc g     F .text	00000118 __sfp
10009624 g     F .text	00000078 __copybits
10012eb4 g     O .rwdata	00000408 __malloc_av_
10006c08 g     F .text	00000004 __sinit_lock_release
1000e178 g     F .text	0000086c .hidden __muldf3
10009d54 g     F .text	00000054 __sread
10002250 g     F .text	00000084 UsbWaitTDListDone
10011960 g     F .text	00000108 alt_find_file
100110a4 g     F .text	000000a4 alt_dev_llist_insert
1000fcd8 g     F .text	00000024 __malloc_lock
1000fee4 g     F .text	000000b0 sbrk
10006800 g     F .text	0000005c _fflush_r
1000b718 g     F .text	000000dc _calloc_r
1000f77c g     F .text	000001f4 gettimeofday
10015ff0 g       *ABS*	00000000 __bss_start
10008548 g     F .text	00000128 memset
100003cc g     F .text	00000e94 main
10016028 g     O .bss	00000004 alt_envp
10016004 g     O .bss	00000004 __malloc_max_total_mem
100103bc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10001bc8 g     F .text	00000100 UsbSetConfig
1000bdb0 g     F .text	00000018 __swbuf
100026c8 g     F .text	00000018 srand
10009e88 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000b8e4 g     F .text	00000014 fclose
10004f5c g     F .text	00001688 _dtoa_r
100079b4 g     F .text	0000080c _malloc_r
1000bf24 g     F .text	00000030 __ascii_wctomb
100027dc g     F .text	00000050 time
100144f0 g     O .rwdata	00000004 alt_errno
10007538 g     F .text	000000c4 _fwalk
100023d4 g     F .text	00000084 .hidden __divsi3
10006c3c g     F .text	00000124 _malloc_trim_r
10001dc8 g     F .text	00000148 UsbGetHidDesc
10011f5c g       *ABS*	00000000 __CTOR_END__
10009e90 g     F .text	000000dc strcmp
10011f5c g       *ABS*	00000000 __flash_rodata_start
10011f5c g       *ABS*	00000000 __DTOR_LIST__
1000df20 g     F .text	00000088 .hidden __nedf2
100012b8 g     F .text	00000044 UsbRead
100102d8 g     F .text	00000038 alt_irq_init
1000fe60 g     F .text	00000084 alt_release_fd
100128e4 g     O .rodata	00000100 .hidden __clz_tab
10015ff8 g     O .bss	00000004 _PathLocale
10011bc8 g     F .text	00000014 atexit
1000b664 g     F .text	00000060 _write_r
100077d4 g     F .text	00000018 setlocale
100144c8 g     O .rwdata	00000004 _impure_ptr
10016020 g     O .bss	00000004 alt_argc
100065e4 g     F .text	0000021c __sflush_r
100111a8 g     F .text	00000060 _do_dtors
100077c0 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10009250 g     F .text	00000064 __ulp
10006c24 g     F .text	00000018 __fp_unlock_all
100144dc g     O .rwdata	00000008 alt_fs_list
10016018 g     O .bss	00000008 alt_resettime
10001f10 g     F .text	00000340 UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
100077ec g     F .text	0000000c localeconv
10011228 g     F .text	00000050 alt_ic_isr_register
10014504 g       *ABS*	00000000 _edata
10016164 g       *ABS*	00000000 _end
10001260 g     F .text	00000058 UsbWrite
1000b8f8 g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
10010894 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10011300 g     F .text	0000008c alt_ic_irq_disable
10009db0 g     F .text	0000007c __swrite
100144d4 g     O .rwdata	00000004 __malloc_trim_threshold
100077b4 g     F .text	0000000c __locale_msgcharset
10011bdc g     F .text	00000038 exit
100075fc g     F .text	000000c4 _fwalk_reent
10009054 g     F .text	000001fc __mdiff
10002458 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10006c00 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100002f4 g     F .text	00000070 IO_write
10011f28 g     F .text	00000034 _exit
10010dc4 g     F .text	0000012c alt_alarm_start
1000bfb0 g     F .text	0000010c .hidden __muldi3
100077f8 g     F .text	000001bc __smakebuf_r
10002744 g     F .text	00000098 strlen
10011750 g     F .text	0000015c open
1000dfa8 g     F .text	000000dc .hidden __gedf2
100144d8 g     O .rwdata	00000004 __wctomb
1000a068 g     F .text	00000018 __sprint_r
10011208 g     F .text	00000020 alt_icache_flush_all
10014500 g     O .rwdata	00000004 alt_priority_mask
10011278 g     F .text	00000088 alt_ic_irq_enable
10004b08 g     F .text	0000001c __vfprintf_internal
1000bf54 g     F .text	0000005c _wctomb_r
1000e9e4 g     F .text	000008fc .hidden __subdf3
100089f4 g     F .text	000000b0 __lo0bits
100017d0 g     F .text	00000190 UsbGetConfigDesc1
100144f8 g     O .rwdata	00000008 alt_alarm_list
10011148 g     F .text	00000060 _do_ctors
100012fc g     F .text	000000b4 UsbSoftReset
1000be64 g     F .text	000000c0 wcrtomb
1000f584 g     F .text	000000d8 close
100015f8 g     F .text	000001d8 UsbGetDeviceDesc2
1000fac0 g     F .text	00000084 alt_load
1000ba80 g     F .text	00000080 fputwc
10006c04 g     F .text	00000004 __sinit_lock_acquire
10008740 g     F .text	00000148 __multadd
10008718 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10981904 	addi	r2,r2,24676
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10981904 	addi	r2,r2,24676
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a6dd17 	ldw	r2,-25740(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a6dd17 	ldw	r2,-25740(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
1000023c:	d6b13114 	ori	gp,gp,50372
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	1097fc14 	ori	r2,r2,24560

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18d85914 	ori	r3,r3,24932

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	000fac00 	call	1000fac0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	000fc5c0 	call	1000fc5c <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
1000026c:	deffff04 	addi	sp,sp,-4
10000270:	df000015 	stw	fp,0(sp)
10000274:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
10000278:	00801004 	movi	r2,64
1000027c:	00c00044 	movi	r3,1
10000280:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000284:	00801404 	movi	r2,80
10000288:	00c00044 	movi	r3,1
1000028c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10000290:	00801c04 	movi	r2,112
10000294:	00c00044 	movi	r3,1
10000298:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
1000029c:	00801804 	movi	r2,96
100002a0:	00c00044 	movi	r3,1
100002a4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
100002a8:	00802404 	movi	r2,144
100002ac:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
100002b0:	00802004 	movi	r2,128
100002b4:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
100002b8:	00801404 	movi	r2,80
100002bc:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
100002c0:	00801004 	movi	r2,64
100002c4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
100002c8:	00801004 	movi	r2,64
100002cc:	00c00044 	movi	r3,1
100002d0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100002d4:	00801404 	movi	r2,80
100002d8:	00c00044 	movi	r3,1
100002dc:	10c00005 	stb	r3,0(r2)
}
100002e0:	0001883a 	nop
100002e4:	e037883a 	mov	sp,fp
100002e8:	df000017 	ldw	fp,0(sp)
100002ec:	dec00104 	addi	sp,sp,4
100002f0:	f800283a 	ret

100002f4 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
100002f4:	defffd04 	addi	sp,sp,-12
100002f8:	df000215 	stw	fp,8(sp)
100002fc:	df000204 	addi	fp,sp,8
10000300:	2007883a 	mov	r3,r4
10000304:	2805883a 	mov	r2,r5
10000308:	e0fffe05 	stb	r3,-8(fp)
1000030c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
10000310:	00802404 	movi	r2,144
10000314:	e0fffe03 	ldbu	r3,-8(fp)
10000318:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
1000031c:	00802004 	movi	r2,128
10000320:	e0ffff0b 	ldhu	r3,-4(fp)
10000324:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000328:	00801404 	movi	r2,80
1000032c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10000330:	00801804 	movi	r2,96
10000334:	10000005 	stb	zero,0(r2)

	// Reset OTG chip
	*otg_hpi_w = 1;
10000338:	00801804 	movi	r2,96
1000033c:	00c00044 	movi	r3,1
10000340:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000344:	00801404 	movi	r2,80
10000348:	00c00044 	movi	r3,1
1000034c:	10c00005 	stb	r3,0(r2)
}
10000350:	0001883a 	nop
10000354:	e037883a 	mov	sp,fp
10000358:	df000017 	ldw	fp,0(sp)
1000035c:	dec00104 	addi	sp,sp,4
10000360:	f800283a 	ret

10000364 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
10000364:	defffd04 	addi	sp,sp,-12
10000368:	df000215 	stw	fp,8(sp)
1000036c:	df000204 	addi	fp,sp,8
10000370:	2005883a 	mov	r2,r4
10000374:	e0bfff05 	stb	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	//printf("%x\n",temp);
	*otg_hpi_address = Address;
10000378:	00802404 	movi	r2,144
1000037c:	e0ffff03 	ldbu	r3,-4(fp)
10000380:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000384:	00801404 	movi	r2,80
10000388:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
1000038c:	00801c04 	movi	r2,112
10000390:	10000005 	stb	zero,0(r2)
	data = *otg_hpi_data;
10000394:	00802004 	movi	r2,128
10000398:	10800017 	ldw	r2,0(r2)
1000039c:	e0bffe0d 	sth	r2,-8(fp)

	// Reset OTG chip
	*otg_hpi_r = 1;
100003a0:	00801c04 	movi	r2,112
100003a4:	00c00044 	movi	r3,1
100003a8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100003ac:	00801404 	movi	r2,80
100003b0:	00c00044 	movi	r3,1
100003b4:	10c00005 	stb	r3,0(r2)

	return data;
100003b8:	e0bffe0b 	ldhu	r2,-8(fp)
}
100003bc:	e037883a 	mov	sp,fp
100003c0:	df000017 	ldw	fp,0(sp)
100003c4:	dec00104 	addi	sp,sp,4
100003c8:	f800283a 	ret

100003cc <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
100003cc:	defff304 	addi	sp,sp,-52
100003d0:	dfc00c15 	stw	ra,48(sp)
100003d4:	df000b15 	stw	fp,44(sp)
100003d8:	df000b04 	addi	fp,sp,44
	IO_init();
100003dc:	000026c0 	call	1000026c <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
100003e0:	e03ffa0d 	sth	zero,-24(fp)
	int keycode = 0;
100003e4:	e03ffb15 	stw	zero,-20(fp)
	alt_u8 toggle = 0;
100003e8:	e03ff585 	stb	zero,-42(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;
	int space_trigger = 0;
100003ec:	e03ff615 	stw	zero,-40(fp)
	int space_pressed =0;
100003f0:	e03ff715 	stw	zero,-36(fp)
	int space_counter = 0;
100003f4:	e03ff815 	stw	zero,-32(fp)
	printf("USB keyboard setup...\n\n");
100003f8:	01040074 	movhi	r4,4097
100003fc:	2107d704 	addi	r4,r4,8028
10000400:	00026b40 	call	100026b4 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
10000404:	00012fc0 	call	100012fc <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10000408:	000b883a 	mov	r5,zero
1000040c:	01005104 	movi	r4,324
10000410:	00012600 	call	10001260 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10000414:	017fffd4 	movui	r5,65535
10000418:	01302414 	movui	r4,49296
1000041c:	00012600 	call	10001260 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10000420:	01409604 	movi	r5,600
10000424:	01006d04 	movi	r4,436
10000428:	00012600 	call	10001260 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
1000042c:	00811004 	movi	r2,1088
10000430:	e0bff50d 	sth	r2,-44(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10000434:	e0bff50b 	ldhu	r2,-44(fp)
10000438:	100b883a 	mov	r5,r2
1000043c:	01005084 	movi	r4,322
10000440:	00012600 	call	10001260 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
10000444:	00808404 	movi	r2,528
10000448:	e0bffc0d 	sth	r2,-16(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
1000044c:	e0bffc0b 	ldhu	r2,-16(fp)
10000450:	100b883a 	mov	r5,r2
10000454:	01302314 	movui	r4,49292
10000458:	00012600 	call	10001260 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
1000045c:	000b883a 	mov	r5,zero
10000460:	01007104 	movi	r4,452
10000464:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10000468:	000b883a 	mov	r5,zero
1000046c:	01007184 	movi	r4,454
10000470:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000474:	000b883a 	mov	r5,zero
10000478:	01007204 	movi	r4,456
1000047c:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10000480:	000b883a 	mov	r5,zero
10000484:	01007284 	movi	r4,458
10000488:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
1000048c:	000b883a 	mov	r5,zero
10000490:	01007304 	movi	r4,460
10000494:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000498:	000b883a 	mov	r5,zero
1000049c:	01007384 	movi	r4,462
100004a0:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
100004a4:	000b883a 	mov	r5,zero
100004a8:	01007404 	movi	r4,464
100004ac:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100004b0:	000b883a 	mov	r5,zero
100004b4:	01007484 	movi	r4,466
100004b8:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100004bc:	000b883a 	mov	r5,zero
100004c0:	01007504 	movi	r4,468
100004c4:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100004c8:	000b883a 	mov	r5,zero
100004cc:	01007584 	movi	r4,470
100004d0:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100004d4:	000b883a 	mov	r5,zero
100004d8:	01007604 	movi	r4,472
100004dc:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100004e0:	000b883a 	mov	r5,zero
100004e4:	01007684 	movi	r4,474
100004e8:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100004ec:	000b883a 	mov	r5,zero
100004f0:	01007704 	movi	r4,476
100004f4:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
100004f8:	000b883a 	mov	r5,zero
100004fc:	01007784 	movi	r4,478
10000500:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
10000504:	01401c84 	movi	r5,114
10000508:	01007084 	movi	r4,450
1000050c:	00012600 	call	10001260 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000510:	01738054 	movui	r5,52737
10000514:	01000044 	movi	r4,1
10000518:	00002f40 	call	100002f4 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
1000051c:	0001883a 	nop
10000520:	010000c4 	movi	r4,3
10000524:	00003640 	call	10000364 <IO_read>
10000528:	10bfffcc 	andi	r2,r2,65535
1000052c:	103ffc26 	beq	r2,zero,10000520 <__alt_data_end+0xf8000520>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000530:	00000806 	br	10000554 <main+0x188>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10000534:	01000044 	movi	r4,1
10000538:	00003640 	call	10000364 <IO_read>
1000053c:	10bfffcc 	andi	r2,r2,65535
10000540:	100b883a 	mov	r5,r2
10000544:	01040074 	movhi	r4,4097
10000548:	2107dd04 	addi	r4,r4,8052
1000054c:	00025b80 	call	100025b8 <printf>
		goto USB_HOT_PLUG;
10000550:	003fac06 	br	10000404 <__alt_data_end+0xf8000404>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000554:	01000044 	movi	r4,1
10000558:	00003640 	call	10000364 <IO_read>
1000055c:	10bfffcc 	andi	r2,r2,65535
10000560:	1083fb58 	cmpnei	r2,r2,4077
10000564:	103ff31e 	bne	r2,zero,10000534 <__alt_data_end+0xf8000534>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
10000568:	01040074 	movhi	r4,4097
1000056c:	2107e604 	addi	r4,r4,8088
10000570:	00025b80 	call	100025b8 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
10000574:	01401d04 	movi	r5,116
10000578:	01007084 	movi	r4,450
1000057c:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
10000580:	01400f04 	movi	r5,60
10000584:	01007104 	movi	r4,452
10000588:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
1000058c:	000b883a 	mov	r5,zero
10000590:	01007184 	movi	r4,454
10000594:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000598:	000b883a 	mov	r5,zero
1000059c:	01007204 	movi	r4,456
100005a0:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
100005a4:	000b883a 	mov	r5,zero
100005a8:	01007284 	movi	r4,458
100005ac:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
100005b0:	000b883a 	mov	r5,zero
100005b4:	01007304 	movi	r4,460
100005b8:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
100005bc:	000b883a 	mov	r5,zero
100005c0:	01007384 	movi	r4,462
100005c4:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
100005c8:	000b883a 	mov	r5,zero
100005cc:	01007404 	movi	r4,464
100005d0:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100005d4:	000b883a 	mov	r5,zero
100005d8:	01007484 	movi	r4,466
100005dc:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100005e0:	000b883a 	mov	r5,zero
100005e4:	01007504 	movi	r4,468
100005e8:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100005ec:	000b883a 	mov	r5,zero
100005f0:	01007584 	movi	r4,470
100005f4:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100005f8:	000b883a 	mov	r5,zero
100005fc:	01007604 	movi	r4,472
10000600:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10000604:	000b883a 	mov	r5,zero
10000608:	01007684 	movi	r4,474
1000060c:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000610:	000b883a 	mov	r5,zero
10000614:	01007704 	movi	r4,476
10000618:	00012600 	call	10001260 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
1000061c:	000b883a 	mov	r5,zero
10000620:	01007784 	movi	r4,478
10000624:	00012600 	call	10001260 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000628:	01738054 	movui	r5,52737
1000062c:	01000044 	movi	r4,1
10000630:	00002f40 	call	100002f4 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000634:	0001883a 	nop
10000638:	01000044 	movi	r4,1
1000063c:	00003640 	call	10000364 <IO_read>
10000640:	10bfffcc 	andi	r2,r2,65535
10000644:	1083fb58 	cmpnei	r2,r2,4077
10000648:	10000826 	beq	r2,zero,1000066c <main+0x2a0>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
1000064c:	01000044 	movi	r4,1
10000650:	00003640 	call	10000364 <IO_read>
10000654:	10bfffcc 	andi	r2,r2,65535
10000658:	100b883a 	mov	r5,r2
1000065c:	01040074 	movhi	r4,4097
10000660:	2107dd04 	addi	r4,r4,8052
10000664:	00025b80 	call	100025b8 <printf>
		goto USB_HOT_PLUG;
10000668:	003f6606 	br	10000404 <__alt_data_end+0xf8000404>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
1000066c:	00b02284 	movi	r2,-16246
10000670:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
10000674:	008c0004 	movi	r2,12288
10000678:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
1000067c:	00880004 	movi	r2,8192
10000680:	e0bffa0d 	sth	r2,-24(fp)
	usb_ctl_val = UsbRead(ctl_reg);
10000684:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000688:	10bfffcc 	andi	r2,r2,65535
1000068c:	1009883a 	mov	r4,r2
10000690:	00012b80 	call	100012b8 <UsbRead>
10000694:	e0bff50d 	sth	r2,-44(fp)

	if (!(usb_ctl_val & no_device))
10000698:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000069c:	e0fff50b 	ldhu	r3,-44(fp)
100006a0:	1884703a 	and	r2,r3,r2
100006a4:	10bfffcc 	andi	r2,r2,65535
100006a8:	1000351e 	bne	r2,zero,10000780 <main+0x3b4>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100006ac:	e03ff5c5 	stb	zero,-41(fp)
100006b0:	00000f06 	br	100006f0 <main+0x324>
		{
			usleep(5*1000);
100006b4:	0104e204 	movi	r4,5000
100006b8:	00101380 	call	10010138 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100006bc:	d0a6cb0b 	ldhu	r2,-25812(gp)
100006c0:	10bfffcc 	andi	r2,r2,65535
100006c4:	1009883a 	mov	r4,r2
100006c8:	00012b80 	call	100012b8 <UsbRead>
100006cc:	e0bff50d 	sth	r2,-44(fp)
			if(usb_ctl_val & no_device) break;
100006d0:	d0a6cb8b 	ldhu	r2,-25810(gp)
100006d4:	e0fff50b 	ldhu	r3,-44(fp)
100006d8:	1884703a 	and	r2,r3,r2
100006dc:	10bfffcc 	andi	r2,r2,65535
100006e0:	1000071e 	bne	r2,zero,10000700 <main+0x334>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100006e4:	e0bff5c3 	ldbu	r2,-41(fp)
100006e8:	10800044 	addi	r2,r2,1
100006ec:	e0bff5c5 	stb	r2,-41(fp)
100006f0:	e0bff5c3 	ldbu	r2,-41(fp)
100006f4:	10800170 	cmpltui	r2,r2,5
100006f8:	103fee1e 	bne	r2,zero,100006b4 <__alt_data_end+0xf80006b4>
100006fc:	00000106 	br	10000704 <main+0x338>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
10000700:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
10000704:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000708:	e0fff50b 	ldhu	r3,-44(fp)
1000070c:	1884703a 	and	r2,r3,r2
10000710:	10bfffcc 	andi	r2,r2,65535
10000714:	1000261e 	bne	r2,zero,100007b0 <main+0x3e4>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10000718:	01040074 	movhi	r4,4097
1000071c:	2107ea04 	addi	r4,r4,8104
10000720:	00026b40 	call	100026b4 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10000724:	01040074 	movhi	r4,4097
10000728:	2107f404 	addi	r4,r4,8144
1000072c:	00026b40 	call	100026b4 <puts>
			while (!(usb_ctl_val & no_device))
10000730:	00000d06 	br	10000768 <main+0x39c>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10000734:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000738:	10bfffcc 	andi	r2,r2,65535
1000073c:	1009883a 	mov	r4,r2
10000740:	00012b80 	call	100012b8 <UsbRead>
10000744:	e0bff50d 	sth	r2,-44(fp)
				if(usb_ctl_val & no_device)
10000748:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000074c:	e0fff50b 	ldhu	r3,-44(fp)
10000750:	1884703a 	and	r2,r3,r2
10000754:	10bfffcc 	andi	r2,r2,65535
10000758:	10000126 	beq	r2,zero,10000760 <main+0x394>
					goto USB_HOT_PLUG;
1000075c:	003f2906 	br	10000404 <__alt_data_end+0xf8000404>

				usleep(2000);
10000760:	0101f404 	movi	r4,2000
10000764:	00101380 	call	10010138 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
10000768:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000076c:	e0fff50b 	ldhu	r3,-44(fp)
10000770:	1884703a 	and	r2,r3,r2
10000774:	10bfffcc 	andi	r2,r2,65535
10000778:	103fee26 	beq	r2,zero,10000734 <__alt_data_end+0xf8000734>
1000077c:	00000c06 	br	100007b0 <main+0x3e4>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
10000780:	e0fff50b 	ldhu	r3,-44(fp)
10000784:	e0bffa0b 	ldhu	r2,-24(fp)
10000788:	1884703a 	and	r2,r3,r2
1000078c:	10bfffcc 	andi	r2,r2,65535
10000790:	10000426 	beq	r2,zero,100007a4 <main+0x3d8>
		{
			printf("[INFO]: full speed device\n");
10000794:	01040074 	movhi	r4,4097
10000798:	21080004 	addi	r4,r4,8192
1000079c:	00026b40 	call	100026b4 <puts>
100007a0:	00000306 	br	100007b0 <main+0x3e4>
		}
		else
		{
			printf("[INFO]: low speed device\n");
100007a4:	01040074 	movhi	r4,4097
100007a8:	21080704 	addi	r4,r4,8220
100007ac:	00026b40 	call	100026b4 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
100007b0:	00013b00 	call	100013b0 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007b4:	00000306 	br	100007c4 <main+0x3f8>
	{
		UsbSetAddress();
100007b8:	00013b00 	call	100013b0 <UsbSetAddress>
		usleep(10*1000);
100007bc:	0109c404 	movi	r4,10000
100007c0:	00101380 	call	10010138 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007c4:	010000c4 	movi	r4,3
100007c8:	00003640 	call	10000364 <IO_read>
100007cc:	10bfffcc 	andi	r2,r2,65535
100007d0:	1080040c 	andi	r2,r2,16
100007d4:	103ff826 	beq	r2,zero,100007b8 <__alt_data_end+0xf80007b8>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100007d8:	00022500 	call	10002250 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
100007dc:	01414184 	movi	r5,1286
100007e0:	01000084 	movi	r4,2
100007e4:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
100007e8:	0009883a 	mov	r4,zero
100007ec:	00003640 	call	10000364 <IO_read>
100007f0:	10bfffcc 	andi	r2,r2,65535
100007f4:	100b883a 	mov	r5,r2
100007f8:	01040074 	movhi	r4,4097
100007fc:	21080e04 	addi	r4,r4,8248
10000800:	00025b80 	call	100025b8 <printf>

	IO_write(HPI_ADDR,0x0508); // n
10000804:	01414204 	movi	r5,1288
10000808:	01000084 	movi	r4,2
1000080c:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000810:	0009883a 	mov	r4,zero
10000814:	00003640 	call	10000364 <IO_read>
10000818:	e0bff50d 	sth	r2,-44(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
1000081c:	e0bff50b 	ldhu	r2,-44(fp)
10000820:	100b883a 	mov	r5,r2
10000824:	01040074 	movhi	r4,4097
10000828:	21081904 	addi	r4,r4,8292
1000082c:	00025b80 	call	100025b8 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10000830:	e0bff50b 	ldhu	r2,-44(fp)
10000834:	108000e0 	cmpeqi	r2,r2,3
10000838:	1000031e 	bne	r2,zero,10000848 <main+0x47c>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000083c:	00022d40 	call	100022d4 <UsbGetRetryCnt>
10000840:	e0bff50d 	sth	r2,-44(fp)

		goto USB_HOT_PLUG;
10000844:	003eef06 	br	10000404 <__alt_data_end+0xf8000404>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
10000848:	01040074 	movhi	r4,4097
1000084c:	21082504 	addi	r4,r4,8340
10000850:	00026b40 	call	100026b4 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
10000854:	00014b00 	call	100014b0 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000858:	00000306 	br	10000868 <main+0x49c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
1000085c:	00014b00 	call	100014b0 <UsbGetDeviceDesc1>
		usleep(10*1000);
10000860:	0109c404 	movi	r4,10000
10000864:	00101380 	call	10010138 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000868:	010000c4 	movi	r4,3
1000086c:	00003640 	call	10000364 <IO_read>
10000870:	10bfffcc 	andi	r2,r2,65535
10000874:	1080040c 	andi	r2,r2,16
10000878:	103ff826 	beq	r2,zero,1000085c <__alt_data_end+0xf800085c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000087c:	00022500 	call	10002250 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000880:	01414184 	movi	r5,1286
10000884:	01000084 	movi	r4,2
10000888:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000088c:	0009883a 	mov	r4,zero
10000890:	00003640 	call	10000364 <IO_read>
10000894:	10bfffcc 	andi	r2,r2,65535
10000898:	100b883a 	mov	r5,r2
1000089c:	01040074 	movhi	r4,4097
100008a0:	21083404 	addi	r4,r4,8400
100008a4:	00025b80 	call	100025b8 <printf>

	IO_write(HPI_ADDR,0x0508);
100008a8:	01414204 	movi	r5,1288
100008ac:	01000084 	movi	r4,2
100008b0:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100008b4:	0009883a 	mov	r4,zero
100008b8:	00003640 	call	10000364 <IO_read>
100008bc:	e0bff50d 	sth	r2,-44(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100008c0:	e0bff50b 	ldhu	r2,-44(fp)
100008c4:	100b883a 	mov	r5,r2
100008c8:	01040074 	movhi	r4,4097
100008cc:	21083f04 	addi	r4,r4,8444
100008d0:	00025b80 	call	100025b8 <printf>
	while (usb_ctl_val != 0x03)
100008d4:	00000206 	br	100008e0 <main+0x514>
	{
		usb_ctl_val = UsbGetRetryCnt();
100008d8:	00022d40 	call	100022d4 <UsbGetRetryCnt>
100008dc:	e0bff50d 	sth	r2,-44(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100008e0:	e0bff50b 	ldhu	r2,-44(fp)
100008e4:	108000d8 	cmpnei	r2,r2,3
100008e8:	103ffb1e 	bne	r2,zero,100008d8 <__alt_data_end+0xf80008d8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
100008ec:	01040074 	movhi	r4,4097
100008f0:	21084b04 	addi	r4,r4,8492
100008f4:	00026b40 	call	100026b4 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
100008f8:	00015f80 	call	100015f8 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100008fc:	00000306 	br	1000090c <main+0x540>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10000900:	00015f80 	call	100015f8 <UsbGetDeviceDesc2>
		usleep(10*1000);
10000904:	0109c404 	movi	r4,10000
10000908:	00101380 	call	10010138 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000090c:	010000c4 	movi	r4,3
10000910:	00003640 	call	10000364 <IO_read>
10000914:	10bfffcc 	andi	r2,r2,65535
10000918:	1080040c 	andi	r2,r2,16
1000091c:	103ff826 	beq	r2,zero,10000900 <__alt_data_end+0xf8000900>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000920:	00022500 	call	10002250 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000924:	01414184 	movi	r5,1286
10000928:	01000084 	movi	r4,2
1000092c:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000930:	0009883a 	mov	r4,zero
10000934:	00003640 	call	10000364 <IO_read>
10000938:	10bfffcc 	andi	r2,r2,65535
1000093c:	100b883a 	mov	r5,r2
10000940:	01040074 	movhi	r4,4097
10000944:	21083404 	addi	r4,r4,8400
10000948:	00025b80 	call	100025b8 <printf>

	IO_write(HPI_ADDR,0x0508);
1000094c:	01414204 	movi	r5,1288
10000950:	01000084 	movi	r4,2
10000954:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000958:	0009883a 	mov	r4,zero
1000095c:	00003640 	call	10000364 <IO_read>
10000960:	e0bff50d 	sth	r2,-44(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000964:	e0bff50b 	ldhu	r2,-44(fp)
10000968:	100b883a 	mov	r5,r2
1000096c:	01040074 	movhi	r4,4097
10000970:	21083f04 	addi	r4,r4,8444
10000974:	00025b80 	call	100025b8 <printf>
	while (usb_ctl_val != 0x03)
10000978:	00000206 	br	10000984 <main+0x5b8>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000097c:	00022d40 	call	100022d4 <UsbGetRetryCnt>
10000980:	e0bff50d 	sth	r2,-44(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000984:	e0bff50b 	ldhu	r2,-44(fp)
10000988:	108000d8 	cmpnei	r2,r2,3
1000098c:	103ffb1e 	bne	r2,zero,1000097c <__alt_data_end+0xf800097c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
10000990:	01040074 	movhi	r4,4097
10000994:	21085f04 	addi	r4,r4,8572
10000998:	00026b40 	call	100026b4 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
1000099c:	00017d00 	call	100017d0 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009a0:	00000306 	br	100009b0 <main+0x5e4>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
100009a4:	00017d00 	call	100017d0 <UsbGetConfigDesc1>
		usleep(10*1000);
100009a8:	0109c404 	movi	r4,10000
100009ac:	00101380 	call	10010138 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009b0:	010000c4 	movi	r4,3
100009b4:	00003640 	call	10000364 <IO_read>
100009b8:	10bfffcc 	andi	r2,r2,65535
100009bc:	1080040c 	andi	r2,r2,16
100009c0:	103ff826 	beq	r2,zero,100009a4 <__alt_data_end+0xf80009a4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100009c4:	00022500 	call	10002250 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100009c8:	01414184 	movi	r5,1286
100009cc:	01000084 	movi	r4,2
100009d0:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
100009d4:	0009883a 	mov	r4,zero
100009d8:	00003640 	call	10000364 <IO_read>
100009dc:	10bfffcc 	andi	r2,r2,65535
100009e0:	100b883a 	mov	r5,r2
100009e4:	01040074 	movhi	r4,4097
100009e8:	21087104 	addi	r4,r4,8644
100009ec:	00025b80 	call	100025b8 <printf>

	IO_write(HPI_ADDR,0x0508);
100009f0:	01414204 	movi	r5,1288
100009f4:	01000084 	movi	r4,2
100009f8:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100009fc:	0009883a 	mov	r4,zero
10000a00:	00003640 	call	10000364 <IO_read>
10000a04:	e0bff50d 	sth	r2,-44(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
10000a08:	e0bff50b 	ldhu	r2,-44(fp)
10000a0c:	100b883a 	mov	r5,r2
10000a10:	01040074 	movhi	r4,4097
10000a14:	21087c04 	addi	r4,r4,8688
10000a18:	00025b80 	call	100025b8 <printf>
	while (usb_ctl_val != 0x03)
10000a1c:	00000206 	br	10000a28 <main+0x65c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000a20:	00022d40 	call	100022d4 <UsbGetRetryCnt>
10000a24:	e0bff50d 	sth	r2,-44(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000a28:	e0bff50b 	ldhu	r2,-44(fp)
10000a2c:	108000d8 	cmpnei	r2,r2,3
10000a30:	103ffb1e 	bne	r2,zero,10000a20 <__alt_data_end+0xf8000a20>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10000a34:	01040074 	movhi	r4,4097
10000a38:	21088804 	addi	r4,r4,8736
10000a3c:	00026b40 	call	100026b4 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10000a40:	00019600 	call	10001960 <UsbGetConfigDesc2>

	usleep(100*1000);
10000a44:	010000b4 	movhi	r4,2
10000a48:	2121a804 	addi	r4,r4,-31072
10000a4c:	00101380 	call	10010138 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a50:	00000306 	br	10000a60 <main+0x694>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
10000a54:	00019600 	call	10001960 <UsbGetConfigDesc2>
		usleep(10*1000);
10000a58:	0109c404 	movi	r4,10000
10000a5c:	00101380 	call	10010138 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a60:	010000c4 	movi	r4,3
10000a64:	00003640 	call	10000364 <IO_read>
10000a68:	10bfffcc 	andi	r2,r2,65535
10000a6c:	1080040c 	andi	r2,r2,16
10000a70:	103ff826 	beq	r2,zero,10000a54 <__alt_data_end+0xf8000a54>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000a74:	00022500 	call	10002250 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000a78:	01414184 	movi	r5,1286
10000a7c:	01000084 	movi	r4,2
10000a80:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000a84:	0009883a 	mov	r4,zero
10000a88:	00003640 	call	10000364 <IO_read>
10000a8c:	10bfffcc 	andi	r2,r2,65535
10000a90:	100b883a 	mov	r5,r2
10000a94:	01040074 	movhi	r4,4097
10000a98:	21089b04 	addi	r4,r4,8812
10000a9c:	00025b80 	call	100025b8 <printf>

	IO_write(HPI_ADDR,0x0508);
10000aa0:	01414204 	movi	r5,1288
10000aa4:	01000084 	movi	r4,2
10000aa8:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000aac:	0009883a 	mov	r4,zero
10000ab0:	00003640 	call	10000364 <IO_read>
10000ab4:	e0bff50d 	sth	r2,-44(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10000ab8:	e0bff50b 	ldhu	r2,-44(fp)
10000abc:	100b883a 	mov	r5,r2
10000ac0:	01040074 	movhi	r4,4097
10000ac4:	2108a604 	addi	r4,r4,8856
10000ac8:	00025b80 	call	100025b8 <printf>
	while (usb_ctl_val != 0x03)
10000acc:	00000206 	br	10000ad8 <main+0x70c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000ad0:	00022d40 	call	100022d4 <UsbGetRetryCnt>
10000ad4:	e0bff50d 	sth	r2,-44(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000ad8:	e0bff50b 	ldhu	r2,-44(fp)
10000adc:	108000d8 	cmpnei	r2,r2,3
10000ae0:	103ffb1e 	bne	r2,zero,10000ad0 <__alt_data_end+0xf8000ad0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000ae4:	01040074 	movhi	r4,4097
10000ae8:	2108b204 	addi	r4,r4,8904
10000aec:	00026b40 	call	100026b4 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000af0:	01415b04 	movi	r5,1388
10000af4:	01000084 	movi	r4,2
10000af8:	00002f40 	call	100002f4 <IO_write>
	code = IO_read(HPI_DATA);
10000afc:	0009883a 	mov	r4,zero
10000b00:	00003640 	call	10000364 <IO_read>
10000b04:	e0bffc8d 	sth	r2,-14(fp)
	code = code & 0x003;
10000b08:	e0bffc8b 	ldhu	r2,-14(fp)
10000b0c:	108000cc 	andi	r2,r2,3
10000b10:	e0bffc8d 	sth	r2,-14(fp)
	printf("\ncode = %x\n", code);
10000b14:	e0bffc8b 	ldhu	r2,-14(fp)
10000b18:	100b883a 	mov	r5,r2
10000b1c:	01040074 	movhi	r4,4097
10000b20:	2108c504 	addi	r4,r4,8980
10000b24:	00025b80 	call	100025b8 <printf>

	if (code == 0x01)
10000b28:	e0bffc8b 	ldhu	r2,-14(fp)
10000b2c:	10800058 	cmpnei	r2,r2,1
10000b30:	1000041e 	bne	r2,zero,10000b44 <main+0x778>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000b34:	01040074 	movhi	r4,4097
10000b38:	2108c804 	addi	r4,r4,8992
10000b3c:	00026b40 	call	100026b4 <puts>
10000b40:	00000306 	br	10000b50 <main+0x784>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000b44:	01040074 	movhi	r4,4097
10000b48:	2108d704 	addi	r4,r4,9052
10000b4c:	00026b40 	call	100026b4 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000b50:	01415d84 	movi	r5,1398
10000b54:	01000084 	movi	r4,2
10000b58:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x073F);
10000b5c:	0141cfc4 	movi	r5,1855
10000b60:	0009883a 	mov	r4,zero
10000b64:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x8105);
10000b68:	01604154 	movui	r5,33029
10000b6c:	0009883a 	mov	r4,zero
10000b70:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);
10000b74:	014000c4 	movi	r5,3
10000b78:	0009883a 	mov	r4,zero
10000b7c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
10000b80:	01400204 	movi	r5,8
10000b84:	0009883a 	mov	r4,zero
10000b88:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10000b8c:	016b0294 	movui	r5,44042
10000b90:	0009883a 	mov	r4,zero
10000b94:	00002f40 	call	100002f4 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000b98:	01415d84 	movi	r5,1398
10000b9c:	01006c04 	movi	r4,432
10000ba0:	00012600 	call	10001260 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000ba4:	01415f04 	movi	r5,1404
10000ba8:	01000084 	movi	r4,2
10000bac:	00002f40 	call	100002f4 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000bb0:	0009883a 	mov	r4,zero
10000bb4:	00003640 	call	10000364 <IO_read>
10000bb8:	e0bffd05 	stb	r2,-12(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000bbc:	e0bffd03 	ldbu	r2,-12(fp)
10000bc0:	100b883a 	mov	r5,r2
10000bc4:	01040074 	movhi	r4,4097
10000bc8:	2108e004 	addi	r4,r4,9088
10000bcc:	00025b80 	call	100025b8 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000bd0:	0001bc80 	call	10001bc8 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bd4:	00000306 	br	10000be4 <main+0x818>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000bd8:	0001bc80 	call	10001bc8 <UsbSetConfig>
		usleep(10*1000);
10000bdc:	0109c404 	movi	r4,10000
10000be0:	00101380 	call	10010138 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000be4:	010000c4 	movi	r4,3
10000be8:	00003640 	call	10000364 <IO_read>
10000bec:	10bfffcc 	andi	r2,r2,65535
10000bf0:	1080040c 	andi	r2,r2,16
10000bf4:	103ff826 	beq	r2,zero,10000bd8 <__alt_data_end+0xf8000bd8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000bf8:	00022500 	call	10002250 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000bfc:	01414184 	movi	r5,1286
10000c00:	01000084 	movi	r4,2
10000c04:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000c08:	0009883a 	mov	r4,zero
10000c0c:	00003640 	call	10000364 <IO_read>
10000c10:	10bfffcc 	andi	r2,r2,65535
10000c14:	100b883a 	mov	r5,r2
10000c18:	01040074 	movhi	r4,4097
10000c1c:	2108ea04 	addi	r4,r4,9128
10000c20:	00025b80 	call	100025b8 <printf>

	IO_write(HPI_ADDR,0x0508);
10000c24:	01414204 	movi	r5,1288
10000c28:	01000084 	movi	r4,2
10000c2c:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000c30:	0009883a 	mov	r4,zero
10000c34:	00003640 	call	10000364 <IO_read>
10000c38:	e0bff50d 	sth	r2,-44(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000c3c:	e0bff50b 	ldhu	r2,-44(fp)
10000c40:	100b883a 	mov	r5,r2
10000c44:	01040074 	movhi	r4,4097
10000c48:	2108f504 	addi	r4,r4,9172
10000c4c:	00025b80 	call	100025b8 <printf>
	while (usb_ctl_val != 0x03)
10000c50:	00000206 	br	10000c5c <main+0x890>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000c54:	00022d40 	call	100022d4 <UsbGetRetryCnt>
10000c58:	e0bff50d 	sth	r2,-44(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000c5c:	e0bff50b 	ldhu	r2,-44(fp)
10000c60:	108000d8 	cmpnei	r2,r2,3
10000c64:	103ffb1e 	bne	r2,zero,10000c54 <__alt_data_end+0xf8000c54>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000c68:	01040074 	movhi	r4,4097
10000c6c:	21090104 	addi	r4,r4,9220
10000c70:	00026b40 	call	100026b4 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000c74:	0001cc80 	call	10001cc8 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c78:	00000306 	br	10000c88 <main+0x8bc>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000c7c:	0001cc80 	call	10001cc8 <UsbClassRequest>
		usleep(10*1000);
10000c80:	0109c404 	movi	r4,10000
10000c84:	00101380 	call	10010138 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c88:	010000c4 	movi	r4,3
10000c8c:	00003640 	call	10000364 <IO_read>
10000c90:	10bfffcc 	andi	r2,r2,65535
10000c94:	1080040c 	andi	r2,r2,16
10000c98:	103ff826 	beq	r2,zero,10000c7c <__alt_data_end+0xf8000c7c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000c9c:	00022500 	call	10002250 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000ca0:	01414184 	movi	r5,1286
10000ca4:	01000084 	movi	r4,2
10000ca8:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000cac:	0009883a 	mov	r4,zero
10000cb0:	00003640 	call	10000364 <IO_read>
10000cb4:	10bfffcc 	andi	r2,r2,65535
10000cb8:	100b883a 	mov	r5,r2
10000cbc:	01040074 	movhi	r4,4097
10000cc0:	21091304 	addi	r4,r4,9292
10000cc4:	00025b80 	call	100025b8 <printf>

	IO_write(HPI_ADDR,0x0508);
10000cc8:	01414204 	movi	r5,1288
10000ccc:	01000084 	movi	r4,2
10000cd0:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000cd4:	0009883a 	mov	r4,zero
10000cd8:	00003640 	call	10000364 <IO_read>
10000cdc:	e0bff50d 	sth	r2,-44(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000ce0:	e0bff50b 	ldhu	r2,-44(fp)
10000ce4:	100b883a 	mov	r5,r2
10000ce8:	01040074 	movhi	r4,4097
10000cec:	21091e04 	addi	r4,r4,9336
10000cf0:	00025b80 	call	100025b8 <printf>
	while (usb_ctl_val != 0x03)
10000cf4:	00000206 	br	10000d00 <main+0x934>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000cf8:	00022d40 	call	100022d4 <UsbGetRetryCnt>
10000cfc:	e0bff50d 	sth	r2,-44(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000d00:	e0bff50b 	ldhu	r2,-44(fp)
10000d04:	108000d8 	cmpnei	r2,r2,3
10000d08:	103ffb1e 	bne	r2,zero,10000cf8 <__alt_data_end+0xf8000cf8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000d0c:	01040074 	movhi	r4,4097
10000d10:	21092a04 	addi	r4,r4,9384
10000d14:	00026b40 	call	100026b4 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10000d18:	0001dc80 	call	10001dc8 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d1c:	00000306 	br	10000d2c <main+0x960>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10000d20:	0001dc80 	call	10001dc8 <UsbGetHidDesc>
		usleep(10*1000);
10000d24:	0109c404 	movi	r4,10000
10000d28:	00101380 	call	10010138 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d2c:	010000c4 	movi	r4,3
10000d30:	00003640 	call	10000364 <IO_read>
10000d34:	10bfffcc 	andi	r2,r2,65535
10000d38:	1080040c 	andi	r2,r2,16
10000d3c:	103ff826 	beq	r2,zero,10000d20 <__alt_data_end+0xf8000d20>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000d40:	00022500 	call	10002250 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000d44:	01414184 	movi	r5,1286
10000d48:	01000084 	movi	r4,2
10000d4c:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d50:	0009883a 	mov	r4,zero
10000d54:	00003640 	call	10000364 <IO_read>
10000d58:	10bfffcc 	andi	r2,r2,65535
10000d5c:	100b883a 	mov	r5,r2
10000d60:	01040074 	movhi	r4,4097
10000d64:	21091304 	addi	r4,r4,9292
10000d68:	00025b80 	call	100025b8 <printf>

	IO_write(HPI_ADDR,0x0508);
10000d6c:	01414204 	movi	r5,1288
10000d70:	01000084 	movi	r4,2
10000d74:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000d78:	0009883a 	mov	r4,zero
10000d7c:	00003640 	call	10000364 <IO_read>
10000d80:	e0bff50d 	sth	r2,-44(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000d84:	e0bff50b 	ldhu	r2,-44(fp)
10000d88:	100b883a 	mov	r5,r2
10000d8c:	01040074 	movhi	r4,4097
10000d90:	21091e04 	addi	r4,r4,9336
10000d94:	00025b80 	call	100025b8 <printf>
	while (usb_ctl_val != 0x03)
10000d98:	00000206 	br	10000da4 <main+0x9d8>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d9c:	00022d40 	call	100022d4 <UsbGetRetryCnt>
10000da0:	e0bff50d 	sth	r2,-44(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000da4:	e0bff50b 	ldhu	r2,-44(fp)
10000da8:	108000d8 	cmpnei	r2,r2,3
10000dac:	103ffb1e 	bne	r2,zero,10000d9c <__alt_data_end+0xf8000d9c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10000db0:	01040074 	movhi	r4,4097
10000db4:	21093c04 	addi	r4,r4,9456
10000db8:	00026b40 	call	100026b4 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10000dbc:	0001f100 	call	10001f10 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000dc0:	00000306 	br	10000dd0 <main+0xa04>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10000dc4:	0001f100 	call	10001f10 <UsbGetReportDesc>
		usleep(10*1000);
10000dc8:	0109c404 	movi	r4,10000
10000dcc:	00101380 	call	10010138 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000dd0:	010000c4 	movi	r4,3
10000dd4:	00003640 	call	10000364 <IO_read>
10000dd8:	10bfffcc 	andi	r2,r2,65535
10000ddc:	1080040c 	andi	r2,r2,16
10000de0:	103ff826 	beq	r2,zero,10000dc4 <__alt_data_end+0xf8000dc4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000de4:	00022500 	call	10002250 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000de8:	01414184 	movi	r5,1286
10000dec:	01000084 	movi	r4,2
10000df0:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000df4:	0009883a 	mov	r4,zero
10000df8:	00003640 	call	10000364 <IO_read>
10000dfc:	10bfffcc 	andi	r2,r2,65535
10000e00:	100b883a 	mov	r5,r2
10000e04:	01040074 	movhi	r4,4097
10000e08:	21095004 	addi	r4,r4,9536
10000e0c:	00025b80 	call	100025b8 <printf>

	IO_write(HPI_ADDR,0x0508);
10000e10:	01414204 	movi	r5,1288
10000e14:	01000084 	movi	r4,2
10000e18:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000e1c:	0009883a 	mov	r4,zero
10000e20:	00003640 	call	10000364 <IO_read>
10000e24:	e0bff50d 	sth	r2,-44(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10000e28:	e0bff50b 	ldhu	r2,-44(fp)
10000e2c:	100b883a 	mov	r5,r2
10000e30:	01040074 	movhi	r4,4097
10000e34:	21095c04 	addi	r4,r4,9584
10000e38:	00025b80 	call	100025b8 <printf>
	while (usb_ctl_val != 0x03)
10000e3c:	00000206 	br	10000e48 <main+0xa7c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000e40:	00022d40 	call	100022d4 <UsbGetRetryCnt>
10000e44:	e0bff50d 	sth	r2,-44(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000e48:	e0bff50b 	ldhu	r2,-44(fp)
10000e4c:	108000d8 	cmpnei	r2,r2,3
10000e50:	103ffb1e 	bne	r2,zero,10000e40 <__alt_data_end+0xf8000e40>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10000e54:	01040074 	movhi	r4,4097
10000e58:	21096804 	addi	r4,r4,9632
10000e5c:	00026b40 	call	100026b4 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10000e60:	0109c404 	movi	r4,10000
10000e64:	00101380 	call	10010138 <usleep>
	int counter = 0;
10000e68:	e03ff915 	stw	zero,-28(fp)
	while(1)
	{
		//-----------------------------------generate random number------------------------------------------------//
		counter = (counter + 1) % 4096;
10000e6c:	e0bff917 	ldw	r2,-28(fp)
10000e70:	10c00044 	addi	r3,r2,1
10000e74:	00a00034 	movhi	r2,32768
10000e78:	1083ffc4 	addi	r2,r2,4095
10000e7c:	1884703a 	and	r2,r3,r2
10000e80:	1000040e 	bge	r2,zero,10000e94 <main+0xac8>
10000e84:	10bfffc4 	addi	r2,r2,-1
10000e88:	00fc0004 	movi	r3,-4096
10000e8c:	10c4b03a 	or	r2,r2,r3
10000e90:	10800044 	addi	r2,r2,1
10000e94:	e0bff915 	stw	r2,-28(fp)
		printf("\nGenerate random number:");
10000e98:	01040074 	movhi	r4,4097
10000e9c:	21097c04 	addi	r4,r4,9712
10000ea0:	00025b80 	call	100025b8 <printf>

		volatile unsigned int* random_num = (unsigned int*)0x20;
10000ea4:	00800804 	movi	r2,32
10000ea8:	e0bffe15 	stw	r2,-8(fp)
		srand((int)time(0) + counter);
10000eac:	0009883a 	mov	r4,zero
10000eb0:	00027dc0 	call	100027dc <time>
10000eb4:	1007883a 	mov	r3,r2
10000eb8:	e0bff917 	ldw	r2,-28(fp)
10000ebc:	1885883a 	add	r2,r3,r2
10000ec0:	1009883a 	mov	r4,r2
10000ec4:	00026c80 	call	100026c8 <srand>
		unsigned int a = rand() % 280 + 100;
10000ec8:	00026e00 	call	100026e0 <rand>
10000ecc:	01404604 	movi	r5,280
10000ed0:	1009883a 	mov	r4,r2
10000ed4:	00024580 	call	10002458 <__modsi3>
10000ed8:	10801904 	addi	r2,r2,100
10000edc:	e0bfff15 	stw	r2,-4(fp)
		*random_num = a;
10000ee0:	e0bffe17 	ldw	r2,-8(fp)
10000ee4:	e0ffff17 	ldw	r3,-4(fp)
10000ee8:	10c00015 	stw	r3,0(r2)

		printf("\nNumber 1 is: %u", (unsigned int)a);
10000eec:	e17fff17 	ldw	r5,-4(fp)
10000ef0:	01040074 	movhi	r4,4097
10000ef4:	21098304 	addi	r4,r4,9740
10000ef8:	00025b80 	call	100025b8 <printf>

		//-----------------------------------random number finish------------------------------------------------//

		toggle++;
10000efc:	e0bff583 	ldbu	r2,-42(fp)
10000f00:	10800044 	addi	r2,r2,1
10000f04:	e0bff585 	stb	r2,-42(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10000f08:	01414004 	movi	r5,1280
10000f0c:	01000084 	movi	r4,2
10000f10:	00002f40 	call	100002f4 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10000f14:	01414704 	movi	r5,1308
10000f18:	0009883a 	mov	r4,zero
10000f1c:	00002f40 	call	100002f4 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000f20:	e0bffd03 	ldbu	r2,-12(fp)
10000f24:	108003cc 	andi	r2,r2,15
10000f28:	100b883a 	mov	r5,r2
10000f2c:	0009883a 	mov	r4,zero
10000f30:	00002f40 	call	100002f4 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000f34:	0140a444 	movi	r5,657
10000f38:	0009883a 	mov	r4,zero
10000f3c:	00002f40 	call	100002f4 <IO_write>
		if(toggle%2)
10000f40:	e0bff583 	ldbu	r2,-42(fp)
10000f44:	1080004c 	andi	r2,r2,1
10000f48:	10803fcc 	andi	r2,r2,255
10000f4c:	10000426 	beq	r2,zero,10000f60 <main+0xb94>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10000f50:	01400044 	movi	r5,1
10000f54:	0009883a 	mov	r4,zero
10000f58:	00002f40 	call	100002f4 <IO_write>
10000f5c:	00000306 	br	10000f6c <main+0xba0>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10000f60:	01401044 	movi	r5,65
10000f64:	0009883a 	mov	r4,zero
10000f68:	00002f40 	call	100002f4 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10000f6c:	014004c4 	movi	r5,19
10000f70:	0009883a 	mov	r4,zero
10000f74:	00002f40 	call	100002f4 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
10000f78:	000b883a 	mov	r5,zero
10000f7c:	0009883a 	mov	r4,zero
10000f80:	00002f40 	call	100002f4 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000f84:	01414004 	movi	r5,1280
10000f88:	01006c04 	movi	r4,432
10000f8c:	00012600 	call	10001260 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000f90:	00002406 	br	10001024 <main+0xc58>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10000f94:	01414004 	movi	r5,1280
10000f98:	01000084 	movi	r4,2
10000f9c:	00002f40 	call	100002f4 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
10000fa0:	01414704 	movi	r5,1308
10000fa4:	0009883a 	mov	r4,zero
10000fa8:	00002f40 	call	100002f4 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000fac:	e0bffd03 	ldbu	r2,-12(fp)
10000fb0:	108003cc 	andi	r2,r2,15
10000fb4:	100b883a 	mov	r5,r2
10000fb8:	0009883a 	mov	r4,zero
10000fbc:	00002f40 	call	100002f4 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000fc0:	0140a444 	movi	r5,657
10000fc4:	0009883a 	mov	r4,zero
10000fc8:	00002f40 	call	100002f4 <IO_write>
			if(toggle%2)
10000fcc:	e0bff583 	ldbu	r2,-42(fp)
10000fd0:	1080004c 	andi	r2,r2,1
10000fd4:	10803fcc 	andi	r2,r2,255
10000fd8:	10000426 	beq	r2,zero,10000fec <main+0xc20>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10000fdc:	01400044 	movi	r5,1
10000fe0:	0009883a 	mov	r4,zero
10000fe4:	00002f40 	call	100002f4 <IO_write>
10000fe8:	00000306 	br	10000ff8 <main+0xc2c>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10000fec:	01401044 	movi	r5,65
10000ff0:	0009883a 	mov	r4,zero
10000ff4:	00002f40 	call	100002f4 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10000ff8:	014004c4 	movi	r5,19
10000ffc:	0009883a 	mov	r4,zero
10001000:	00002f40 	call	100002f4 <IO_write>
			IO_write(HPI_DATA,0x0000);//
10001004:	000b883a 	mov	r5,zero
10001008:	0009883a 	mov	r4,zero
1000100c:	00002f40 	call	100002f4 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001010:	01414004 	movi	r5,1280
10001014:	01006c04 	movi	r4,432
10001018:	00012600 	call	10001260 <UsbWrite>
			usleep(10*1000);
1000101c:	0109c404 	movi	r4,10000
10001020:	00101380 	call	10010138 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001024:	010000c4 	movi	r4,3
10001028:	00003640 	call	10000364 <IO_read>
1000102c:	10bfffcc 	andi	r2,r2,65535
10001030:	1080040c 	andi	r2,r2,16
10001034:	103fd726 	beq	r2,zero,10000f94 <__alt_data_end+0xf8000f94>
			IO_write(HPI_DATA,0x0000);//
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
10001038:	00022500 	call	10002250 <UsbWaitTDListDone>
1000103c:	e0bff50d 	sth	r2,-44(fp)

		// The first two keycodes are stored in 0x051E. Other keycodes are in 
		// subsequent addresses.
		keycode = UsbRead(0x051e);
10001040:	01014784 	movi	r4,1310
10001044:	00012b80 	call	100012b8 <UsbRead>
10001048:	10bfffcc 	andi	r2,r2,65535
1000104c:	e0bffb15 	stw	r2,-20(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
10001050:	e17ffb17 	ldw	r5,-20(fp)
10001054:	01040074 	movhi	r4,4097
10001058:	21098804 	addi	r4,r4,9760
1000105c:	00025b80 	call	100025b8 <printf>
		// We only need the first keycode, which is at the lower byte of keycode.
		// Send the keycode to hardware via PIO.
		*keycode_base = keycode & 0xff; 
10001060:	00802804 	movi	r2,160
10001064:	e0fffb17 	ldw	r3,-20(fp)
10001068:	10c00005 	stb	r3,0(r2)

		if((keycode&0xff)==0x2c){
1000106c:	e0bffb17 	ldw	r2,-20(fp)
10001070:	10803fcc 	andi	r2,r2,255
10001074:	10800b18 	cmpnei	r2,r2,44
10001078:	1000041e 	bne	r2,zero,1000108c <main+0xcc0>
			space_counter++;
1000107c:	e0bff817 	ldw	r2,-32(fp)
10001080:	10800044 	addi	r2,r2,1
10001084:	e0bff815 	stw	r2,-32(fp)
10001088:	00000106 	br	10001090 <main+0xcc4>
//			printf(space_counter);
		}else{
			space_counter=0;
1000108c:	e03ff815 	stw	zero,-32(fp)
		}

		if(space_counter > 10){
10001090:	e0bff817 	ldw	r2,-32(fp)
10001094:	108002d0 	cmplti	r2,r2,11
10001098:	1000081e 	bne	r2,zero,100010bc <main+0xcf0>
			if ((keycode & 0xff) == 0x2c){
1000109c:	e0bffb17 	ldw	r2,-20(fp)
100010a0:	10803fcc 	andi	r2,r2,255
100010a4:	10800b18 	cmpnei	r2,r2,44
100010a8:	10001c1e 	bne	r2,zero,1000111c <main+0xd50>

				*(volatile char*)0x30 = 0xff;
100010ac:	00800c04 	movi	r2,48
100010b0:	00ffffc4 	movi	r3,-1
100010b4:	10c00005 	stb	r3,0(r2)
100010b8:	00001806 	br	1000111c <main+0xd50>
			}
		}else{
			if ((keycode & 0xff) == 0x2c) {
100010bc:	e0bffb17 	ldw	r2,-20(fp)
100010c0:	10803fcc 	andi	r2,r2,255
100010c4:	10800b18 	cmpnei	r2,r2,44
100010c8:	1000071e 	bne	r2,zero,100010e8 <main+0xd1c>
				if (!space_pressed) {
100010cc:	e0bff717 	ldw	r2,-36(fp)
100010d0:	1000061e 	bne	r2,zero,100010ec <main+0xd20>
					space_trigger = 1;
100010d4:	00800044 	movi	r2,1
100010d8:	e0bff615 	stw	r2,-40(fp)
					space_pressed = 1;
100010dc:	00800044 	movi	r2,1
100010e0:	e0bff715 	stw	r2,-36(fp)
100010e4:	00000106 	br	100010ec <main+0xd20>
				}
			} else {
				space_pressed = 0;
100010e8:	e03ff715 	stw	zero,-36(fp)
			}

			if (space_trigger) {
100010ec:	e0bff617 	ldw	r2,-40(fp)
100010f0:	10000826 	beq	r2,zero,10001114 <main+0xd48>
				printf("Space key pressed!\n");
100010f4:	01040074 	movhi	r4,4097
100010f8:	21099104 	addi	r4,r4,9796
100010fc:	00026b40 	call	100026b4 <puts>
				*(volatile char*)0x30 = 0xff;
10001100:	00800c04 	movi	r2,48
10001104:	00ffffc4 	movi	r3,-1
10001108:	10c00005 	stb	r3,0(r2)
				space_trigger = 0;
1000110c:	e03ff615 	stw	zero,-40(fp)
10001110:	00000206 	br	1000111c <main+0xd50>
			} else{
				*(volatile char*)0x30 = 0;
10001114:	00800c04 	movi	r2,48
10001118:	10000005 	stb	zero,0(r2)
//			*(volatile char*)0x20 = 0;
//		}



		usleep(200);//usleep(5000);
1000111c:	01003204 	movi	r4,200
10001120:	00101380 	call	10010138 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10001124:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001128:	10bfffcc 	andi	r2,r2,65535
1000112c:	1009883a 	mov	r4,r2
10001130:	00012b80 	call	100012b8 <UsbRead>
10001134:	e0bff50d 	sth	r2,-44(fp)

		if(!(usb_ctl_val & no_device))
10001138:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000113c:	e0fff50b 	ldhu	r3,-44(fp)
10001140:	1884703a 	and	r2,r3,r2
10001144:	10bfffcc 	andi	r2,r2,65535
10001148:	10003f1e 	bne	r2,zero,10001248 <main+0xe7c>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
1000114c:	e03ff5c5 	stb	zero,-41(fp)
10001150:	00000f06 	br	10001190 <main+0xdc4>
			{
				usleep(5*1000);
10001154:	0104e204 	movi	r4,5000
10001158:	00101380 	call	10010138 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
1000115c:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001160:	10bfffcc 	andi	r2,r2,65535
10001164:	1009883a 	mov	r4,r2
10001168:	00012b80 	call	100012b8 <UsbRead>
1000116c:	e0bff50d 	sth	r2,-44(fp)
				if(usb_ctl_val & no_device) break;
10001170:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001174:	e0fff50b 	ldhu	r3,-44(fp)
10001178:	1884703a 	and	r2,r3,r2
1000117c:	10bfffcc 	andi	r2,r2,65535
10001180:	1000071e 	bne	r2,zero,100011a0 <main+0xdd4>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10001184:	e0bff5c3 	ldbu	r2,-41(fp)
10001188:	10800044 	addi	r2,r2,1
1000118c:	e0bff5c5 	stb	r2,-41(fp)
10001190:	e0bff5c3 	ldbu	r2,-41(fp)
10001194:	108001f0 	cmpltui	r2,r2,7
10001198:	103fee1e 	bne	r2,zero,10001154 <__alt_data_end+0xf8001154>
1000119c:	00000106 	br	100011a4 <main+0xdd8>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
100011a0:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
100011a4:	d0a6cb8b 	ldhu	r2,-25810(gp)
100011a8:	e0fff50b 	ldhu	r3,-44(fp)
100011ac:	1884703a 	and	r2,r3,r2
100011b0:	10bfffcc 	andi	r2,r2,65535
100011b4:	1000241e 	bne	r2,zero,10001248 <main+0xe7c>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
100011b8:	01040074 	movhi	r4,4097
100011bc:	21099604 	addi	r4,r4,9816
100011c0:	00026b40 	call	100026b4 <puts>
				printf("[INFO]: please insert again!!! \n");
100011c4:	01040074 	movhi	r4,4097
100011c8:	2109a104 	addi	r4,r4,9860
100011cc:	00026b40 	call	100026b4 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
100011d0:	00001d06 	br	10001248 <main+0xe7c>
		{

			usb_ctl_val = UsbRead(ctl_reg);
100011d4:	d0a6cb0b 	ldhu	r2,-25812(gp)
100011d8:	10bfffcc 	andi	r2,r2,65535
100011dc:	1009883a 	mov	r4,r2
100011e0:	00012b80 	call	100012b8 <UsbRead>
100011e4:	e0bff50d 	sth	r2,-44(fp)
			usleep(5*1000);
100011e8:	0104e204 	movi	r4,5000
100011ec:	00101380 	call	10010138 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100011f0:	d0a6cb0b 	ldhu	r2,-25812(gp)
100011f4:	10bfffcc 	andi	r2,r2,65535
100011f8:	1009883a 	mov	r4,r2
100011fc:	00012b80 	call	100012b8 <UsbRead>
10001200:	e0bff50d 	sth	r2,-44(fp)
			usleep(5*1000);
10001204:	0104e204 	movi	r4,5000
10001208:	00101380 	call	10010138 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
1000120c:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001210:	10bfffcc 	andi	r2,r2,65535
10001214:	1009883a 	mov	r4,r2
10001218:	00012b80 	call	100012b8 <UsbRead>
1000121c:	e0bff50d 	sth	r2,-44(fp)
			usleep(5*1000);
10001220:	0104e204 	movi	r4,5000
10001224:	00101380 	call	10010138 <usleep>

			if(usb_ctl_val & no_device)
10001228:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000122c:	e0fff50b 	ldhu	r3,-44(fp)
10001230:	1884703a 	and	r2,r3,r2
10001234:	10bfffcc 	andi	r2,r2,65535
10001238:	10000126 	beq	r2,zero,10001240 <main+0xe74>
				goto USB_HOT_PLUG;
1000123c:	003c7106 	br	10000404 <__alt_data_end+0xf8000404>

			usleep(200);
10001240:	01003204 	movi	r4,200
10001244:	00101380 	call	10010138 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
10001248:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000124c:	e0fff50b 	ldhu	r3,-44(fp)
10001250:	1884703a 	and	r2,r3,r2
10001254:	10bfffcc 	andi	r2,r2,65535
10001258:	103fde26 	beq	r2,zero,100011d4 <__alt_data_end+0xf80011d4>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
1000125c:	003f0306 	br	10000e6c <__alt_data_end+0xf8000e6c>

10001260 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
10001260:	defffc04 	addi	sp,sp,-16
10001264:	dfc00315 	stw	ra,12(sp)
10001268:	df000215 	stw	fp,8(sp)
1000126c:	df000204 	addi	fp,sp,8
10001270:	2007883a 	mov	r3,r4
10001274:	2805883a 	mov	r2,r5
10001278:	e0fffe0d 	sth	r3,-8(fp)
1000127c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR,Address);
10001280:	e0bffe0b 	ldhu	r2,-8(fp)
10001284:	100b883a 	mov	r5,r2
10001288:	01000084 	movi	r4,2
1000128c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,Data);
10001290:	e0bfff0b 	ldhu	r2,-4(fp)
10001294:	100b883a 	mov	r5,r2
10001298:	0009883a 	mov	r4,zero
1000129c:	00002f40 	call	100002f4 <IO_write>
}
100012a0:	0001883a 	nop
100012a4:	e037883a 	mov	sp,fp
100012a8:	dfc00117 	ldw	ra,4(sp)
100012ac:	df000017 	ldw	fp,0(sp)
100012b0:	dec00204 	addi	sp,sp,8
100012b4:	f800283a 	ret

100012b8 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
100012b8:	defffd04 	addi	sp,sp,-12
100012bc:	dfc00215 	stw	ra,8(sp)
100012c0:	df000115 	stw	fp,4(sp)
100012c4:	df000104 	addi	fp,sp,4
100012c8:	2005883a 	mov	r2,r4
100012cc:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR,Address);
100012d0:	e0bfff0b 	ldhu	r2,-4(fp)
100012d4:	100b883a 	mov	r5,r2
100012d8:	01000084 	movi	r4,2
100012dc:	00002f40 	call	100002f4 <IO_write>
	return IO_read(HPI_DATA);
100012e0:	0009883a 	mov	r4,zero
100012e4:	00003640 	call	10000364 <IO_read>
}
100012e8:	e037883a 	mov	sp,fp
100012ec:	dfc00117 	ldw	ra,4(sp)
100012f0:	df000017 	ldw	fp,0(sp)
100012f4:	dec00204 	addi	sp,sp,8
100012f8:	f800283a 	ret

100012fc <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
100012fc:	defffe04 	addi	sp,sp,-8
10001300:	dfc00115 	stw	ra,4(sp)
10001304:	df000015 	stw	fp,0(sp)
10001308:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
1000130c:	017e9414 	movui	r5,64080
10001310:	01000044 	movi	r4,1
10001314:	00002f40 	call	100002f4 <IO_write>
	usleep(100000);
10001318:	010000b4 	movhi	r4,2
1000131c:	2121a804 	addi	r4,r4,-31072
10001320:	00101380 	call	10010138 <usleep>
	printf("[USB INIT]:reset finished!\n");
10001324:	01040074 	movhi	r4,4097
10001328:	2109a904 	addi	r4,r4,9892
1000132c:	00026b40 	call	100026b4 <puts>

	usleep(500000);
10001330:	01000234 	movhi	r4,8
10001334:	21284804 	addi	r4,r4,-24288
10001338:	00101380 	call	10010138 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
1000133c:	01040074 	movhi	r4,4097
10001340:	2109b004 	addi	r4,r4,9920
10001344:	00026b40 	call	100026b4 <puts>
	IO_read(HPI_MAILBOX);
10001348:	01000044 	movi	r4,1
1000134c:	00003640 	call	10000364 <IO_read>
	IO_read(HPI_STATUS);
10001350:	010000c4 	movi	r4,3
10001354:	00003640 	call	10000364 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10001358:	01005104 	movi	r4,324
1000135c:	00012b80 	call	100012b8 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10001360:	000b883a 	mov	r5,zero
10001364:	01005104 	movi	r4,324
10001368:	00012600 	call	10001260 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
1000136c:	01005204 	movi	r4,328
10001370:	00012b80 	call	100012b8 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10001374:	000b883a 	mov	r5,zero
10001378:	01005204 	movi	r4,328
1000137c:	00012600 	call	10001260 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10001380:	017fffd4 	movui	r5,65535
10001384:	01302414 	movui	r4,49296
10001388:	00012600 	call	10001260 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
1000138c:	017fffd4 	movui	r5,65535
10001390:	01302c14 	movui	r4,49328
10001394:	00012600 	call	10001260 <UsbWrite>
}
10001398:	0001883a 	nop
1000139c:	e037883a 	mov	sp,fp
100013a0:	dfc00117 	ldw	ra,4(sp)
100013a4:	df000017 	ldw	fp,0(sp)
100013a8:	dec00204 	addi	sp,sp,8
100013ac:	f800283a 	ret

100013b0 <UsbSetAddress>:


void UsbSetAddress()
{
100013b0:	defffe04 	addi	sp,sp,-8
100013b4:	dfc00115 	stw	ra,4(sp)
100013b8:	df000015 	stw	fp,0(sp)
100013bc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100013c0:	01414004 	movi	r5,1280
100013c4:	01000084 	movi	r4,2
100013c8:	00002f40 	call	100002f4 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
100013cc:	01414304 	movi	r5,1292
100013d0:	0009883a 	mov	r4,zero
100013d4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100013d8:	01400204 	movi	r5,8
100013dc:	0009883a 	mov	r4,zero
100013e0:	00002f40 	call	100002f4 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
100013e4:	01403404 	movi	r5,208
100013e8:	0009883a 	mov	r4,zero
100013ec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
100013f0:	01400044 	movi	r5,1
100013f4:	0009883a 	mov	r4,zero
100013f8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100013fc:	014004c4 	movi	r5,19
10001400:	0009883a 	mov	r4,zero
10001404:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001408:	01414504 	movi	r5,1300
1000140c:	0009883a 	mov	r4,zero
10001410:	00002f40 	call	100002f4 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10001414:	01414004 	movi	r5,1280
10001418:	0009883a 	mov	r4,zero
1000141c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);
10001420:	01400084 	movi	r5,2
10001424:	0009883a 	mov	r4,zero
10001428:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000142c:	000b883a 	mov	r5,zero
10001430:	0009883a 	mov	r4,zero
10001434:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001438:	000b883a 	mov	r5,zero
1000143c:	0009883a 	mov	r4,zero
10001440:	00002f40 	call	100002f4 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10001444:	000b883a 	mov	r5,zero
10001448:	0009883a 	mov	r4,zero
1000144c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10001450:	000b883a 	mov	r5,zero
10001454:	0009883a 	mov	r4,zero
10001458:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0090);//
1000145c:	01402404 	movi	r5,144
10001460:	0009883a 	mov	r4,zero
10001464:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
10001468:	01401044 	movi	r5,65
1000146c:	0009883a 	mov	r4,zero
10001470:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001474:	014004c4 	movi	r5,19
10001478:	0009883a 	mov	r4,zero
1000147c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001480:	000b883a 	mov	r5,zero
10001484:	0009883a 	mov	r4,zero
10001488:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000148c:	01414004 	movi	r5,1280
10001490:	01006c04 	movi	r4,432
10001494:	00012600 	call	10001260 <UsbWrite>
}
10001498:	0001883a 	nop
1000149c:	e037883a 	mov	sp,fp
100014a0:	dfc00117 	ldw	ra,4(sp)
100014a4:	df000017 	ldw	fp,0(sp)
100014a8:	dec00204 	addi	sp,sp,8
100014ac:	f800283a 	ret

100014b0 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
100014b0:	defffe04 	addi	sp,sp,-8
100014b4:	dfc00115 	stw	ra,4(sp)
100014b8:	df000015 	stw	fp,0(sp)
100014bc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100014c0:	01414004 	movi	r5,1280
100014c4:	01000084 	movi	r4,2
100014c8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
100014cc:	01414304 	movi	r5,1292
100014d0:	0009883a 	mov	r4,zero
100014d4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100014d8:	01400204 	movi	r5,8
100014dc:	0009883a 	mov	r4,zero
100014e0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100014e4:	0140b404 	movi	r5,720
100014e8:	0009883a 	mov	r4,zero
100014ec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
100014f0:	01400044 	movi	r5,1
100014f4:	0009883a 	mov	r4,zero
100014f8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100014fc:	014004c4 	movi	r5,19
10001500:	0009883a 	mov	r4,zero
10001504:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001508:	01414504 	movi	r5,1300
1000150c:	0009883a 	mov	r4,zero
10001510:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001514:	0141a004 	movi	r5,1664
10001518:	0009883a 	mov	r4,zero
1000151c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
10001520:	01404004 	movi	r5,256
10001524:	0009883a 	mov	r4,zero
10001528:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000152c:	000b883a 	mov	r5,zero
10001530:	0009883a 	mov	r4,zero
10001534:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
10001538:	01400204 	movi	r5,8
1000153c:	0009883a 	mov	r4,zero
10001540:	00002f40 	call	100002f4 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10001544:	01414b04 	movi	r5,1324
10001548:	0009883a 	mov	r4,zero
1000154c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//
10001550:	01400204 	movi	r5,8
10001554:	0009883a 	mov	r4,zero
10001558:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//
1000155c:	0140a404 	movi	r5,656
10001560:	0009883a 	mov	r4,zero
10001564:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
10001568:	01401044 	movi	r5,65
1000156c:	0009883a 	mov	r4,zero
10001570:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001574:	014004c4 	movi	r5,19
10001578:	0009883a 	mov	r4,zero
1000157c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);
10001580:	01414804 	movi	r5,1312
10001584:	0009883a 	mov	r4,zero
10001588:	00002f40 	call	100002f4 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
1000158c:	000b883a 	mov	r5,zero
10001590:	0009883a 	mov	r4,zero
10001594:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001598:	000b883a 	mov	r5,zero
1000159c:	0009883a 	mov	r4,zero
100015a0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
100015a4:	01408404 	movi	r5,528
100015a8:	0009883a 	mov	r4,zero
100015ac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
100015b0:	01401044 	movi	r5,65
100015b4:	0009883a 	mov	r4,zero
100015b8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100015bc:	014004c4 	movi	r5,19
100015c0:	0009883a 	mov	r4,zero
100015c4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
100015c8:	000b883a 	mov	r5,zero
100015cc:	0009883a 	mov	r4,zero
100015d0:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100015d4:	01414004 	movi	r5,1280
100015d8:	01006c04 	movi	r4,432
100015dc:	00012600 	call	10001260 <UsbWrite>
}
100015e0:	0001883a 	nop
100015e4:	e037883a 	mov	sp,fp
100015e8:	dfc00117 	ldw	ra,4(sp)
100015ec:	df000017 	ldw	fp,0(sp)
100015f0:	dec00204 	addi	sp,sp,8
100015f4:	f800283a 	ret

100015f8 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
100015f8:	defffe04 	addi	sp,sp,-8
100015fc:	dfc00115 	stw	ra,4(sp)
10001600:	df000015 	stw	fp,0(sp)
10001604:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001608:	01414004 	movi	r5,1280
1000160c:	01000084 	movi	r4,2
10001610:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001614:	01414304 	movi	r5,1292
10001618:	0009883a 	mov	r4,zero
1000161c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001620:	01400204 	movi	r5,8
10001624:	0009883a 	mov	r4,zero
10001628:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
1000162c:	0140b404 	movi	r5,720
10001630:	0009883a 	mov	r4,zero
10001634:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001638:	01400044 	movi	r5,1
1000163c:	0009883a 	mov	r4,zero
10001640:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001644:	014004c4 	movi	r5,19
10001648:	0009883a 	mov	r4,zero
1000164c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001650:	01414504 	movi	r5,1300
10001654:	0009883a 	mov	r4,zero
10001658:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
1000165c:	0141a004 	movi	r5,1664
10001660:	0009883a 	mov	r4,zero
10001664:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
10001668:	01404004 	movi	r5,256
1000166c:	0009883a 	mov	r4,zero
10001670:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001674:	000b883a 	mov	r5,zero
10001678:	0009883a 	mov	r4,zero
1000167c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10001680:	01400484 	movi	r5,18
10001684:	0009883a 	mov	r4,zero
10001688:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
1000168c:	01415104 	movi	r5,1348
10001690:	0009883a 	mov	r4,zero
10001694:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001698:	01400204 	movi	r5,8
1000169c:	0009883a 	mov	r4,zero
100016a0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100016a4:	0140a404 	movi	r5,656
100016a8:	0009883a 	mov	r4,zero
100016ac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100016b0:	01401044 	movi	r5,65
100016b4:	0009883a 	mov	r4,zero
100016b8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100016bc:	014004c4 	movi	r5,19
100016c0:	0009883a 	mov	r4,zero
100016c4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100016c8:	01414804 	movi	r5,1312
100016cc:	0009883a 	mov	r4,zero
100016d0:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100016d4:	01415304 	movi	r5,1356
100016d8:	0009883a 	mov	r4,zero
100016dc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100016e0:	01400204 	movi	r5,8
100016e4:	0009883a 	mov	r4,zero
100016e8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100016ec:	0140a404 	movi	r5,656
100016f0:	0009883a 	mov	r4,zero
100016f4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
100016f8:	01400044 	movi	r5,1
100016fc:	0009883a 	mov	r4,zero
10001700:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001704:	014004c4 	movi	r5,19
10001708:	0009883a 	mov	r4,zero
1000170c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001710:	01414b04 	movi	r5,1324
10001714:	0009883a 	mov	r4,zero
10001718:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
1000171c:	01415504 	movi	r5,1364
10001720:	0009883a 	mov	r4,zero
10001724:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
10001728:	01400084 	movi	r5,2
1000172c:	0009883a 	mov	r4,zero
10001730:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001734:	0140a404 	movi	r5,656
10001738:	0009883a 	mov	r4,zero
1000173c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001740:	01401044 	movi	r5,65
10001744:	0009883a 	mov	r4,zero
10001748:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
1000174c:	014004c4 	movi	r5,19
10001750:	0009883a 	mov	r4,zero
10001754:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001758:	01414e04 	movi	r5,1336
1000175c:	0009883a 	mov	r4,zero
10001760:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10001764:	000b883a 	mov	r5,zero
10001768:	0009883a 	mov	r4,zero
1000176c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10001770:	000b883a 	mov	r5,zero
10001774:	0009883a 	mov	r4,zero
10001778:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
1000177c:	01408404 	movi	r5,528
10001780:	0009883a 	mov	r4,zero
10001784:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10001788:	01401044 	movi	r5,65
1000178c:	0009883a 	mov	r4,zero
10001790:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001794:	014004c4 	movi	r5,19
10001798:	0009883a 	mov	r4,zero
1000179c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
100017a0:	000b883a 	mov	r5,zero
100017a4:	0009883a 	mov	r4,zero
100017a8:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100017ac:	01414004 	movi	r5,1280
100017b0:	01006c04 	movi	r4,432
100017b4:	00012600 	call	10001260 <UsbWrite>
}
100017b8:	0001883a 	nop
100017bc:	e037883a 	mov	sp,fp
100017c0:	dfc00117 	ldw	ra,4(sp)
100017c4:	df000017 	ldw	fp,0(sp)
100017c8:	dec00204 	addi	sp,sp,8
100017cc:	f800283a 	ret

100017d0 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
100017d0:	defffe04 	addi	sp,sp,-8
100017d4:	dfc00115 	stw	ra,4(sp)
100017d8:	df000015 	stw	fp,0(sp)
100017dc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100017e0:	01414004 	movi	r5,1280
100017e4:	01000084 	movi	r4,2
100017e8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
100017ec:	01414304 	movi	r5,1292
100017f0:	0009883a 	mov	r4,zero
100017f4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100017f8:	01400204 	movi	r5,8
100017fc:	0009883a 	mov	r4,zero
10001800:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001804:	0140b404 	movi	r5,720
10001808:	0009883a 	mov	r4,zero
1000180c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001810:	01400044 	movi	r5,1
10001814:	0009883a 	mov	r4,zero
10001818:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000181c:	014004c4 	movi	r5,19
10001820:	0009883a 	mov	r4,zero
10001824:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001828:	01414504 	movi	r5,1300
1000182c:	0009883a 	mov	r4,zero
10001830:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001834:	0141a004 	movi	r5,1664
10001838:	0009883a 	mov	r4,zero
1000183c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10001840:	01408004 	movi	r5,512
10001844:	0009883a 	mov	r4,zero
10001848:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
1000184c:	000b883a 	mov	r5,zero
10001850:	0009883a 	mov	r4,zero
10001854:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10001858:	01400244 	movi	r5,9
1000185c:	0009883a 	mov	r4,zero
10001860:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001864:	01415104 	movi	r5,1348
10001868:	0009883a 	mov	r4,zero
1000186c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001870:	01400204 	movi	r5,8
10001874:	0009883a 	mov	r4,zero
10001878:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000187c:	0140a404 	movi	r5,656
10001880:	0009883a 	mov	r4,zero
10001884:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001888:	01401044 	movi	r5,65
1000188c:	0009883a 	mov	r4,zero
10001890:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001894:	014004c4 	movi	r5,19
10001898:	0009883a 	mov	r4,zero
1000189c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100018a0:	01414804 	movi	r5,1312
100018a4:	0009883a 	mov	r4,zero
100018a8:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100018ac:	01415304 	movi	r5,1356
100018b0:	0009883a 	mov	r4,zero
100018b4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
100018b8:	01400044 	movi	r5,1
100018bc:	0009883a 	mov	r4,zero
100018c0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100018c4:	0140a404 	movi	r5,656
100018c8:	0009883a 	mov	r4,zero
100018cc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100018d0:	01400044 	movi	r5,1
100018d4:	0009883a 	mov	r4,zero
100018d8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100018dc:	014004c4 	movi	r5,19
100018e0:	0009883a 	mov	r4,zero
100018e4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100018e8:	01414b04 	movi	r5,1324
100018ec:	0009883a 	mov	r4,zero
100018f0:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
100018f4:	000b883a 	mov	r5,zero
100018f8:	0009883a 	mov	r4,zero
100018fc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10001900:	000b883a 	mov	r5,zero
10001904:	0009883a 	mov	r4,zero
10001908:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
1000190c:	01408404 	movi	r5,528
10001910:	0009883a 	mov	r4,zero
10001914:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001918:	01401044 	movi	r5,65
1000191c:	0009883a 	mov	r4,zero
10001920:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001924:	014004c4 	movi	r5,19
10001928:	0009883a 	mov	r4,zero
1000192c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001930:	000b883a 	mov	r5,zero
10001934:	0009883a 	mov	r4,zero
10001938:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000193c:	01414004 	movi	r5,1280
10001940:	01006c04 	movi	r4,432
10001944:	00012600 	call	10001260 <UsbWrite>
}
10001948:	0001883a 	nop
1000194c:	e037883a 	mov	sp,fp
10001950:	dfc00117 	ldw	ra,4(sp)
10001954:	df000017 	ldw	fp,0(sp)
10001958:	dec00204 	addi	sp,sp,8
1000195c:	f800283a 	ret

10001960 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
10001960:	defffe04 	addi	sp,sp,-8
10001964:	dfc00115 	stw	ra,4(sp)
10001968:	df000015 	stw	fp,0(sp)
1000196c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001970:	01414004 	movi	r5,1280
10001974:	01000084 	movi	r4,2
10001978:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
1000197c:	01414304 	movi	r5,1292
10001980:	0009883a 	mov	r4,zero
10001984:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001988:	01400204 	movi	r5,8
1000198c:	0009883a 	mov	r4,zero
10001990:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001994:	0140b404 	movi	r5,720
10001998:	0009883a 	mov	r4,zero
1000199c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
100019a0:	01400044 	movi	r5,1
100019a4:	0009883a 	mov	r4,zero
100019a8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100019ac:	014004c4 	movi	r5,19
100019b0:	0009883a 	mov	r4,zero
100019b4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
100019b8:	01414504 	movi	r5,1300
100019bc:	0009883a 	mov	r4,zero
100019c0:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100019c4:	0141a004 	movi	r5,1664
100019c8:	0009883a 	mov	r4,zero
100019cc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
100019d0:	01408004 	movi	r5,512
100019d4:	0009883a 	mov	r4,zero
100019d8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100019dc:	000b883a 	mov	r5,zero
100019e0:	0009883a 	mov	r4,zero
100019e4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
100019e8:	01403fc4 	movi	r5,255
100019ec:	0009883a 	mov	r4,zero
100019f0:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
100019f4:	01415704 	movi	r5,1372
100019f8:	0009883a 	mov	r4,zero
100019fc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001a00:	01400204 	movi	r5,8
10001a04:	0009883a 	mov	r4,zero
10001a08:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001a0c:	0140a404 	movi	r5,656
10001a10:	0009883a 	mov	r4,zero
10001a14:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001a18:	01401044 	movi	r5,65
10001a1c:	0009883a 	mov	r4,zero
10001a20:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001a24:	014004c4 	movi	r5,19
10001a28:	0009883a 	mov	r4,zero
10001a2c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001a30:	01414804 	movi	r5,1312
10001a34:	0009883a 	mov	r4,zero
10001a38:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10001a3c:	01415904 	movi	r5,1380
10001a40:	0009883a 	mov	r4,zero
10001a44:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001a48:	01400204 	movi	r5,8
10001a4c:	0009883a 	mov	r4,zero
10001a50:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001a54:	0140a404 	movi	r5,656
10001a58:	0009883a 	mov	r4,zero
10001a5c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001a60:	01400044 	movi	r5,1
10001a64:	0009883a 	mov	r4,zero
10001a68:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001a6c:	014004c4 	movi	r5,19
10001a70:	0009883a 	mov	r4,zero
10001a74:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001a78:	01414b04 	movi	r5,1324
10001a7c:	0009883a 	mov	r4,zero
10001a80:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
10001a84:	01415b04 	movi	r5,1388
10001a88:	0009883a 	mov	r4,zero
10001a8c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001a90:	01400204 	movi	r5,8
10001a94:	0009883a 	mov	r4,zero
10001a98:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001a9c:	0140a404 	movi	r5,656
10001aa0:	0009883a 	mov	r4,zero
10001aa4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001aa8:	01401044 	movi	r5,65
10001aac:	0009883a 	mov	r4,zero
10001ab0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001ab4:	014004c4 	movi	r5,19
10001ab8:	0009883a 	mov	r4,zero
10001abc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001ac0:	01414e04 	movi	r5,1336
10001ac4:	0009883a 	mov	r4,zero
10001ac8:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
10001acc:	01415d04 	movi	r5,1396
10001ad0:	0009883a 	mov	r4,zero
10001ad4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10001ad8:	01400204 	movi	r5,8
10001adc:	0009883a 	mov	r4,zero
10001ae0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10001ae4:	0140a404 	movi	r5,656
10001ae8:	0009883a 	mov	r4,zero
10001aec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10001af0:	01400044 	movi	r5,1
10001af4:	0009883a 	mov	r4,zero
10001af8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001afc:	014004c4 	movi	r5,19
10001b00:	0009883a 	mov	r4,zero
10001b04:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10001b08:	01415104 	movi	r5,1348
10001b0c:	0009883a 	mov	r4,zero
10001b10:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10001b14:	01415f04 	movi	r5,1404
10001b18:	0009883a 	mov	r4,zero
10001b1c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10001b20:	01400084 	movi	r5,2
10001b24:	0009883a 	mov	r4,zero
10001b28:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001b2c:	0140a404 	movi	r5,656
10001b30:	0009883a 	mov	r4,zero
10001b34:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10001b38:	01401044 	movi	r5,65
10001b3c:	0009883a 	mov	r4,zero
10001b40:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001b44:	014004c4 	movi	r5,19
10001b48:	0009883a 	mov	r4,zero
10001b4c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10001b50:	01415404 	movi	r5,1360
10001b54:	0009883a 	mov	r4,zero
10001b58:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10001b5c:	000b883a 	mov	r5,zero
10001b60:	0009883a 	mov	r4,zero
10001b64:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10001b68:	000b883a 	mov	r5,zero
10001b6c:	0009883a 	mov	r4,zero
10001b70:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10001b74:	01408404 	movi	r5,528
10001b78:	0009883a 	mov	r4,zero
10001b7c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10001b80:	01401044 	movi	r5,65
10001b84:	0009883a 	mov	r4,zero
10001b88:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001b8c:	014004c4 	movi	r5,19
10001b90:	0009883a 	mov	r4,zero
10001b94:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10001b98:	000b883a 	mov	r5,zero
10001b9c:	0009883a 	mov	r4,zero
10001ba0:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001ba4:	01414004 	movi	r5,1280
10001ba8:	01006c04 	movi	r4,432
10001bac:	00012600 	call	10001260 <UsbWrite>
}
10001bb0:	0001883a 	nop
10001bb4:	e037883a 	mov	sp,fp
10001bb8:	dfc00117 	ldw	ra,4(sp)
10001bbc:	df000017 	ldw	fp,0(sp)
10001bc0:	dec00204 	addi	sp,sp,8
10001bc4:	f800283a 	ret

10001bc8 <UsbSetConfig>:

void UsbSetConfig()
{
10001bc8:	defffe04 	addi	sp,sp,-8
10001bcc:	dfc00115 	stw	ra,4(sp)
10001bd0:	df000015 	stw	fp,0(sp)
10001bd4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001bd8:	01414004 	movi	r5,1280
10001bdc:	01000084 	movi	r4,2
10001be0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001be4:	01414304 	movi	r5,1292
10001be8:	0009883a 	mov	r4,zero
10001bec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001bf0:	01400204 	movi	r5,8
10001bf4:	0009883a 	mov	r4,zero
10001bf8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001bfc:	0140b404 	movi	r5,720
10001c00:	0009883a 	mov	r4,zero
10001c04:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001c08:	01400044 	movi	r5,1
10001c0c:	0009883a 	mov	r4,zero
10001c10:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001c14:	014004c4 	movi	r5,19
10001c18:	0009883a 	mov	r4,zero
10001c1c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001c20:	01414504 	movi	r5,1300
10001c24:	0009883a 	mov	r4,zero
10001c28:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10001c2c:	01424004 	movi	r5,2304
10001c30:	0009883a 	mov	r4,zero
10001c34:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10001c38:	01400044 	movi	r5,1
10001c3c:	0009883a 	mov	r4,zero
10001c40:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001c44:	000b883a 	mov	r5,zero
10001c48:	0009883a 	mov	r4,zero
10001c4c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001c50:	000b883a 	mov	r5,zero
10001c54:	0009883a 	mov	r4,zero
10001c58:	00002f40 	call	100002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001c5c:	000b883a 	mov	r5,zero
10001c60:	0009883a 	mov	r4,zero
10001c64:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001c68:	000b883a 	mov	r5,zero
10001c6c:	0009883a 	mov	r4,zero
10001c70:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001c74:	0140a404 	movi	r5,656
10001c78:	0009883a 	mov	r4,zero
10001c7c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001c80:	01401044 	movi	r5,65
10001c84:	0009883a 	mov	r4,zero
10001c88:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001c8c:	014004c4 	movi	r5,19
10001c90:	0009883a 	mov	r4,zero
10001c94:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001c98:	000b883a 	mov	r5,zero
10001c9c:	0009883a 	mov	r4,zero
10001ca0:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001ca4:	01414004 	movi	r5,1280
10001ca8:	01006c04 	movi	r4,432
10001cac:	00012600 	call	10001260 <UsbWrite>

}
10001cb0:	0001883a 	nop
10001cb4:	e037883a 	mov	sp,fp
10001cb8:	dfc00117 	ldw	ra,4(sp)
10001cbc:	df000017 	ldw	fp,0(sp)
10001cc0:	dec00204 	addi	sp,sp,8
10001cc4:	f800283a 	ret

10001cc8 <UsbClassRequest>:

void UsbClassRequest()
{
10001cc8:	defffe04 	addi	sp,sp,-8
10001ccc:	dfc00115 	stw	ra,4(sp)
10001cd0:	df000015 	stw	fp,0(sp)
10001cd4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001cd8:	01414004 	movi	r5,1280
10001cdc:	01000084 	movi	r4,2
10001ce0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001ce4:	01414304 	movi	r5,1292
10001ce8:	0009883a 	mov	r4,zero
10001cec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001cf0:	01400204 	movi	r5,8
10001cf4:	0009883a 	mov	r4,zero
10001cf8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001cfc:	0140b404 	movi	r5,720
10001d00:	0009883a 	mov	r4,zero
10001d04:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001d08:	01400044 	movi	r5,1
10001d0c:	0009883a 	mov	r4,zero
10001d10:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001d14:	014004c4 	movi	r5,19
10001d18:	0009883a 	mov	r4,zero
10001d1c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001d20:	01414504 	movi	r5,1300
10001d24:	0009883a 	mov	r4,zero
10001d28:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10001d2c:	01428844 	movi	r5,2593
10001d30:	0009883a 	mov	r4,zero
10001d34:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10001d38:	000b883a 	mov	r5,zero
10001d3c:	0009883a 	mov	r4,zero
10001d40:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001d44:	000b883a 	mov	r5,zero
10001d48:	0009883a 	mov	r4,zero
10001d4c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001d50:	000b883a 	mov	r5,zero
10001d54:	0009883a 	mov	r4,zero
10001d58:	00002f40 	call	100002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001d5c:	000b883a 	mov	r5,zero
10001d60:	0009883a 	mov	r4,zero
10001d64:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10001d68:	000b883a 	mov	r5,zero
10001d6c:	0009883a 	mov	r4,zero
10001d70:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001d74:	0140a404 	movi	r5,656
10001d78:	0009883a 	mov	r4,zero
10001d7c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001d80:	01401044 	movi	r5,65
10001d84:	0009883a 	mov	r4,zero
10001d88:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001d8c:	014004c4 	movi	r5,19
10001d90:	0009883a 	mov	r4,zero
10001d94:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001d98:	000b883a 	mov	r5,zero
10001d9c:	0009883a 	mov	r4,zero
10001da0:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001da4:	01414004 	movi	r5,1280
10001da8:	01006c04 	movi	r4,432
10001dac:	00012600 	call	10001260 <UsbWrite>
}
10001db0:	0001883a 	nop
10001db4:	e037883a 	mov	sp,fp
10001db8:	dfc00117 	ldw	ra,4(sp)
10001dbc:	df000017 	ldw	fp,0(sp)
10001dc0:	dec00204 	addi	sp,sp,8
10001dc4:	f800283a 	ret

10001dc8 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10001dc8:	defffe04 	addi	sp,sp,-8
10001dcc:	dfc00115 	stw	ra,4(sp)
10001dd0:	df000015 	stw	fp,0(sp)
10001dd4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001dd8:	01414004 	movi	r5,1280
10001ddc:	01000084 	movi	r4,2
10001de0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001de4:	01414304 	movi	r5,1292
10001de8:	0009883a 	mov	r4,zero
10001dec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001df0:	01400204 	movi	r5,8
10001df4:	0009883a 	mov	r4,zero
10001df8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001dfc:	0140b404 	movi	r5,720
10001e00:	0009883a 	mov	r4,zero
10001e04:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001e08:	01400044 	movi	r5,1
10001e0c:	0009883a 	mov	r4,zero
10001e10:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001e14:	014004c4 	movi	r5,19
10001e18:	0009883a 	mov	r4,zero
10001e1c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001e20:	01414504 	movi	r5,1300
10001e24:	0009883a 	mov	r4,zero
10001e28:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001e2c:	0141a044 	movi	r5,1665
10001e30:	0009883a 	mov	r4,zero
10001e34:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10001e38:	01484004 	movi	r5,8448
10001e3c:	0009883a 	mov	r4,zero
10001e40:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001e44:	000b883a 	mov	r5,zero
10001e48:	0009883a 	mov	r4,zero
10001e4c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001e50:	01401ec4 	movi	r5,123
10001e54:	0009883a 	mov	r4,zero
10001e58:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001e5c:	01415104 	movi	r5,1348
10001e60:	0009883a 	mov	r4,zero
10001e64:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001e68:	01400204 	movi	r5,8
10001e6c:	0009883a 	mov	r4,zero
10001e70:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001e74:	0140a404 	movi	r5,656
10001e78:	0009883a 	mov	r4,zero
10001e7c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001e80:	01401044 	movi	r5,65
10001e84:	0009883a 	mov	r4,zero
10001e88:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001e8c:	014004c4 	movi	r5,19
10001e90:	0009883a 	mov	r4,zero
10001e94:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001e98:	01414804 	movi	r5,1312
10001e9c:	0009883a 	mov	r4,zero
10001ea0:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10001ea4:	000b883a 	mov	r5,zero
10001ea8:	0009883a 	mov	r4,zero
10001eac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10001eb0:	000b883a 	mov	r5,zero
10001eb4:	0009883a 	mov	r4,zero
10001eb8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10001ebc:	01408404 	movi	r5,528
10001ec0:	0009883a 	mov	r4,zero
10001ec4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001ec8:	01401044 	movi	r5,65
10001ecc:	0009883a 	mov	r4,zero
10001ed0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001ed4:	014004c4 	movi	r5,19
10001ed8:	0009883a 	mov	r4,zero
10001edc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001ee0:	000b883a 	mov	r5,zero
10001ee4:	0009883a 	mov	r4,zero
10001ee8:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001eec:	01414004 	movi	r5,1280
10001ef0:	01006c04 	movi	r4,432
10001ef4:	00012600 	call	10001260 <UsbWrite>

}
10001ef8:	0001883a 	nop
10001efc:	e037883a 	mov	sp,fp
10001f00:	dfc00117 	ldw	ra,4(sp)
10001f04:	df000017 	ldw	fp,0(sp)
10001f08:	dec00204 	addi	sp,sp,8
10001f0c:	f800283a 	ret

10001f10 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10001f10:	defffe04 	addi	sp,sp,-8
10001f14:	dfc00115 	stw	ra,4(sp)
10001f18:	df000015 	stw	fp,0(sp)
10001f1c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001f20:	01414004 	movi	r5,1280
10001f24:	01000084 	movi	r4,2
10001f28:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001f2c:	01414304 	movi	r5,1292
10001f30:	0009883a 	mov	r4,zero
10001f34:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001f38:	01400204 	movi	r5,8
10001f3c:	0009883a 	mov	r4,zero
10001f40:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001f44:	0140b404 	movi	r5,720
10001f48:	0009883a 	mov	r4,zero
10001f4c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001f50:	01400044 	movi	r5,1
10001f54:	0009883a 	mov	r4,zero
10001f58:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001f5c:	014004c4 	movi	r5,19
10001f60:	0009883a 	mov	r4,zero
10001f64:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001f68:	01414504 	movi	r5,1300
10001f6c:	0009883a 	mov	r4,zero
10001f70:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001f74:	0141a044 	movi	r5,1665
10001f78:	0009883a 	mov	r4,zero
10001f7c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10001f80:	01488004 	movi	r5,8704
10001f84:	0009883a 	mov	r4,zero
10001f88:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001f8c:	000b883a 	mov	r5,zero
10001f90:	0009883a 	mov	r4,zero
10001f94:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001f98:	01401ec4 	movi	r5,123
10001f9c:	0009883a 	mov	r4,zero
10001fa0:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10001fa4:	01416004 	movi	r5,1408
10001fa8:	0009883a 	mov	r4,zero
10001fac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001fb0:	01400204 	movi	r5,8
10001fb4:	0009883a 	mov	r4,zero
10001fb8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001fbc:	0140a404 	movi	r5,656
10001fc0:	0009883a 	mov	r4,zero
10001fc4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001fc8:	01401044 	movi	r5,65
10001fcc:	0009883a 	mov	r4,zero
10001fd0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001fd4:	014004c4 	movi	r5,19
10001fd8:	0009883a 	mov	r4,zero
10001fdc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001fe0:	01414804 	movi	r5,1312
10001fe4:	0009883a 	mov	r4,zero
10001fe8:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10001fec:	01416204 	movi	r5,1416
10001ff0:	0009883a 	mov	r4,zero
10001ff4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001ff8:	01400204 	movi	r5,8
10001ffc:	0009883a 	mov	r4,zero
10002000:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002004:	0140a404 	movi	r5,656
10002008:	0009883a 	mov	r4,zero
1000200c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002010:	01400044 	movi	r5,1
10002014:	0009883a 	mov	r4,zero
10002018:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
1000201c:	014004c4 	movi	r5,19
10002020:	0009883a 	mov	r4,zero
10002024:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002028:	01414b04 	movi	r5,1324
1000202c:	0009883a 	mov	r4,zero
10002030:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10002034:	01416404 	movi	r5,1424
10002038:	0009883a 	mov	r4,zero
1000203c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002040:	01400204 	movi	r5,8
10002044:	0009883a 	mov	r4,zero
10002048:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
1000204c:	0140a404 	movi	r5,656
10002050:	0009883a 	mov	r4,zero
10002054:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002058:	01401044 	movi	r5,65
1000205c:	0009883a 	mov	r4,zero
10002060:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002064:	014004c4 	movi	r5,19
10002068:	0009883a 	mov	r4,zero
1000206c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10002070:	01414e04 	movi	r5,1336
10002074:	0009883a 	mov	r4,zero
10002078:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
1000207c:	01416604 	movi	r5,1432
10002080:	0009883a 	mov	r4,zero
10002084:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10002088:	01400204 	movi	r5,8
1000208c:	0009883a 	mov	r4,zero
10002090:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002094:	0140a404 	movi	r5,656
10002098:	0009883a 	mov	r4,zero
1000209c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
100020a0:	01400044 	movi	r5,1
100020a4:	0009883a 	mov	r4,zero
100020a8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
100020ac:	014004c4 	movi	r5,19
100020b0:	0009883a 	mov	r4,zero
100020b4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
100020b8:	01415104 	movi	r5,1348
100020bc:	0009883a 	mov	r4,zero
100020c0:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
100020c4:	01416804 	movi	r5,1440
100020c8:	0009883a 	mov	r4,zero
100020cc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100020d0:	01400204 	movi	r5,8
100020d4:	0009883a 	mov	r4,zero
100020d8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100020dc:	0140a404 	movi	r5,656
100020e0:	0009883a 	mov	r4,zero
100020e4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
100020e8:	01401044 	movi	r5,65
100020ec:	0009883a 	mov	r4,zero
100020f0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100020f4:	014004c4 	movi	r5,19
100020f8:	0009883a 	mov	r4,zero
100020fc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10002100:	01415404 	movi	r5,1360
10002104:	0009883a 	mov	r4,zero
10002108:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
1000210c:	01416a04 	movi	r5,1448
10002110:	0009883a 	mov	r4,zero
10002114:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002118:	01400204 	movi	r5,8
1000211c:	0009883a 	mov	r4,zero
10002120:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002124:	0140a404 	movi	r5,656
10002128:	0009883a 	mov	r4,zero
1000212c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002130:	01400044 	movi	r5,1
10002134:	0009883a 	mov	r4,zero
10002138:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
1000213c:	014004c4 	movi	r5,19
10002140:	0009883a 	mov	r4,zero
10002144:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10002148:	01415704 	movi	r5,1372
1000214c:	0009883a 	mov	r4,zero
10002150:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10002154:	01416c04 	movi	r5,1456
10002158:	0009883a 	mov	r4,zero
1000215c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002160:	01400204 	movi	r5,8
10002164:	0009883a 	mov	r4,zero
10002168:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
1000216c:	0140a404 	movi	r5,656
10002170:	0009883a 	mov	r4,zero
10002174:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10002178:	01401044 	movi	r5,65
1000217c:	0009883a 	mov	r4,zero
10002180:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002184:	014004c4 	movi	r5,19
10002188:	0009883a 	mov	r4,zero
1000218c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10002190:	01415a04 	movi	r5,1384
10002194:	0009883a 	mov	r4,zero
10002198:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
1000219c:	01416e04 	movi	r5,1464
100021a0:	0009883a 	mov	r4,zero
100021a4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
100021a8:	014000c4 	movi	r5,3
100021ac:	0009883a 	mov	r4,zero
100021b0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
100021b4:	0140a404 	movi	r5,656
100021b8:	0009883a 	mov	r4,zero
100021bc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
100021c0:	01400044 	movi	r5,1
100021c4:	0009883a 	mov	r4,zero
100021c8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
100021cc:	014004c4 	movi	r5,19
100021d0:	0009883a 	mov	r4,zero
100021d4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
100021d8:	01415d04 	movi	r5,1396
100021dc:	0009883a 	mov	r4,zero
100021e0:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
100021e4:	000b883a 	mov	r5,zero
100021e8:	0009883a 	mov	r4,zero
100021ec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100021f0:	000b883a 	mov	r5,zero
100021f4:	0009883a 	mov	r4,zero
100021f8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
100021fc:	01408404 	movi	r5,528
10002200:	0009883a 	mov	r4,zero
10002204:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002208:	01401044 	movi	r5,65
1000220c:	0009883a 	mov	r4,zero
10002210:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002214:	014004c4 	movi	r5,19
10002218:	0009883a 	mov	r4,zero
1000221c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002220:	000b883a 	mov	r5,zero
10002224:	0009883a 	mov	r4,zero
10002228:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000222c:	01414004 	movi	r5,1280
10002230:	01006c04 	movi	r4,432
10002234:	00012600 	call	10001260 <UsbWrite>

}
10002238:	0001883a 	nop
1000223c:	e037883a 	mov	sp,fp
10002240:	dfc00117 	ldw	ra,4(sp)
10002244:	df000017 	ldw	fp,0(sp)
10002248:	dec00204 	addi	sp,sp,8
1000224c:	f800283a 	ret

10002250 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10002250:	defffd04 	addi	sp,sp,-12
10002254:	dfc00215 	stw	ra,8(sp)
10002258:	df000115 	stw	fp,4(sp)
1000225c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10002260:	01005104 	movi	r4,324
10002264:	00012b80 	call	100012b8 <UsbRead>
10002268:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
1000226c:	000b883a 	mov	r5,zero
10002270:	01005104 	movi	r4,324
10002274:	00012600 	call	10001260 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002278:	00000d06 	br	100022b0 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
1000227c:	e0bfff0b 	ldhu	r2,-4(fp)
10002280:	10000526 	beq	r2,zero,10002298 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
10002284:	e0bfff0b 	ldhu	r2,-4(fp)
10002288:	100b883a 	mov	r5,r2
1000228c:	01040074 	movhi	r4,4097
10002290:	2109b904 	addi	r4,r4,9956
10002294:	00025b80 	call	100025b8 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002298:	01005104 	movi	r4,324
1000229c:	00012b80 	call	100012b8 <UsbRead>
100022a0:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
100022a4:	000b883a 	mov	r5,zero
100022a8:	01005104 	movi	r4,324
100022ac:	00012600 	call	10001260 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100022b0:	e0bfff0b 	ldhu	r2,-4(fp)
100022b4:	10840018 	cmpnei	r2,r2,4096
100022b8:	103ff01e 	bne	r2,zero,1000227c <__alt_data_end+0xf800227c>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
100022bc:	e0bfff0b 	ldhu	r2,-4(fp)
}
100022c0:	e037883a 	mov	sp,fp
100022c4:	dfc00117 	ldw	ra,4(sp)
100022c8:	df000017 	ldw	fp,0(sp)
100022cc:	dec00204 	addi	sp,sp,8
100022d0:	f800283a 	ret

100022d4 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
100022d4:	defffd04 	addi	sp,sp,-12
100022d8:	dfc00215 	stw	ra,8(sp)
100022dc:	df000115 	stw	fp,4(sp)
100022e0:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
100022e4:	010000c4 	movi	r4,3
100022e8:	00003640 	call	10000364 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
100022ec:	01005104 	movi	r4,324
100022f0:	00012b80 	call	100012b8 <UsbRead>
100022f4:	10bfffcc 	andi	r2,r2,65535
100022f8:	10840018 	cmpnei	r2,r2,4096
100022fc:	1000091e 	bne	r2,zero,10002324 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002300:	000b883a 	mov	r5,zero
10002304:	01005104 	movi	r4,324
10002308:	00012600 	call	10001260 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000230c:	0001883a 	nop
10002310:	010000c4 	movi	r4,3
10002314:	00003640 	call	10000364 <IO_read>
10002318:	10bfffcc 	andi	r2,r2,65535
1000231c:	1080040c 	andi	r2,r2,16
10002320:	103ffb26 	beq	r2,zero,10002310 <__alt_data_end+0xf8002310>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10002324:	01414204 	movi	r5,1288
10002328:	01000084 	movi	r4,2
1000232c:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10002330:	0009883a 	mov	r4,zero
10002334:	00003640 	call	10000364 <IO_read>
10002338:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
1000233c:	e0bfff0b 	ldhu	r2,-4(fp)
}
10002340:	e037883a 	mov	sp,fp
10002344:	dfc00117 	ldw	ra,4(sp)
10002348:	df000017 	ldw	fp,0(sp)
1000234c:	dec00204 	addi	sp,sp,8
10002350:	f800283a 	ret

10002354 <UsbPrintMem>:


void UsbPrintMem()
{
10002354:	defffc04 	addi	sp,sp,-16
10002358:	dfc00315 	stw	ra,12(sp)
1000235c:	df000215 	stw	fp,8(sp)
10002360:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10002364:	01414004 	movi	r5,1280
10002368:	01000084 	movi	r4,2
1000236c:	00002f40 	call	100002f4 <IO_write>
	for (i = 0; i <= 200; i += 2)
10002370:	e03ffe15 	stw	zero,-8(fp)
10002374:	00000e06 	br	100023b0 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
10002378:	0009883a 	mov	r4,zero
1000237c:	00003640 	call	10000364 <IO_read>
10002380:	10bfffcc 	andi	r2,r2,65535
10002384:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10002388:	e0bffe17 	ldw	r2,-8(fp)
1000238c:	10814004 	addi	r2,r2,1280
10002390:	e1bfff17 	ldw	r6,-4(fp)
10002394:	100b883a 	mov	r5,r2
10002398:	01040074 	movhi	r4,4097
1000239c:	2109c104 	addi	r4,r4,9988
100023a0:	00025b80 	call	100025b8 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
100023a4:	e0bffe17 	ldw	r2,-8(fp)
100023a8:	10800084 	addi	r2,r2,2
100023ac:	e0bffe15 	stw	r2,-8(fp)
100023b0:	e0bffe17 	ldw	r2,-8(fp)
100023b4:	10803250 	cmplti	r2,r2,201
100023b8:	103fef1e 	bne	r2,zero,10002378 <__alt_data_end+0xf8002378>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
100023bc:	0001883a 	nop
100023c0:	e037883a 	mov	sp,fp
100023c4:	dfc00117 	ldw	ra,4(sp)
100023c8:	df000017 	ldw	fp,0(sp)
100023cc:	dec00204 	addi	sp,sp,8
100023d0:	f800283a 	ret

100023d4 <__divsi3>:
100023d4:	20001b16 	blt	r4,zero,10002444 <__divsi3+0x70>
100023d8:	000f883a 	mov	r7,zero
100023dc:	28001616 	blt	r5,zero,10002438 <__divsi3+0x64>
100023e0:	200d883a 	mov	r6,r4
100023e4:	29001a2e 	bgeu	r5,r4,10002450 <__divsi3+0x7c>
100023e8:	00800804 	movi	r2,32
100023ec:	00c00044 	movi	r3,1
100023f0:	00000106 	br	100023f8 <__divsi3+0x24>
100023f4:	10000d26 	beq	r2,zero,1000242c <__divsi3+0x58>
100023f8:	294b883a 	add	r5,r5,r5
100023fc:	10bfffc4 	addi	r2,r2,-1
10002400:	18c7883a 	add	r3,r3,r3
10002404:	293ffb36 	bltu	r5,r4,100023f4 <__alt_data_end+0xf80023f4>
10002408:	0005883a 	mov	r2,zero
1000240c:	18000726 	beq	r3,zero,1000242c <__divsi3+0x58>
10002410:	0005883a 	mov	r2,zero
10002414:	31400236 	bltu	r6,r5,10002420 <__divsi3+0x4c>
10002418:	314dc83a 	sub	r6,r6,r5
1000241c:	10c4b03a 	or	r2,r2,r3
10002420:	1806d07a 	srli	r3,r3,1
10002424:	280ad07a 	srli	r5,r5,1
10002428:	183ffa1e 	bne	r3,zero,10002414 <__alt_data_end+0xf8002414>
1000242c:	38000126 	beq	r7,zero,10002434 <__divsi3+0x60>
10002430:	0085c83a 	sub	r2,zero,r2
10002434:	f800283a 	ret
10002438:	014bc83a 	sub	r5,zero,r5
1000243c:	39c0005c 	xori	r7,r7,1
10002440:	003fe706 	br	100023e0 <__alt_data_end+0xf80023e0>
10002444:	0109c83a 	sub	r4,zero,r4
10002448:	01c00044 	movi	r7,1
1000244c:	003fe306 	br	100023dc <__alt_data_end+0xf80023dc>
10002450:	00c00044 	movi	r3,1
10002454:	003fee06 	br	10002410 <__alt_data_end+0xf8002410>

10002458 <__modsi3>:
10002458:	20001716 	blt	r4,zero,100024b8 <__modsi3+0x60>
1000245c:	000f883a 	mov	r7,zero
10002460:	2005883a 	mov	r2,r4
10002464:	28001216 	blt	r5,zero,100024b0 <__modsi3+0x58>
10002468:	2900162e 	bgeu	r5,r4,100024c4 <__modsi3+0x6c>
1000246c:	01800804 	movi	r6,32
10002470:	00c00044 	movi	r3,1
10002474:	00000106 	br	1000247c <__modsi3+0x24>
10002478:	30000a26 	beq	r6,zero,100024a4 <__modsi3+0x4c>
1000247c:	294b883a 	add	r5,r5,r5
10002480:	31bfffc4 	addi	r6,r6,-1
10002484:	18c7883a 	add	r3,r3,r3
10002488:	293ffb36 	bltu	r5,r4,10002478 <__alt_data_end+0xf8002478>
1000248c:	18000526 	beq	r3,zero,100024a4 <__modsi3+0x4c>
10002490:	1806d07a 	srli	r3,r3,1
10002494:	11400136 	bltu	r2,r5,1000249c <__modsi3+0x44>
10002498:	1145c83a 	sub	r2,r2,r5
1000249c:	280ad07a 	srli	r5,r5,1
100024a0:	183ffb1e 	bne	r3,zero,10002490 <__alt_data_end+0xf8002490>
100024a4:	38000126 	beq	r7,zero,100024ac <__modsi3+0x54>
100024a8:	0085c83a 	sub	r2,zero,r2
100024ac:	f800283a 	ret
100024b0:	014bc83a 	sub	r5,zero,r5
100024b4:	003fec06 	br	10002468 <__alt_data_end+0xf8002468>
100024b8:	0109c83a 	sub	r4,zero,r4
100024bc:	01c00044 	movi	r7,1
100024c0:	003fe706 	br	10002460 <__alt_data_end+0xf8002460>
100024c4:	00c00044 	movi	r3,1
100024c8:	003ff106 	br	10002490 <__alt_data_end+0xf8002490>

100024cc <__udivsi3>:
100024cc:	200d883a 	mov	r6,r4
100024d0:	2900152e 	bgeu	r5,r4,10002528 <__udivsi3+0x5c>
100024d4:	28001416 	blt	r5,zero,10002528 <__udivsi3+0x5c>
100024d8:	00800804 	movi	r2,32
100024dc:	00c00044 	movi	r3,1
100024e0:	00000206 	br	100024ec <__udivsi3+0x20>
100024e4:	10000e26 	beq	r2,zero,10002520 <__udivsi3+0x54>
100024e8:	28000516 	blt	r5,zero,10002500 <__udivsi3+0x34>
100024ec:	294b883a 	add	r5,r5,r5
100024f0:	10bfffc4 	addi	r2,r2,-1
100024f4:	18c7883a 	add	r3,r3,r3
100024f8:	293ffa36 	bltu	r5,r4,100024e4 <__alt_data_end+0xf80024e4>
100024fc:	18000826 	beq	r3,zero,10002520 <__udivsi3+0x54>
10002500:	0005883a 	mov	r2,zero
10002504:	31400236 	bltu	r6,r5,10002510 <__udivsi3+0x44>
10002508:	314dc83a 	sub	r6,r6,r5
1000250c:	10c4b03a 	or	r2,r2,r3
10002510:	1806d07a 	srli	r3,r3,1
10002514:	280ad07a 	srli	r5,r5,1
10002518:	183ffa1e 	bne	r3,zero,10002504 <__alt_data_end+0xf8002504>
1000251c:	f800283a 	ret
10002520:	0005883a 	mov	r2,zero
10002524:	f800283a 	ret
10002528:	00c00044 	movi	r3,1
1000252c:	003ff406 	br	10002500 <__alt_data_end+0xf8002500>

10002530 <__umodsi3>:
10002530:	2005883a 	mov	r2,r4
10002534:	2900122e 	bgeu	r5,r4,10002580 <__umodsi3+0x50>
10002538:	28001116 	blt	r5,zero,10002580 <__umodsi3+0x50>
1000253c:	01800804 	movi	r6,32
10002540:	00c00044 	movi	r3,1
10002544:	00000206 	br	10002550 <__umodsi3+0x20>
10002548:	30000c26 	beq	r6,zero,1000257c <__umodsi3+0x4c>
1000254c:	28000516 	blt	r5,zero,10002564 <__umodsi3+0x34>
10002550:	294b883a 	add	r5,r5,r5
10002554:	31bfffc4 	addi	r6,r6,-1
10002558:	18c7883a 	add	r3,r3,r3
1000255c:	293ffa36 	bltu	r5,r4,10002548 <__alt_data_end+0xf8002548>
10002560:	18000626 	beq	r3,zero,1000257c <__umodsi3+0x4c>
10002564:	1806d07a 	srli	r3,r3,1
10002568:	11400136 	bltu	r2,r5,10002570 <__umodsi3+0x40>
1000256c:	1145c83a 	sub	r2,r2,r5
10002570:	280ad07a 	srli	r5,r5,1
10002574:	183ffb1e 	bne	r3,zero,10002564 <__alt_data_end+0xf8002564>
10002578:	f800283a 	ret
1000257c:	f800283a 	ret
10002580:	00c00044 	movi	r3,1
10002584:	003ff706 	br	10002564 <__alt_data_end+0xf8002564>

10002588 <_printf_r>:
10002588:	defffd04 	addi	sp,sp,-12
1000258c:	2805883a 	mov	r2,r5
10002590:	dfc00015 	stw	ra,0(sp)
10002594:	d9800115 	stw	r6,4(sp)
10002598:	d9c00215 	stw	r7,8(sp)
1000259c:	21400217 	ldw	r5,8(r4)
100025a0:	d9c00104 	addi	r7,sp,4
100025a4:	100d883a 	mov	r6,r2
100025a8:	000282c0 	call	1000282c <___vfprintf_internal_r>
100025ac:	dfc00017 	ldw	ra,0(sp)
100025b0:	dec00304 	addi	sp,sp,12
100025b4:	f800283a 	ret

100025b8 <printf>:
100025b8:	defffc04 	addi	sp,sp,-16
100025bc:	dfc00015 	stw	ra,0(sp)
100025c0:	d9400115 	stw	r5,4(sp)
100025c4:	d9800215 	stw	r6,8(sp)
100025c8:	d9c00315 	stw	r7,12(sp)
100025cc:	00840074 	movhi	r2,4097
100025d0:	10913204 	addi	r2,r2,17608
100025d4:	10800017 	ldw	r2,0(r2)
100025d8:	200b883a 	mov	r5,r4
100025dc:	d9800104 	addi	r6,sp,4
100025e0:	11000217 	ldw	r4,8(r2)
100025e4:	0004b080 	call	10004b08 <__vfprintf_internal>
100025e8:	dfc00017 	ldw	ra,0(sp)
100025ec:	dec00404 	addi	sp,sp,16
100025f0:	f800283a 	ret

100025f4 <_puts_r>:
100025f4:	defff604 	addi	sp,sp,-40
100025f8:	dc000715 	stw	r16,28(sp)
100025fc:	2021883a 	mov	r16,r4
10002600:	2809883a 	mov	r4,r5
10002604:	dc400815 	stw	r17,32(sp)
10002608:	dfc00915 	stw	ra,36(sp)
1000260c:	2823883a 	mov	r17,r5
10002610:	00027440 	call	10002744 <strlen>
10002614:	10c00044 	addi	r3,r2,1
10002618:	d8800115 	stw	r2,4(sp)
1000261c:	00840074 	movhi	r2,4097
10002620:	1089c604 	addi	r2,r2,10008
10002624:	d8800215 	stw	r2,8(sp)
10002628:	00800044 	movi	r2,1
1000262c:	d8800315 	stw	r2,12(sp)
10002630:	00800084 	movi	r2,2
10002634:	dc400015 	stw	r17,0(sp)
10002638:	d8c00615 	stw	r3,24(sp)
1000263c:	dec00415 	stw	sp,16(sp)
10002640:	d8800515 	stw	r2,20(sp)
10002644:	80000226 	beq	r16,zero,10002650 <_puts_r+0x5c>
10002648:	80800e17 	ldw	r2,56(r16)
1000264c:	10001426 	beq	r2,zero,100026a0 <_puts_r+0xac>
10002650:	81400217 	ldw	r5,8(r16)
10002654:	2880030b 	ldhu	r2,12(r5)
10002658:	10c8000c 	andi	r3,r2,8192
1000265c:	1800061e 	bne	r3,zero,10002678 <_puts_r+0x84>
10002660:	29001917 	ldw	r4,100(r5)
10002664:	00f7ffc4 	movi	r3,-8193
10002668:	10880014 	ori	r2,r2,8192
1000266c:	20c6703a 	and	r3,r4,r3
10002670:	2880030d 	sth	r2,12(r5)
10002674:	28c01915 	stw	r3,100(r5)
10002678:	d9800404 	addi	r6,sp,16
1000267c:	8009883a 	mov	r4,r16
10002680:	00070700 	call	10007070 <__sfvwrite_r>
10002684:	1000091e 	bne	r2,zero,100026ac <_puts_r+0xb8>
10002688:	00800284 	movi	r2,10
1000268c:	dfc00917 	ldw	ra,36(sp)
10002690:	dc400817 	ldw	r17,32(sp)
10002694:	dc000717 	ldw	r16,28(sp)
10002698:	dec00a04 	addi	sp,sp,40
1000269c:	f800283a 	ret
100026a0:	8009883a 	mov	r4,r16
100026a4:	0006bec0 	call	10006bec <__sinit>
100026a8:	003fe906 	br	10002650 <__alt_data_end+0xf8002650>
100026ac:	00bfffc4 	movi	r2,-1
100026b0:	003ff606 	br	1000268c <__alt_data_end+0xf800268c>

100026b4 <puts>:
100026b4:	00840074 	movhi	r2,4097
100026b8:	10913204 	addi	r2,r2,17608
100026bc:	200b883a 	mov	r5,r4
100026c0:	11000017 	ldw	r4,0(r2)
100026c4:	00025f41 	jmpi	100025f4 <_puts_r>

100026c8 <srand>:
100026c8:	00840074 	movhi	r2,4097
100026cc:	10913204 	addi	r2,r2,17608
100026d0:	10800017 	ldw	r2,0(r2)
100026d4:	11002915 	stw	r4,164(r2)
100026d8:	10002a15 	stw	zero,168(r2)
100026dc:	f800283a 	ret

100026e0 <rand>:
100026e0:	00840074 	movhi	r2,4097
100026e4:	defffe04 	addi	sp,sp,-8
100026e8:	10913204 	addi	r2,r2,17608
100026ec:	dc000015 	stw	r16,0(sp)
100026f0:	14000017 	ldw	r16,0(r2)
100026f4:	dfc00115 	stw	ra,4(sp)
100026f8:	01932574 	movhi	r6,19605
100026fc:	81002917 	ldw	r4,164(r16)
10002700:	81402a17 	ldw	r5,168(r16)
10002704:	01d614b4 	movhi	r7,22610
10002708:	319fcb44 	addi	r6,r6,32557
1000270c:	39fd0b44 	addi	r7,r7,-3027
10002710:	000bfb00 	call	1000bfb0 <__muldi3>
10002714:	11000044 	addi	r4,r2,1
10002718:	2085803a 	cmpltu	r2,r4,r2
1000271c:	10c7883a 	add	r3,r2,r3
10002720:	00a00034 	movhi	r2,32768
10002724:	10bfffc4 	addi	r2,r2,-1
10002728:	1884703a 	and	r2,r3,r2
1000272c:	81002915 	stw	r4,164(r16)
10002730:	80c02a15 	stw	r3,168(r16)
10002734:	dfc00117 	ldw	ra,4(sp)
10002738:	dc000017 	ldw	r16,0(sp)
1000273c:	dec00204 	addi	sp,sp,8
10002740:	f800283a 	ret

10002744 <strlen>:
10002744:	208000cc 	andi	r2,r4,3
10002748:	10002026 	beq	r2,zero,100027cc <strlen+0x88>
1000274c:	20800007 	ldb	r2,0(r4)
10002750:	10002026 	beq	r2,zero,100027d4 <strlen+0x90>
10002754:	2005883a 	mov	r2,r4
10002758:	00000206 	br	10002764 <strlen+0x20>
1000275c:	10c00007 	ldb	r3,0(r2)
10002760:	18001826 	beq	r3,zero,100027c4 <strlen+0x80>
10002764:	10800044 	addi	r2,r2,1
10002768:	10c000cc 	andi	r3,r2,3
1000276c:	183ffb1e 	bne	r3,zero,1000275c <__alt_data_end+0xf800275c>
10002770:	10c00017 	ldw	r3,0(r2)
10002774:	01ffbff4 	movhi	r7,65279
10002778:	39ffbfc4 	addi	r7,r7,-257
1000277c:	00ca303a 	nor	r5,zero,r3
10002780:	01a02074 	movhi	r6,32897
10002784:	19c7883a 	add	r3,r3,r7
10002788:	31a02004 	addi	r6,r6,-32640
1000278c:	1946703a 	and	r3,r3,r5
10002790:	1986703a 	and	r3,r3,r6
10002794:	1800091e 	bne	r3,zero,100027bc <strlen+0x78>
10002798:	10800104 	addi	r2,r2,4
1000279c:	10c00017 	ldw	r3,0(r2)
100027a0:	19cb883a 	add	r5,r3,r7
100027a4:	00c6303a 	nor	r3,zero,r3
100027a8:	28c6703a 	and	r3,r5,r3
100027ac:	1986703a 	and	r3,r3,r6
100027b0:	183ff926 	beq	r3,zero,10002798 <__alt_data_end+0xf8002798>
100027b4:	00000106 	br	100027bc <strlen+0x78>
100027b8:	10800044 	addi	r2,r2,1
100027bc:	10c00007 	ldb	r3,0(r2)
100027c0:	183ffd1e 	bne	r3,zero,100027b8 <__alt_data_end+0xf80027b8>
100027c4:	1105c83a 	sub	r2,r2,r4
100027c8:	f800283a 	ret
100027cc:	2005883a 	mov	r2,r4
100027d0:	003fe706 	br	10002770 <__alt_data_end+0xf8002770>
100027d4:	0005883a 	mov	r2,zero
100027d8:	f800283a 	ret

100027dc <time>:
100027dc:	00840074 	movhi	r2,4097
100027e0:	defffc04 	addi	sp,sp,-16
100027e4:	10913204 	addi	r2,r2,17608
100027e8:	dc000215 	stw	r16,8(sp)
100027ec:	2021883a 	mov	r16,r4
100027f0:	11000017 	ldw	r4,0(r2)
100027f4:	000d883a 	mov	r6,zero
100027f8:	d80b883a 	mov	r5,sp
100027fc:	dfc00315 	stw	ra,12(sp)
10002800:	00076c00 	call	100076c0 <_gettimeofday_r>
10002804:	10000716 	blt	r2,zero,10002824 <time+0x48>
10002808:	d8800017 	ldw	r2,0(sp)
1000280c:	80000126 	beq	r16,zero,10002814 <time+0x38>
10002810:	80800015 	stw	r2,0(r16)
10002814:	dfc00317 	ldw	ra,12(sp)
10002818:	dc000217 	ldw	r16,8(sp)
1000281c:	dec00404 	addi	sp,sp,16
10002820:	f800283a 	ret
10002824:	00bfffc4 	movi	r2,-1
10002828:	003ffa06 	br	10002814 <__alt_data_end+0xf8002814>

1000282c <___vfprintf_internal_r>:
1000282c:	deffb804 	addi	sp,sp,-288
10002830:	dfc04715 	stw	ra,284(sp)
10002834:	ddc04515 	stw	r23,276(sp)
10002838:	dd404315 	stw	r21,268(sp)
1000283c:	d9002d15 	stw	r4,180(sp)
10002840:	282f883a 	mov	r23,r5
10002844:	302b883a 	mov	r21,r6
10002848:	d9c02e15 	stw	r7,184(sp)
1000284c:	df004615 	stw	fp,280(sp)
10002850:	dd804415 	stw	r22,272(sp)
10002854:	dd004215 	stw	r20,264(sp)
10002858:	dcc04115 	stw	r19,260(sp)
1000285c:	dc804015 	stw	r18,256(sp)
10002860:	dc403f15 	stw	r17,252(sp)
10002864:	dc003e15 	stw	r16,248(sp)
10002868:	00077c80 	call	100077c8 <_localeconv_r>
1000286c:	10800017 	ldw	r2,0(r2)
10002870:	1009883a 	mov	r4,r2
10002874:	d8803415 	stw	r2,208(sp)
10002878:	00027440 	call	10002744 <strlen>
1000287c:	d8803715 	stw	r2,220(sp)
10002880:	d8802d17 	ldw	r2,180(sp)
10002884:	10000226 	beq	r2,zero,10002890 <___vfprintf_internal_r+0x64>
10002888:	10800e17 	ldw	r2,56(r2)
1000288c:	1000fb26 	beq	r2,zero,10002c7c <___vfprintf_internal_r+0x450>
10002890:	b880030b 	ldhu	r2,12(r23)
10002894:	10c8000c 	andi	r3,r2,8192
10002898:	1800061e 	bne	r3,zero,100028b4 <___vfprintf_internal_r+0x88>
1000289c:	b9001917 	ldw	r4,100(r23)
100028a0:	00f7ffc4 	movi	r3,-8193
100028a4:	10880014 	ori	r2,r2,8192
100028a8:	20c6703a 	and	r3,r4,r3
100028ac:	b880030d 	sth	r2,12(r23)
100028b0:	b8c01915 	stw	r3,100(r23)
100028b4:	10c0020c 	andi	r3,r2,8
100028b8:	1800c326 	beq	r3,zero,10002bc8 <___vfprintf_internal_r+0x39c>
100028bc:	b8c00417 	ldw	r3,16(r23)
100028c0:	1800c126 	beq	r3,zero,10002bc8 <___vfprintf_internal_r+0x39c>
100028c4:	1080068c 	andi	r2,r2,26
100028c8:	00c00284 	movi	r3,10
100028cc:	10c0c626 	beq	r2,r3,10002be8 <___vfprintf_internal_r+0x3bc>
100028d0:	d8c00404 	addi	r3,sp,16
100028d4:	05040074 	movhi	r20,4097
100028d8:	d9001e04 	addi	r4,sp,120
100028dc:	a509d784 	addi	r20,r20,10078
100028e0:	d8c01e15 	stw	r3,120(sp)
100028e4:	d8002015 	stw	zero,128(sp)
100028e8:	d8001f15 	stw	zero,124(sp)
100028ec:	d8003315 	stw	zero,204(sp)
100028f0:	d8003615 	stw	zero,216(sp)
100028f4:	d8003815 	stw	zero,224(sp)
100028f8:	1811883a 	mov	r8,r3
100028fc:	d8003915 	stw	zero,228(sp)
10002900:	d8003a15 	stw	zero,232(sp)
10002904:	d8002f15 	stw	zero,188(sp)
10002908:	d9002815 	stw	r4,160(sp)
1000290c:	a8800007 	ldb	r2,0(r21)
10002910:	10028b26 	beq	r2,zero,10003340 <___vfprintf_internal_r+0xb14>
10002914:	00c00944 	movi	r3,37
10002918:	a823883a 	mov	r17,r21
1000291c:	10c0021e 	bne	r2,r3,10002928 <___vfprintf_internal_r+0xfc>
10002920:	00001406 	br	10002974 <___vfprintf_internal_r+0x148>
10002924:	10c00326 	beq	r2,r3,10002934 <___vfprintf_internal_r+0x108>
10002928:	8c400044 	addi	r17,r17,1
1000292c:	88800007 	ldb	r2,0(r17)
10002930:	103ffc1e 	bne	r2,zero,10002924 <__alt_data_end+0xf8002924>
10002934:	8d61c83a 	sub	r16,r17,r21
10002938:	80000e26 	beq	r16,zero,10002974 <___vfprintf_internal_r+0x148>
1000293c:	d8c02017 	ldw	r3,128(sp)
10002940:	d8801f17 	ldw	r2,124(sp)
10002944:	45400015 	stw	r21,0(r8)
10002948:	1c07883a 	add	r3,r3,r16
1000294c:	10800044 	addi	r2,r2,1
10002950:	d8c02015 	stw	r3,128(sp)
10002954:	44000115 	stw	r16,4(r8)
10002958:	d8801f15 	stw	r2,124(sp)
1000295c:	00c001c4 	movi	r3,7
10002960:	1880a916 	blt	r3,r2,10002c08 <___vfprintf_internal_r+0x3dc>
10002964:	42000204 	addi	r8,r8,8
10002968:	d9402f17 	ldw	r5,188(sp)
1000296c:	2c0b883a 	add	r5,r5,r16
10002970:	d9402f15 	stw	r5,188(sp)
10002974:	88800007 	ldb	r2,0(r17)
10002978:	1000aa26 	beq	r2,zero,10002c24 <___vfprintf_internal_r+0x3f8>
1000297c:	8d400044 	addi	r21,r17,1
10002980:	8c400047 	ldb	r17,1(r17)
10002984:	0021883a 	mov	r16,zero
10002988:	00bfffc4 	movi	r2,-1
1000298c:	0025883a 	mov	r18,zero
10002990:	dc002905 	stb	r16,164(sp)
10002994:	d8002785 	stb	zero,158(sp)
10002998:	d8002b05 	stb	zero,172(sp)
1000299c:	d8802a15 	stw	r2,168(sp)
100029a0:	d8003115 	stw	zero,196(sp)
100029a4:	04c01604 	movi	r19,88
100029a8:	05800244 	movi	r22,9
100029ac:	9021883a 	mov	r16,r18
100029b0:	4039883a 	mov	fp,r8
100029b4:	ad400044 	addi	r21,r21,1
100029b8:	88bff804 	addi	r2,r17,-32
100029bc:	98833236 	bltu	r19,r2,10003688 <___vfprintf_internal_r+0xe5c>
100029c0:	100490ba 	slli	r2,r2,2
100029c4:	00c40034 	movhi	r3,4096
100029c8:	18ca7604 	addi	r3,r3,10712
100029cc:	10c5883a 	add	r2,r2,r3
100029d0:	10800017 	ldw	r2,0(r2)
100029d4:	1000683a 	jmp	r2
100029d8:	10003580 	call	11000358 <_gp+0xfe3e94>
100029dc:	10003688 	cmpgei	zero,r2,218
100029e0:	10003688 	cmpgei	zero,r2,218
100029e4:	100035a0 	cmpeqi	zero,r2,214
100029e8:	10003688 	cmpgei	zero,r2,218
100029ec:	10003688 	cmpgei	zero,r2,218
100029f0:	10003688 	cmpgei	zero,r2,218
100029f4:	10003688 	cmpgei	zero,r2,218
100029f8:	10003688 	cmpgei	zero,r2,218
100029fc:	10003688 	cmpgei	zero,r2,218
10002a00:	10002c88 	cmpgei	zero,r2,178
10002a04:	10003490 	cmplti	zero,r2,210
10002a08:	10003688 	cmpgei	zero,r2,218
10002a0c:	10002b4c 	andi	zero,r2,173
10002a10:	10002cac 	andhi	zero,r2,178
10002a14:	10003688 	cmpgei	zero,r2,218
10002a18:	10002cfc 	xorhi	zero,r2,179
10002a1c:	10002d08 	cmpgei	zero,r2,180
10002a20:	10002d08 	cmpgei	zero,r2,180
10002a24:	10002d08 	cmpgei	zero,r2,180
10002a28:	10002d08 	cmpgei	zero,r2,180
10002a2c:	10002d08 	cmpgei	zero,r2,180
10002a30:	10002d08 	cmpgei	zero,r2,180
10002a34:	10002d08 	cmpgei	zero,r2,180
10002a38:	10002d08 	cmpgei	zero,r2,180
10002a3c:	10002d08 	cmpgei	zero,r2,180
10002a40:	10003688 	cmpgei	zero,r2,218
10002a44:	10003688 	cmpgei	zero,r2,218
10002a48:	10003688 	cmpgei	zero,r2,218
10002a4c:	10003688 	cmpgei	zero,r2,218
10002a50:	10003688 	cmpgei	zero,r2,218
10002a54:	10003688 	cmpgei	zero,r2,218
10002a58:	10003688 	cmpgei	zero,r2,218
10002a5c:	10003688 	cmpgei	zero,r2,218
10002a60:	10003688 	cmpgei	zero,r2,218
10002a64:	10003688 	cmpgei	zero,r2,218
10002a68:	10002d44 	addi	zero,r2,181
10002a6c:	10002e0c 	andi	zero,r2,184
10002a70:	10003688 	cmpgei	zero,r2,218
10002a74:	10002e0c 	andi	zero,r2,184
10002a78:	10003688 	cmpgei	zero,r2,218
10002a7c:	10003688 	cmpgei	zero,r2,218
10002a80:	10003688 	cmpgei	zero,r2,218
10002a84:	10003688 	cmpgei	zero,r2,218
10002a88:	10002eb8 	rdprs	zero,r2,186
10002a8c:	10003688 	cmpgei	zero,r2,218
10002a90:	10003688 	cmpgei	zero,r2,218
10002a94:	10002ec4 	addi	zero,r2,187
10002a98:	10003688 	cmpgei	zero,r2,218
10002a9c:	10003688 	cmpgei	zero,r2,218
10002aa0:	10003688 	cmpgei	zero,r2,218
10002aa4:	10003688 	cmpgei	zero,r2,218
10002aa8:	10003688 	cmpgei	zero,r2,218
10002aac:	10003348 	cmpgei	zero,r2,205
10002ab0:	10003688 	cmpgei	zero,r2,218
10002ab4:	10003688 	cmpgei	zero,r2,218
10002ab8:	100033b4 	orhi	zero,r2,206
10002abc:	10003688 	cmpgei	zero,r2,218
10002ac0:	10003688 	cmpgei	zero,r2,218
10002ac4:	10003688 	cmpgei	zero,r2,218
10002ac8:	10003688 	cmpgei	zero,r2,218
10002acc:	10003688 	cmpgei	zero,r2,218
10002ad0:	10003688 	cmpgei	zero,r2,218
10002ad4:	10003688 	cmpgei	zero,r2,218
10002ad8:	10003688 	cmpgei	zero,r2,218
10002adc:	10003688 	cmpgei	zero,r2,218
10002ae0:	10003688 	cmpgei	zero,r2,218
10002ae4:	1000362c 	andhi	zero,r2,216
10002ae8:	100035ac 	andhi	zero,r2,214
10002aec:	10002e0c 	andi	zero,r2,184
10002af0:	10002e0c 	andi	zero,r2,184
10002af4:	10002e0c 	andi	zero,r2,184
10002af8:	100035cc 	andi	zero,r2,215
10002afc:	100035ac 	andhi	zero,r2,214
10002b00:	10003688 	cmpgei	zero,r2,218
10002b04:	10003688 	cmpgei	zero,r2,218
10002b08:	100035d8 	cmpnei	zero,r2,215
10002b0c:	10003688 	cmpgei	zero,r2,218
10002b10:	100035ec 	andhi	zero,r2,215
10002b14:	10003470 	cmpltui	zero,r2,209
10002b18:	10002b58 	cmpnei	zero,r2,173
10002b1c:	100034a8 	cmpgeui	zero,r2,210
10002b20:	10003688 	cmpgei	zero,r2,218
10002b24:	100034b4 	orhi	zero,r2,210
10002b28:	10003688 	cmpgei	zero,r2,218
10002b2c:	10003518 	cmpnei	zero,r2,212
10002b30:	10003688 	cmpgei	zero,r2,218
10002b34:	10003688 	cmpgei	zero,r2,218
10002b38:	10003538 	rdprs	zero,r2,212
10002b3c:	d8c03117 	ldw	r3,196(sp)
10002b40:	d8802e15 	stw	r2,184(sp)
10002b44:	00c7c83a 	sub	r3,zero,r3
10002b48:	d8c03115 	stw	r3,196(sp)
10002b4c:	84000114 	ori	r16,r16,4
10002b50:	ac400007 	ldb	r17,0(r21)
10002b54:	003f9706 	br	100029b4 <__alt_data_end+0xf80029b4>
10002b58:	00800c04 	movi	r2,48
10002b5c:	d8802705 	stb	r2,156(sp)
10002b60:	00801e04 	movi	r2,120
10002b64:	d8802745 	stb	r2,157(sp)
10002b68:	d9002a17 	ldw	r4,168(sp)
10002b6c:	d8802e17 	ldw	r2,184(sp)
10002b70:	d8002785 	stb	zero,158(sp)
10002b74:	e011883a 	mov	r8,fp
10002b78:	10c00104 	addi	r3,r2,4
10002b7c:	14c00017 	ldw	r19,0(r2)
10002b80:	002d883a 	mov	r22,zero
10002b84:	80800094 	ori	r2,r16,2
10002b88:	2002ca16 	blt	r4,zero,100036b4 <___vfprintf_internal_r+0xe88>
10002b8c:	00bfdfc4 	movi	r2,-129
10002b90:	80a4703a 	and	r18,r16,r2
10002b94:	d8c02e15 	stw	r3,184(sp)
10002b98:	94800094 	ori	r18,r18,2
10002b9c:	9802b41e 	bne	r19,zero,10003670 <___vfprintf_internal_r+0xe44>
10002ba0:	01440074 	movhi	r5,4097
10002ba4:	2949d004 	addi	r5,r5,10048
10002ba8:	d9403915 	stw	r5,228(sp)
10002bac:	04401e04 	movi	r17,120
10002bb0:	d8802a17 	ldw	r2,168(sp)
10002bb4:	0039883a 	mov	fp,zero
10002bb8:	1001fa26 	beq	r2,zero,100033a4 <___vfprintf_internal_r+0xb78>
10002bbc:	0027883a 	mov	r19,zero
10002bc0:	002d883a 	mov	r22,zero
10002bc4:	00021906 	br	1000342c <___vfprintf_internal_r+0xc00>
10002bc8:	d9002d17 	ldw	r4,180(sp)
10002bcc:	b80b883a 	mov	r5,r23
10002bd0:	0004be00 	call	10004be0 <__swsetup_r>
10002bd4:	1005dc1e 	bne	r2,zero,10004348 <___vfprintf_internal_r+0x1b1c>
10002bd8:	b880030b 	ldhu	r2,12(r23)
10002bdc:	00c00284 	movi	r3,10
10002be0:	1080068c 	andi	r2,r2,26
10002be4:	10ff3a1e 	bne	r2,r3,100028d0 <__alt_data_end+0xf80028d0>
10002be8:	b880038f 	ldh	r2,14(r23)
10002bec:	103f3816 	blt	r2,zero,100028d0 <__alt_data_end+0xf80028d0>
10002bf0:	d9c02e17 	ldw	r7,184(sp)
10002bf4:	d9002d17 	ldw	r4,180(sp)
10002bf8:	a80d883a 	mov	r6,r21
10002bfc:	b80b883a 	mov	r5,r23
10002c00:	0004b240 	call	10004b24 <__sbprintf>
10002c04:	00001106 	br	10002c4c <___vfprintf_internal_r+0x420>
10002c08:	d9002d17 	ldw	r4,180(sp)
10002c0c:	d9801e04 	addi	r6,sp,120
10002c10:	b80b883a 	mov	r5,r23
10002c14:	000a0680 	call	1000a068 <__sprint_r>
10002c18:	1000081e 	bne	r2,zero,10002c3c <___vfprintf_internal_r+0x410>
10002c1c:	da000404 	addi	r8,sp,16
10002c20:	003f5106 	br	10002968 <__alt_data_end+0xf8002968>
10002c24:	d8802017 	ldw	r2,128(sp)
10002c28:	10000426 	beq	r2,zero,10002c3c <___vfprintf_internal_r+0x410>
10002c2c:	d9002d17 	ldw	r4,180(sp)
10002c30:	d9801e04 	addi	r6,sp,120
10002c34:	b80b883a 	mov	r5,r23
10002c38:	000a0680 	call	1000a068 <__sprint_r>
10002c3c:	b880030b 	ldhu	r2,12(r23)
10002c40:	1080100c 	andi	r2,r2,64
10002c44:	1005c01e 	bne	r2,zero,10004348 <___vfprintf_internal_r+0x1b1c>
10002c48:	d8802f17 	ldw	r2,188(sp)
10002c4c:	dfc04717 	ldw	ra,284(sp)
10002c50:	df004617 	ldw	fp,280(sp)
10002c54:	ddc04517 	ldw	r23,276(sp)
10002c58:	dd804417 	ldw	r22,272(sp)
10002c5c:	dd404317 	ldw	r21,268(sp)
10002c60:	dd004217 	ldw	r20,264(sp)
10002c64:	dcc04117 	ldw	r19,260(sp)
10002c68:	dc804017 	ldw	r18,256(sp)
10002c6c:	dc403f17 	ldw	r17,252(sp)
10002c70:	dc003e17 	ldw	r16,248(sp)
10002c74:	dec04804 	addi	sp,sp,288
10002c78:	f800283a 	ret
10002c7c:	d9002d17 	ldw	r4,180(sp)
10002c80:	0006bec0 	call	10006bec <__sinit>
10002c84:	003f0206 	br	10002890 <__alt_data_end+0xf8002890>
10002c88:	d9002e17 	ldw	r4,184(sp)
10002c8c:	d9402e17 	ldw	r5,184(sp)
10002c90:	21000017 	ldw	r4,0(r4)
10002c94:	28800104 	addi	r2,r5,4
10002c98:	d9003115 	stw	r4,196(sp)
10002c9c:	203fa716 	blt	r4,zero,10002b3c <__alt_data_end+0xf8002b3c>
10002ca0:	d8802e15 	stw	r2,184(sp)
10002ca4:	ac400007 	ldb	r17,0(r21)
10002ca8:	003f4206 	br	100029b4 <__alt_data_end+0xf80029b4>
10002cac:	ac400007 	ldb	r17,0(r21)
10002cb0:	01000a84 	movi	r4,42
10002cb4:	a8c00044 	addi	r3,r21,1
10002cb8:	89075826 	beq	r17,r4,10004a1c <___vfprintf_internal_r+0x21f0>
10002cbc:	8cbff404 	addi	r18,r17,-48
10002cc0:	b486ae36 	bltu	r22,r18,1000477c <___vfprintf_internal_r+0x1f50>
10002cc4:	0009883a 	mov	r4,zero
10002cc8:	1823883a 	mov	r17,r3
10002ccc:	01400284 	movi	r5,10
10002cd0:	000cc7c0 	call	1000cc7c <__mulsi3>
10002cd4:	88c00007 	ldb	r3,0(r17)
10002cd8:	1489883a 	add	r4,r2,r18
10002cdc:	8d400044 	addi	r21,r17,1
10002ce0:	1cbff404 	addi	r18,r3,-48
10002ce4:	a823883a 	mov	r17,r21
10002ce8:	b4bff82e 	bgeu	r22,r18,10002ccc <__alt_data_end+0xf8002ccc>
10002cec:	1823883a 	mov	r17,r3
10002cf0:	2005f616 	blt	r4,zero,100044cc <___vfprintf_internal_r+0x1ca0>
10002cf4:	d9002a15 	stw	r4,168(sp)
10002cf8:	003f2f06 	br	100029b8 <__alt_data_end+0xf80029b8>
10002cfc:	84002014 	ori	r16,r16,128
10002d00:	ac400007 	ldb	r17,0(r21)
10002d04:	003f2b06 	br	100029b4 <__alt_data_end+0xf80029b4>
10002d08:	8cbff404 	addi	r18,r17,-48
10002d0c:	d8003115 	stw	zero,196(sp)
10002d10:	0009883a 	mov	r4,zero
10002d14:	a823883a 	mov	r17,r21
10002d18:	01400284 	movi	r5,10
10002d1c:	000cc7c0 	call	1000cc7c <__mulsi3>
10002d20:	88c00007 	ldb	r3,0(r17)
10002d24:	9089883a 	add	r4,r18,r2
10002d28:	ad400044 	addi	r21,r21,1
10002d2c:	1cbff404 	addi	r18,r3,-48
10002d30:	a823883a 	mov	r17,r21
10002d34:	b4bff82e 	bgeu	r22,r18,10002d18 <__alt_data_end+0xf8002d18>
10002d38:	1823883a 	mov	r17,r3
10002d3c:	d9003115 	stw	r4,196(sp)
10002d40:	003f1d06 	br	100029b8 <__alt_data_end+0xf80029b8>
10002d44:	8025883a 	mov	r18,r16
10002d48:	dc002903 	ldbu	r16,164(sp)
10002d4c:	e011883a 	mov	r8,fp
10002d50:	84003fcc 	andi	r16,r16,255
10002d54:	8007531e 	bne	r16,zero,10004aa4 <___vfprintf_internal_r+0x2278>
10002d58:	94800414 	ori	r18,r18,16
10002d5c:	9080080c 	andi	r2,r18,32
10002d60:	1003a326 	beq	r2,zero,10003bf0 <___vfprintf_internal_r+0x13c4>
10002d64:	d9002e17 	ldw	r4,184(sp)
10002d68:	20800117 	ldw	r2,4(r4)
10002d6c:	24c00017 	ldw	r19,0(r4)
10002d70:	21000204 	addi	r4,r4,8
10002d74:	d9002e15 	stw	r4,184(sp)
10002d78:	102d883a 	mov	r22,r2
10002d7c:	10047316 	blt	r2,zero,10003f4c <___vfprintf_internal_r+0x1720>
10002d80:	d9002a17 	ldw	r4,168(sp)
10002d84:	df002783 	ldbu	fp,158(sp)
10002d88:	2003e416 	blt	r4,zero,10003d1c <___vfprintf_internal_r+0x14f0>
10002d8c:	00ffdfc4 	movi	r3,-129
10002d90:	9d84b03a 	or	r2,r19,r22
10002d94:	90e4703a 	and	r18,r18,r3
10002d98:	10018026 	beq	r2,zero,1000339c <___vfprintf_internal_r+0xb70>
10002d9c:	b003ab26 	beq	r22,zero,10003c4c <___vfprintf_internal_r+0x1420>
10002da0:	dc402915 	stw	r17,164(sp)
10002da4:	dc001e04 	addi	r16,sp,120
10002da8:	b023883a 	mov	r17,r22
10002dac:	402d883a 	mov	r22,r8
10002db0:	9809883a 	mov	r4,r19
10002db4:	880b883a 	mov	r5,r17
10002db8:	01800284 	movi	r6,10
10002dbc:	000f883a 	mov	r7,zero
10002dc0:	000c6b80 	call	1000c6b8 <__umoddi3>
10002dc4:	10800c04 	addi	r2,r2,48
10002dc8:	843fffc4 	addi	r16,r16,-1
10002dcc:	9809883a 	mov	r4,r19
10002dd0:	880b883a 	mov	r5,r17
10002dd4:	80800005 	stb	r2,0(r16)
10002dd8:	01800284 	movi	r6,10
10002ddc:	000f883a 	mov	r7,zero
10002de0:	000c0bc0 	call	1000c0bc <__udivdi3>
10002de4:	1027883a 	mov	r19,r2
10002de8:	10c4b03a 	or	r2,r2,r3
10002dec:	1823883a 	mov	r17,r3
10002df0:	103fef1e 	bne	r2,zero,10002db0 <__alt_data_end+0xf8002db0>
10002df4:	d8c02817 	ldw	r3,160(sp)
10002df8:	dc402917 	ldw	r17,164(sp)
10002dfc:	b011883a 	mov	r8,r22
10002e00:	1c07c83a 	sub	r3,r3,r16
10002e04:	d8c02b15 	stw	r3,172(sp)
10002e08:	00005f06 	br	10002f88 <___vfprintf_internal_r+0x75c>
10002e0c:	8025883a 	mov	r18,r16
10002e10:	dc002903 	ldbu	r16,164(sp)
10002e14:	e011883a 	mov	r8,fp
10002e18:	84003fcc 	andi	r16,r16,255
10002e1c:	80071e1e 	bne	r16,zero,10004a98 <___vfprintf_internal_r+0x226c>
10002e20:	9080020c 	andi	r2,r18,8
10002e24:	1004af26 	beq	r2,zero,100040e4 <___vfprintf_internal_r+0x18b8>
10002e28:	d9002e17 	ldw	r4,184(sp)
10002e2c:	d9402e17 	ldw	r5,184(sp)
10002e30:	d8802e17 	ldw	r2,184(sp)
10002e34:	21000017 	ldw	r4,0(r4)
10002e38:	29400117 	ldw	r5,4(r5)
10002e3c:	10800204 	addi	r2,r2,8
10002e40:	d9003615 	stw	r4,216(sp)
10002e44:	d9403815 	stw	r5,224(sp)
10002e48:	d8802e15 	stw	r2,184(sp)
10002e4c:	d9003617 	ldw	r4,216(sp)
10002e50:	d9403817 	ldw	r5,224(sp)
10002e54:	da003d15 	stw	r8,244(sp)
10002e58:	04000044 	movi	r16,1
10002e5c:	0009c8c0 	call	10009c8c <__fpclassifyd>
10002e60:	da003d17 	ldw	r8,244(sp)
10002e64:	1404441e 	bne	r2,r16,10003f78 <___vfprintf_internal_r+0x174c>
10002e68:	d9003617 	ldw	r4,216(sp)
10002e6c:	d9403817 	ldw	r5,224(sp)
10002e70:	000d883a 	mov	r6,zero
10002e74:	000f883a 	mov	r7,zero
10002e78:	000e0840 	call	1000e084 <__ledf2>
10002e7c:	da003d17 	ldw	r8,244(sp)
10002e80:	1005e316 	blt	r2,zero,10004610 <___vfprintf_internal_r+0x1de4>
10002e84:	df002783 	ldbu	fp,158(sp)
10002e88:	008011c4 	movi	r2,71
10002e8c:	1445580e 	bge	r2,r17,100043f0 <___vfprintf_internal_r+0x1bc4>
10002e90:	04040074 	movhi	r16,4097
10002e94:	8409c804 	addi	r16,r16,10016
10002e98:	00c000c4 	movi	r3,3
10002e9c:	00bfdfc4 	movi	r2,-129
10002ea0:	d8c02915 	stw	r3,164(sp)
10002ea4:	90a4703a 	and	r18,r18,r2
10002ea8:	d8c02b15 	stw	r3,172(sp)
10002eac:	d8002a15 	stw	zero,168(sp)
10002eb0:	d8003215 	stw	zero,200(sp)
10002eb4:	00003a06 	br	10002fa0 <___vfprintf_internal_r+0x774>
10002eb8:	84000214 	ori	r16,r16,8
10002ebc:	ac400007 	ldb	r17,0(r21)
10002ec0:	003ebc06 	br	100029b4 <__alt_data_end+0xf80029b4>
10002ec4:	8025883a 	mov	r18,r16
10002ec8:	dc002903 	ldbu	r16,164(sp)
10002ecc:	e011883a 	mov	r8,fp
10002ed0:	84003fcc 	andi	r16,r16,255
10002ed4:	8007001e 	bne	r16,zero,10004ad8 <___vfprintf_internal_r+0x22ac>
10002ed8:	94800414 	ori	r18,r18,16
10002edc:	9080080c 	andi	r2,r18,32
10002ee0:	1002fa26 	beq	r2,zero,10003acc <___vfprintf_internal_r+0x12a0>
10002ee4:	d9002e17 	ldw	r4,184(sp)
10002ee8:	d9402a17 	ldw	r5,168(sp)
10002eec:	d8002785 	stb	zero,158(sp)
10002ef0:	20800204 	addi	r2,r4,8
10002ef4:	24c00017 	ldw	r19,0(r4)
10002ef8:	25800117 	ldw	r22,4(r4)
10002efc:	2804b116 	blt	r5,zero,100041c4 <___vfprintf_internal_r+0x1998>
10002f00:	013fdfc4 	movi	r4,-129
10002f04:	9d86b03a 	or	r3,r19,r22
10002f08:	d8802e15 	stw	r2,184(sp)
10002f0c:	9124703a 	and	r18,r18,r4
10002f10:	1802fb1e 	bne	r3,zero,10003b00 <___vfprintf_internal_r+0x12d4>
10002f14:	d8c02a17 	ldw	r3,168(sp)
10002f18:	0039883a 	mov	fp,zero
10002f1c:	1805e526 	beq	r3,zero,100046b4 <___vfprintf_internal_r+0x1e88>
10002f20:	0027883a 	mov	r19,zero
10002f24:	002d883a 	mov	r22,zero
10002f28:	dc001e04 	addi	r16,sp,120
10002f2c:	9806d0fa 	srli	r3,r19,3
10002f30:	b008977a 	slli	r4,r22,29
10002f34:	b02cd0fa 	srli	r22,r22,3
10002f38:	9cc001cc 	andi	r19,r19,7
10002f3c:	98800c04 	addi	r2,r19,48
10002f40:	843fffc4 	addi	r16,r16,-1
10002f44:	20e6b03a 	or	r19,r4,r3
10002f48:	80800005 	stb	r2,0(r16)
10002f4c:	9d86b03a 	or	r3,r19,r22
10002f50:	183ff61e 	bne	r3,zero,10002f2c <__alt_data_end+0xf8002f2c>
10002f54:	90c0004c 	andi	r3,r18,1
10002f58:	18014126 	beq	r3,zero,10003460 <___vfprintf_internal_r+0xc34>
10002f5c:	10803fcc 	andi	r2,r2,255
10002f60:	1080201c 	xori	r2,r2,128
10002f64:	10bfe004 	addi	r2,r2,-128
10002f68:	00c00c04 	movi	r3,48
10002f6c:	10c13c26 	beq	r2,r3,10003460 <___vfprintf_internal_r+0xc34>
10002f70:	80ffffc5 	stb	r3,-1(r16)
10002f74:	d8c02817 	ldw	r3,160(sp)
10002f78:	80bfffc4 	addi	r2,r16,-1
10002f7c:	1021883a 	mov	r16,r2
10002f80:	1887c83a 	sub	r3,r3,r2
10002f84:	d8c02b15 	stw	r3,172(sp)
10002f88:	d8802b17 	ldw	r2,172(sp)
10002f8c:	d9002a17 	ldw	r4,168(sp)
10002f90:	1100010e 	bge	r2,r4,10002f98 <___vfprintf_internal_r+0x76c>
10002f94:	2005883a 	mov	r2,r4
10002f98:	d8802915 	stw	r2,164(sp)
10002f9c:	d8003215 	stw	zero,200(sp)
10002fa0:	e7003fcc 	andi	fp,fp,255
10002fa4:	e700201c 	xori	fp,fp,128
10002fa8:	e73fe004 	addi	fp,fp,-128
10002fac:	e0000326 	beq	fp,zero,10002fbc <___vfprintf_internal_r+0x790>
10002fb0:	d8c02917 	ldw	r3,164(sp)
10002fb4:	18c00044 	addi	r3,r3,1
10002fb8:	d8c02915 	stw	r3,164(sp)
10002fbc:	90c0008c 	andi	r3,r18,2
10002fc0:	d8c02c15 	stw	r3,176(sp)
10002fc4:	18000326 	beq	r3,zero,10002fd4 <___vfprintf_internal_r+0x7a8>
10002fc8:	d8c02917 	ldw	r3,164(sp)
10002fcc:	18c00084 	addi	r3,r3,2
10002fd0:	d8c02915 	stw	r3,164(sp)
10002fd4:	90c0210c 	andi	r3,r18,132
10002fd8:	d8c03015 	stw	r3,192(sp)
10002fdc:	1801c51e 	bne	r3,zero,100036f4 <___vfprintf_internal_r+0xec8>
10002fe0:	d9003117 	ldw	r4,196(sp)
10002fe4:	d8c02917 	ldw	r3,164(sp)
10002fe8:	20e7c83a 	sub	r19,r4,r3
10002fec:	04c1c10e 	bge	zero,r19,100036f4 <___vfprintf_internal_r+0xec8>
10002ff0:	02400404 	movi	r9,16
10002ff4:	d8c02017 	ldw	r3,128(sp)
10002ff8:	d8801f17 	ldw	r2,124(sp)
10002ffc:	4cc52f0e 	bge	r9,r19,100044bc <___vfprintf_internal_r+0x1c90>
10003000:	01440074 	movhi	r5,4097
10003004:	2949db84 	addi	r5,r5,10094
10003008:	dc403b15 	stw	r17,236(sp)
1000300c:	d9403515 	stw	r5,212(sp)
10003010:	9823883a 	mov	r17,r19
10003014:	482d883a 	mov	r22,r9
10003018:	9027883a 	mov	r19,r18
1000301c:	070001c4 	movi	fp,7
10003020:	8025883a 	mov	r18,r16
10003024:	dc002d17 	ldw	r16,180(sp)
10003028:	00000306 	br	10003038 <___vfprintf_internal_r+0x80c>
1000302c:	8c7ffc04 	addi	r17,r17,-16
10003030:	42000204 	addi	r8,r8,8
10003034:	b440130e 	bge	r22,r17,10003084 <___vfprintf_internal_r+0x858>
10003038:	01040074 	movhi	r4,4097
1000303c:	18c00404 	addi	r3,r3,16
10003040:	10800044 	addi	r2,r2,1
10003044:	2109db84 	addi	r4,r4,10094
10003048:	41000015 	stw	r4,0(r8)
1000304c:	45800115 	stw	r22,4(r8)
10003050:	d8c02015 	stw	r3,128(sp)
10003054:	d8801f15 	stw	r2,124(sp)
10003058:	e0bff40e 	bge	fp,r2,1000302c <__alt_data_end+0xf800302c>
1000305c:	d9801e04 	addi	r6,sp,120
10003060:	b80b883a 	mov	r5,r23
10003064:	8009883a 	mov	r4,r16
10003068:	000a0680 	call	1000a068 <__sprint_r>
1000306c:	103ef31e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
10003070:	8c7ffc04 	addi	r17,r17,-16
10003074:	d8c02017 	ldw	r3,128(sp)
10003078:	d8801f17 	ldw	r2,124(sp)
1000307c:	da000404 	addi	r8,sp,16
10003080:	b47fed16 	blt	r22,r17,10003038 <__alt_data_end+0xf8003038>
10003084:	9021883a 	mov	r16,r18
10003088:	9825883a 	mov	r18,r19
1000308c:	8827883a 	mov	r19,r17
10003090:	dc403b17 	ldw	r17,236(sp)
10003094:	d9403517 	ldw	r5,212(sp)
10003098:	98c7883a 	add	r3,r19,r3
1000309c:	10800044 	addi	r2,r2,1
100030a0:	41400015 	stw	r5,0(r8)
100030a4:	44c00115 	stw	r19,4(r8)
100030a8:	d8c02015 	stw	r3,128(sp)
100030ac:	d8801f15 	stw	r2,124(sp)
100030b0:	010001c4 	movi	r4,7
100030b4:	2082c516 	blt	r4,r2,10003bcc <___vfprintf_internal_r+0x13a0>
100030b8:	df002787 	ldb	fp,158(sp)
100030bc:	42000204 	addi	r8,r8,8
100030c0:	e0000c26 	beq	fp,zero,100030f4 <___vfprintf_internal_r+0x8c8>
100030c4:	d8801f17 	ldw	r2,124(sp)
100030c8:	d9002784 	addi	r4,sp,158
100030cc:	18c00044 	addi	r3,r3,1
100030d0:	10800044 	addi	r2,r2,1
100030d4:	41000015 	stw	r4,0(r8)
100030d8:	01000044 	movi	r4,1
100030dc:	41000115 	stw	r4,4(r8)
100030e0:	d8c02015 	stw	r3,128(sp)
100030e4:	d8801f15 	stw	r2,124(sp)
100030e8:	010001c4 	movi	r4,7
100030ec:	20825e16 	blt	r4,r2,10003a68 <___vfprintf_internal_r+0x123c>
100030f0:	42000204 	addi	r8,r8,8
100030f4:	d8802c17 	ldw	r2,176(sp)
100030f8:	10000c26 	beq	r2,zero,1000312c <___vfprintf_internal_r+0x900>
100030fc:	d8801f17 	ldw	r2,124(sp)
10003100:	d9002704 	addi	r4,sp,156
10003104:	18c00084 	addi	r3,r3,2
10003108:	10800044 	addi	r2,r2,1
1000310c:	41000015 	stw	r4,0(r8)
10003110:	01000084 	movi	r4,2
10003114:	41000115 	stw	r4,4(r8)
10003118:	d8c02015 	stw	r3,128(sp)
1000311c:	d8801f15 	stw	r2,124(sp)
10003120:	010001c4 	movi	r4,7
10003124:	20825816 	blt	r4,r2,10003a88 <___vfprintf_internal_r+0x125c>
10003128:	42000204 	addi	r8,r8,8
1000312c:	d9003017 	ldw	r4,192(sp)
10003130:	00802004 	movi	r2,128
10003134:	2081bb26 	beq	r4,r2,10003824 <___vfprintf_internal_r+0xff8>
10003138:	d9402a17 	ldw	r5,168(sp)
1000313c:	d8802b17 	ldw	r2,172(sp)
10003140:	28adc83a 	sub	r22,r5,r2
10003144:	0580310e 	bge	zero,r22,1000320c <___vfprintf_internal_r+0x9e0>
10003148:	07000404 	movi	fp,16
1000314c:	d8801f17 	ldw	r2,124(sp)
10003150:	e584360e 	bge	fp,r22,1000422c <___vfprintf_internal_r+0x1a00>
10003154:	01440074 	movhi	r5,4097
10003158:	2949d784 	addi	r5,r5,10078
1000315c:	dc402a15 	stw	r17,168(sp)
10003160:	d9402c15 	stw	r5,176(sp)
10003164:	b023883a 	mov	r17,r22
10003168:	04c001c4 	movi	r19,7
1000316c:	a82d883a 	mov	r22,r21
10003170:	902b883a 	mov	r21,r18
10003174:	8025883a 	mov	r18,r16
10003178:	dc002d17 	ldw	r16,180(sp)
1000317c:	00000306 	br	1000318c <___vfprintf_internal_r+0x960>
10003180:	8c7ffc04 	addi	r17,r17,-16
10003184:	42000204 	addi	r8,r8,8
10003188:	e440110e 	bge	fp,r17,100031d0 <___vfprintf_internal_r+0x9a4>
1000318c:	18c00404 	addi	r3,r3,16
10003190:	10800044 	addi	r2,r2,1
10003194:	45000015 	stw	r20,0(r8)
10003198:	47000115 	stw	fp,4(r8)
1000319c:	d8c02015 	stw	r3,128(sp)
100031a0:	d8801f15 	stw	r2,124(sp)
100031a4:	98bff60e 	bge	r19,r2,10003180 <__alt_data_end+0xf8003180>
100031a8:	d9801e04 	addi	r6,sp,120
100031ac:	b80b883a 	mov	r5,r23
100031b0:	8009883a 	mov	r4,r16
100031b4:	000a0680 	call	1000a068 <__sprint_r>
100031b8:	103ea01e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
100031bc:	8c7ffc04 	addi	r17,r17,-16
100031c0:	d8c02017 	ldw	r3,128(sp)
100031c4:	d8801f17 	ldw	r2,124(sp)
100031c8:	da000404 	addi	r8,sp,16
100031cc:	e47fef16 	blt	fp,r17,1000318c <__alt_data_end+0xf800318c>
100031d0:	9021883a 	mov	r16,r18
100031d4:	a825883a 	mov	r18,r21
100031d8:	b02b883a 	mov	r21,r22
100031dc:	882d883a 	mov	r22,r17
100031e0:	dc402a17 	ldw	r17,168(sp)
100031e4:	d9002c17 	ldw	r4,176(sp)
100031e8:	1d87883a 	add	r3,r3,r22
100031ec:	10800044 	addi	r2,r2,1
100031f0:	41000015 	stw	r4,0(r8)
100031f4:	45800115 	stw	r22,4(r8)
100031f8:	d8c02015 	stw	r3,128(sp)
100031fc:	d8801f15 	stw	r2,124(sp)
10003200:	010001c4 	movi	r4,7
10003204:	20821016 	blt	r4,r2,10003a48 <___vfprintf_internal_r+0x121c>
10003208:	42000204 	addi	r8,r8,8
1000320c:	9080400c 	andi	r2,r18,256
10003210:	10013a1e 	bne	r2,zero,100036fc <___vfprintf_internal_r+0xed0>
10003214:	d9402b17 	ldw	r5,172(sp)
10003218:	d8801f17 	ldw	r2,124(sp)
1000321c:	44000015 	stw	r16,0(r8)
10003220:	1947883a 	add	r3,r3,r5
10003224:	10800044 	addi	r2,r2,1
10003228:	41400115 	stw	r5,4(r8)
1000322c:	d8c02015 	stw	r3,128(sp)
10003230:	d8801f15 	stw	r2,124(sp)
10003234:	010001c4 	movi	r4,7
10003238:	2081f516 	blt	r4,r2,10003a10 <___vfprintf_internal_r+0x11e4>
1000323c:	42000204 	addi	r8,r8,8
10003240:	9480010c 	andi	r18,r18,4
10003244:	90003226 	beq	r18,zero,10003310 <___vfprintf_internal_r+0xae4>
10003248:	d9403117 	ldw	r5,196(sp)
1000324c:	d8802917 	ldw	r2,164(sp)
10003250:	28a1c83a 	sub	r16,r5,r2
10003254:	04002e0e 	bge	zero,r16,10003310 <___vfprintf_internal_r+0xae4>
10003258:	04400404 	movi	r17,16
1000325c:	d8801f17 	ldw	r2,124(sp)
10003260:	8c04c40e 	bge	r17,r16,10004574 <___vfprintf_internal_r+0x1d48>
10003264:	01440074 	movhi	r5,4097
10003268:	2949db84 	addi	r5,r5,10094
1000326c:	d9403515 	stw	r5,212(sp)
10003270:	048001c4 	movi	r18,7
10003274:	dcc02d17 	ldw	r19,180(sp)
10003278:	00000306 	br	10003288 <___vfprintf_internal_r+0xa5c>
1000327c:	843ffc04 	addi	r16,r16,-16
10003280:	42000204 	addi	r8,r8,8
10003284:	8c00130e 	bge	r17,r16,100032d4 <___vfprintf_internal_r+0xaa8>
10003288:	01040074 	movhi	r4,4097
1000328c:	18c00404 	addi	r3,r3,16
10003290:	10800044 	addi	r2,r2,1
10003294:	2109db84 	addi	r4,r4,10094
10003298:	41000015 	stw	r4,0(r8)
1000329c:	44400115 	stw	r17,4(r8)
100032a0:	d8c02015 	stw	r3,128(sp)
100032a4:	d8801f15 	stw	r2,124(sp)
100032a8:	90bff40e 	bge	r18,r2,1000327c <__alt_data_end+0xf800327c>
100032ac:	d9801e04 	addi	r6,sp,120
100032b0:	b80b883a 	mov	r5,r23
100032b4:	9809883a 	mov	r4,r19
100032b8:	000a0680 	call	1000a068 <__sprint_r>
100032bc:	103e5f1e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
100032c0:	843ffc04 	addi	r16,r16,-16
100032c4:	d8c02017 	ldw	r3,128(sp)
100032c8:	d8801f17 	ldw	r2,124(sp)
100032cc:	da000404 	addi	r8,sp,16
100032d0:	8c3fed16 	blt	r17,r16,10003288 <__alt_data_end+0xf8003288>
100032d4:	d9403517 	ldw	r5,212(sp)
100032d8:	1c07883a 	add	r3,r3,r16
100032dc:	10800044 	addi	r2,r2,1
100032e0:	41400015 	stw	r5,0(r8)
100032e4:	44000115 	stw	r16,4(r8)
100032e8:	d8c02015 	stw	r3,128(sp)
100032ec:	d8801f15 	stw	r2,124(sp)
100032f0:	010001c4 	movi	r4,7
100032f4:	2080060e 	bge	r4,r2,10003310 <___vfprintf_internal_r+0xae4>
100032f8:	d9002d17 	ldw	r4,180(sp)
100032fc:	d9801e04 	addi	r6,sp,120
10003300:	b80b883a 	mov	r5,r23
10003304:	000a0680 	call	1000a068 <__sprint_r>
10003308:	103e4c1e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
1000330c:	d8c02017 	ldw	r3,128(sp)
10003310:	d8803117 	ldw	r2,196(sp)
10003314:	d9002917 	ldw	r4,164(sp)
10003318:	1100010e 	bge	r2,r4,10003320 <___vfprintf_internal_r+0xaf4>
1000331c:	2005883a 	mov	r2,r4
10003320:	d9402f17 	ldw	r5,188(sp)
10003324:	288b883a 	add	r5,r5,r2
10003328:	d9402f15 	stw	r5,188(sp)
1000332c:	1801c01e 	bne	r3,zero,10003a30 <___vfprintf_internal_r+0x1204>
10003330:	a8800007 	ldb	r2,0(r21)
10003334:	d8001f15 	stw	zero,124(sp)
10003338:	da000404 	addi	r8,sp,16
1000333c:	103d751e 	bne	r2,zero,10002914 <__alt_data_end+0xf8002914>
10003340:	a823883a 	mov	r17,r21
10003344:	003d8b06 	br	10002974 <__alt_data_end+0xf8002974>
10003348:	8025883a 	mov	r18,r16
1000334c:	dc002903 	ldbu	r16,164(sp)
10003350:	e011883a 	mov	r8,fp
10003354:	84003fcc 	andi	r16,r16,255
10003358:	8005e51e 	bne	r16,zero,10004af0 <___vfprintf_internal_r+0x22c4>
1000335c:	94800414 	ori	r18,r18,16
10003360:	9080080c 	andi	r2,r18,32
10003364:	10022b26 	beq	r2,zero,10003c14 <___vfprintf_internal_r+0x13e8>
10003368:	d9002e17 	ldw	r4,184(sp)
1000336c:	d9402a17 	ldw	r5,168(sp)
10003370:	d8002785 	stb	zero,158(sp)
10003374:	20c00204 	addi	r3,r4,8
10003378:	24c00017 	ldw	r19,0(r4)
1000337c:	25800117 	ldw	r22,4(r4)
10003380:	28042e16 	blt	r5,zero,1000443c <___vfprintf_internal_r+0x1c10>
10003384:	013fdfc4 	movi	r4,-129
10003388:	9d84b03a 	or	r2,r19,r22
1000338c:	d8c02e15 	stw	r3,184(sp)
10003390:	9124703a 	and	r18,r18,r4
10003394:	0039883a 	mov	fp,zero
10003398:	103e801e 	bne	r2,zero,10002d9c <__alt_data_end+0xf8002d9c>
1000339c:	d9002a17 	ldw	r4,168(sp)
100033a0:	2002e01e 	bne	r4,zero,10003f24 <___vfprintf_internal_r+0x16f8>
100033a4:	d8002a15 	stw	zero,168(sp)
100033a8:	d8002b15 	stw	zero,172(sp)
100033ac:	dc001e04 	addi	r16,sp,120
100033b0:	003ef506 	br	10002f88 <__alt_data_end+0xf8002f88>
100033b4:	8025883a 	mov	r18,r16
100033b8:	dc002903 	ldbu	r16,164(sp)
100033bc:	e011883a 	mov	r8,fp
100033c0:	84003fcc 	andi	r16,r16,255
100033c4:	8005ba1e 	bne	r16,zero,10004ab0 <___vfprintf_internal_r+0x2284>
100033c8:	01040074 	movhi	r4,4097
100033cc:	2109cb04 	addi	r4,r4,10028
100033d0:	d9003915 	stw	r4,228(sp)
100033d4:	9080080c 	andi	r2,r18,32
100033d8:	10006126 	beq	r2,zero,10003560 <___vfprintf_internal_r+0xd34>
100033dc:	d9402e17 	ldw	r5,184(sp)
100033e0:	2cc00017 	ldw	r19,0(r5)
100033e4:	2d800117 	ldw	r22,4(r5)
100033e8:	29400204 	addi	r5,r5,8
100033ec:	d9402e15 	stw	r5,184(sp)
100033f0:	9080004c 	andi	r2,r18,1
100033f4:	1001ac26 	beq	r2,zero,10003aa8 <___vfprintf_internal_r+0x127c>
100033f8:	9d84b03a 	or	r2,r19,r22
100033fc:	10038526 	beq	r2,zero,10004214 <___vfprintf_internal_r+0x19e8>
10003400:	d8c02a17 	ldw	r3,168(sp)
10003404:	00800c04 	movi	r2,48
10003408:	d8802705 	stb	r2,156(sp)
1000340c:	dc402745 	stb	r17,157(sp)
10003410:	d8002785 	stb	zero,158(sp)
10003414:	90800094 	ori	r2,r18,2
10003418:	18047916 	blt	r3,zero,10004600 <___vfprintf_internal_r+0x1dd4>
1000341c:	00bfdfc4 	movi	r2,-129
10003420:	90a4703a 	and	r18,r18,r2
10003424:	94800094 	ori	r18,r18,2
10003428:	0039883a 	mov	fp,zero
1000342c:	d9003917 	ldw	r4,228(sp)
10003430:	dc001e04 	addi	r16,sp,120
10003434:	988003cc 	andi	r2,r19,15
10003438:	b006973a 	slli	r3,r22,28
1000343c:	2085883a 	add	r2,r4,r2
10003440:	9826d13a 	srli	r19,r19,4
10003444:	10800003 	ldbu	r2,0(r2)
10003448:	b02cd13a 	srli	r22,r22,4
1000344c:	843fffc4 	addi	r16,r16,-1
10003450:	1ce6b03a 	or	r19,r3,r19
10003454:	80800005 	stb	r2,0(r16)
10003458:	9d84b03a 	or	r2,r19,r22
1000345c:	103ff51e 	bne	r2,zero,10003434 <__alt_data_end+0xf8003434>
10003460:	d8c02817 	ldw	r3,160(sp)
10003464:	1c07c83a 	sub	r3,r3,r16
10003468:	d8c02b15 	stw	r3,172(sp)
1000346c:	003ec606 	br	10002f88 <__alt_data_end+0xf8002f88>
10003470:	8025883a 	mov	r18,r16
10003474:	dc002903 	ldbu	r16,164(sp)
10003478:	e011883a 	mov	r8,fp
1000347c:	84003fcc 	andi	r16,r16,255
10003480:	803e9626 	beq	r16,zero,10002edc <__alt_data_end+0xf8002edc>
10003484:	d8c02b03 	ldbu	r3,172(sp)
10003488:	d8c02785 	stb	r3,158(sp)
1000348c:	003e9306 	br	10002edc <__alt_data_end+0xf8002edc>
10003490:	00c00044 	movi	r3,1
10003494:	d8c02905 	stb	r3,164(sp)
10003498:	00c00ac4 	movi	r3,43
1000349c:	d8c02b05 	stb	r3,172(sp)
100034a0:	ac400007 	ldb	r17,0(r21)
100034a4:	003d4306 	br	100029b4 <__alt_data_end+0xf80029b4>
100034a8:	84000814 	ori	r16,r16,32
100034ac:	ac400007 	ldb	r17,0(r21)
100034b0:	003d4006 	br	100029b4 <__alt_data_end+0xf80029b4>
100034b4:	d8802e17 	ldw	r2,184(sp)
100034b8:	8025883a 	mov	r18,r16
100034bc:	d8002785 	stb	zero,158(sp)
100034c0:	14000017 	ldw	r16,0(r2)
100034c4:	e011883a 	mov	r8,fp
100034c8:	14c00104 	addi	r19,r2,4
100034cc:	80042d26 	beq	r16,zero,10004584 <___vfprintf_internal_r+0x1d58>
100034d0:	d8c02a17 	ldw	r3,168(sp)
100034d4:	1803e416 	blt	r3,zero,10004468 <___vfprintf_internal_r+0x1c3c>
100034d8:	180d883a 	mov	r6,r3
100034dc:	000b883a 	mov	r5,zero
100034e0:	8009883a 	mov	r4,r16
100034e4:	df003d15 	stw	fp,244(sp)
100034e8:	00081c00 	call	100081c0 <memchr>
100034ec:	da003d17 	ldw	r8,244(sp)
100034f0:	10046826 	beq	r2,zero,10004694 <___vfprintf_internal_r+0x1e68>
100034f4:	1405c83a 	sub	r2,r2,r16
100034f8:	d8802b15 	stw	r2,172(sp)
100034fc:	1003e016 	blt	r2,zero,10004480 <___vfprintf_internal_r+0x1c54>
10003500:	df002783 	ldbu	fp,158(sp)
10003504:	d8802915 	stw	r2,164(sp)
10003508:	dcc02e15 	stw	r19,184(sp)
1000350c:	d8002a15 	stw	zero,168(sp)
10003510:	d8003215 	stw	zero,200(sp)
10003514:	003ea206 	br	10002fa0 <__alt_data_end+0xf8002fa0>
10003518:	8025883a 	mov	r18,r16
1000351c:	dc002903 	ldbu	r16,164(sp)
10003520:	e011883a 	mov	r8,fp
10003524:	84003fcc 	andi	r16,r16,255
10003528:	803f8d26 	beq	r16,zero,10003360 <__alt_data_end+0xf8003360>
1000352c:	d8c02b03 	ldbu	r3,172(sp)
10003530:	d8c02785 	stb	r3,158(sp)
10003534:	003f8a06 	br	10003360 <__alt_data_end+0xf8003360>
10003538:	8025883a 	mov	r18,r16
1000353c:	dc002903 	ldbu	r16,164(sp)
10003540:	e011883a 	mov	r8,fp
10003544:	84003fcc 	andi	r16,r16,255
10003548:	8005661e 	bne	r16,zero,10004ae4 <___vfprintf_internal_r+0x22b8>
1000354c:	01040074 	movhi	r4,4097
10003550:	2109d004 	addi	r4,r4,10048
10003554:	d9003915 	stw	r4,228(sp)
10003558:	9080080c 	andi	r2,r18,32
1000355c:	103f9f1e 	bne	r2,zero,100033dc <__alt_data_end+0xf80033dc>
10003560:	9080040c 	andi	r2,r18,16
10003564:	1002eb26 	beq	r2,zero,10004114 <___vfprintf_internal_r+0x18e8>
10003568:	d8802e17 	ldw	r2,184(sp)
1000356c:	002d883a 	mov	r22,zero
10003570:	14c00017 	ldw	r19,0(r2)
10003574:	10800104 	addi	r2,r2,4
10003578:	d8802e15 	stw	r2,184(sp)
1000357c:	003f9c06 	br	100033f0 <__alt_data_end+0xf80033f0>
10003580:	d8802b07 	ldb	r2,172(sp)
10003584:	1002e11e 	bne	r2,zero,1000410c <___vfprintf_internal_r+0x18e0>
10003588:	00c00044 	movi	r3,1
1000358c:	d8c02905 	stb	r3,164(sp)
10003590:	00c00804 	movi	r3,32
10003594:	d8c02b05 	stb	r3,172(sp)
10003598:	ac400007 	ldb	r17,0(r21)
1000359c:	003d0506 	br	100029b4 <__alt_data_end+0xf80029b4>
100035a0:	84000054 	ori	r16,r16,1
100035a4:	ac400007 	ldb	r17,0(r21)
100035a8:	003d0206 	br	100029b4 <__alt_data_end+0xf80029b4>
100035ac:	8025883a 	mov	r18,r16
100035b0:	dc002903 	ldbu	r16,164(sp)
100035b4:	e011883a 	mov	r8,fp
100035b8:	84003fcc 	andi	r16,r16,255
100035bc:	803de726 	beq	r16,zero,10002d5c <__alt_data_end+0xf8002d5c>
100035c0:	d8c02b03 	ldbu	r3,172(sp)
100035c4:	d8c02785 	stb	r3,158(sp)
100035c8:	003de406 	br	10002d5c <__alt_data_end+0xf8002d5c>
100035cc:	84001014 	ori	r16,r16,64
100035d0:	ac400007 	ldb	r17,0(r21)
100035d4:	003cf706 	br	100029b4 <__alt_data_end+0xf80029b4>
100035d8:	ac400007 	ldb	r17,0(r21)
100035dc:	00801b04 	movi	r2,108
100035e0:	88838f26 	beq	r17,r2,10004420 <___vfprintf_internal_r+0x1bf4>
100035e4:	84000414 	ori	r16,r16,16
100035e8:	003cf206 	br	100029b4 <__alt_data_end+0xf80029b4>
100035ec:	8025883a 	mov	r18,r16
100035f0:	dc002903 	ldbu	r16,164(sp)
100035f4:	e011883a 	mov	r8,fp
100035f8:	84003fcc 	andi	r16,r16,255
100035fc:	80053f1e 	bne	r16,zero,10004afc <___vfprintf_internal_r+0x22d0>
10003600:	9080080c 	andi	r2,r18,32
10003604:	1002d226 	beq	r2,zero,10004150 <___vfprintf_internal_r+0x1924>
10003608:	d9002e17 	ldw	r4,184(sp)
1000360c:	d9402f17 	ldw	r5,188(sp)
10003610:	20800017 	ldw	r2,0(r4)
10003614:	2807d7fa 	srai	r3,r5,31
10003618:	21000104 	addi	r4,r4,4
1000361c:	d9002e15 	stw	r4,184(sp)
10003620:	11400015 	stw	r5,0(r2)
10003624:	10c00115 	stw	r3,4(r2)
10003628:	003cb806 	br	1000290c <__alt_data_end+0xf800290c>
1000362c:	d8c02e17 	ldw	r3,184(sp)
10003630:	d9002e17 	ldw	r4,184(sp)
10003634:	8025883a 	mov	r18,r16
10003638:	18800017 	ldw	r2,0(r3)
1000363c:	21000104 	addi	r4,r4,4
10003640:	00c00044 	movi	r3,1
10003644:	e011883a 	mov	r8,fp
10003648:	d8c02915 	stw	r3,164(sp)
1000364c:	d8002785 	stb	zero,158(sp)
10003650:	d8801405 	stb	r2,80(sp)
10003654:	d9002e15 	stw	r4,184(sp)
10003658:	d8c02b15 	stw	r3,172(sp)
1000365c:	d8002a15 	stw	zero,168(sp)
10003660:	d8003215 	stw	zero,200(sp)
10003664:	dc001404 	addi	r16,sp,80
10003668:	0039883a 	mov	fp,zero
1000366c:	003e5306 	br	10002fbc <__alt_data_end+0xf8002fbc>
10003670:	01040074 	movhi	r4,4097
10003674:	2109d004 	addi	r4,r4,10048
10003678:	0039883a 	mov	fp,zero
1000367c:	d9003915 	stw	r4,228(sp)
10003680:	04401e04 	movi	r17,120
10003684:	003f6906 	br	1000342c <__alt_data_end+0xf800342c>
10003688:	8025883a 	mov	r18,r16
1000368c:	dc002903 	ldbu	r16,164(sp)
10003690:	e011883a 	mov	r8,fp
10003694:	84003fcc 	andi	r16,r16,255
10003698:	8005081e 	bne	r16,zero,10004abc <___vfprintf_internal_r+0x2290>
1000369c:	883d6126 	beq	r17,zero,10002c24 <__alt_data_end+0xf8002c24>
100036a0:	00c00044 	movi	r3,1
100036a4:	d8c02915 	stw	r3,164(sp)
100036a8:	dc401405 	stb	r17,80(sp)
100036ac:	d8002785 	stb	zero,158(sp)
100036b0:	003fe906 	br	10003658 <__alt_data_end+0xf8003658>
100036b4:	01440074 	movhi	r5,4097
100036b8:	2949d004 	addi	r5,r5,10048
100036bc:	d9403915 	stw	r5,228(sp)
100036c0:	d8c02e15 	stw	r3,184(sp)
100036c4:	1025883a 	mov	r18,r2
100036c8:	04401e04 	movi	r17,120
100036cc:	9d84b03a 	or	r2,r19,r22
100036d0:	1000fc1e 	bne	r2,zero,10003ac4 <___vfprintf_internal_r+0x1298>
100036d4:	0039883a 	mov	fp,zero
100036d8:	00800084 	movi	r2,2
100036dc:	10803fcc 	andi	r2,r2,255
100036e0:	00c00044 	movi	r3,1
100036e4:	10c20f26 	beq	r2,r3,10003f24 <___vfprintf_internal_r+0x16f8>
100036e8:	00c00084 	movi	r3,2
100036ec:	10fd3326 	beq	r2,r3,10002bbc <__alt_data_end+0xf8002bbc>
100036f0:	003e0b06 	br	10002f20 <__alt_data_end+0xf8002f20>
100036f4:	d8c02017 	ldw	r3,128(sp)
100036f8:	003e7106 	br	100030c0 <__alt_data_end+0xf80030c0>
100036fc:	00801944 	movi	r2,101
10003700:	14407e0e 	bge	r2,r17,100038fc <___vfprintf_internal_r+0x10d0>
10003704:	d9003617 	ldw	r4,216(sp)
10003708:	d9403817 	ldw	r5,224(sp)
1000370c:	000d883a 	mov	r6,zero
10003710:	000f883a 	mov	r7,zero
10003714:	d8c03c15 	stw	r3,240(sp)
10003718:	da003d15 	stw	r8,244(sp)
1000371c:	000df200 	call	1000df20 <__eqdf2>
10003720:	d8c03c17 	ldw	r3,240(sp)
10003724:	da003d17 	ldw	r8,244(sp)
10003728:	1000f71e 	bne	r2,zero,10003b08 <___vfprintf_internal_r+0x12dc>
1000372c:	d8801f17 	ldw	r2,124(sp)
10003730:	01040074 	movhi	r4,4097
10003734:	2109d704 	addi	r4,r4,10076
10003738:	18c00044 	addi	r3,r3,1
1000373c:	10800044 	addi	r2,r2,1
10003740:	41000015 	stw	r4,0(r8)
10003744:	01000044 	movi	r4,1
10003748:	41000115 	stw	r4,4(r8)
1000374c:	d8c02015 	stw	r3,128(sp)
10003750:	d8801f15 	stw	r2,124(sp)
10003754:	010001c4 	movi	r4,7
10003758:	2082b816 	blt	r4,r2,1000423c <___vfprintf_internal_r+0x1a10>
1000375c:	42000204 	addi	r8,r8,8
10003760:	d8802617 	ldw	r2,152(sp)
10003764:	d9403317 	ldw	r5,204(sp)
10003768:	11400216 	blt	r2,r5,10003774 <___vfprintf_internal_r+0xf48>
1000376c:	9080004c 	andi	r2,r18,1
10003770:	103eb326 	beq	r2,zero,10003240 <__alt_data_end+0xf8003240>
10003774:	d8803717 	ldw	r2,220(sp)
10003778:	d9003417 	ldw	r4,208(sp)
1000377c:	d9403717 	ldw	r5,220(sp)
10003780:	1887883a 	add	r3,r3,r2
10003784:	d8801f17 	ldw	r2,124(sp)
10003788:	41000015 	stw	r4,0(r8)
1000378c:	41400115 	stw	r5,4(r8)
10003790:	10800044 	addi	r2,r2,1
10003794:	d8c02015 	stw	r3,128(sp)
10003798:	d8801f15 	stw	r2,124(sp)
1000379c:	010001c4 	movi	r4,7
100037a0:	20832916 	blt	r4,r2,10004448 <___vfprintf_internal_r+0x1c1c>
100037a4:	42000204 	addi	r8,r8,8
100037a8:	d8803317 	ldw	r2,204(sp)
100037ac:	143fffc4 	addi	r16,r2,-1
100037b0:	043ea30e 	bge	zero,r16,10003240 <__alt_data_end+0xf8003240>
100037b4:	04400404 	movi	r17,16
100037b8:	d8801f17 	ldw	r2,124(sp)
100037bc:	8c00880e 	bge	r17,r16,100039e0 <___vfprintf_internal_r+0x11b4>
100037c0:	01440074 	movhi	r5,4097
100037c4:	2949d784 	addi	r5,r5,10078
100037c8:	d9402c15 	stw	r5,176(sp)
100037cc:	058001c4 	movi	r22,7
100037d0:	dcc02d17 	ldw	r19,180(sp)
100037d4:	00000306 	br	100037e4 <___vfprintf_internal_r+0xfb8>
100037d8:	42000204 	addi	r8,r8,8
100037dc:	843ffc04 	addi	r16,r16,-16
100037e0:	8c00820e 	bge	r17,r16,100039ec <___vfprintf_internal_r+0x11c0>
100037e4:	18c00404 	addi	r3,r3,16
100037e8:	10800044 	addi	r2,r2,1
100037ec:	45000015 	stw	r20,0(r8)
100037f0:	44400115 	stw	r17,4(r8)
100037f4:	d8c02015 	stw	r3,128(sp)
100037f8:	d8801f15 	stw	r2,124(sp)
100037fc:	b0bff60e 	bge	r22,r2,100037d8 <__alt_data_end+0xf80037d8>
10003800:	d9801e04 	addi	r6,sp,120
10003804:	b80b883a 	mov	r5,r23
10003808:	9809883a 	mov	r4,r19
1000380c:	000a0680 	call	1000a068 <__sprint_r>
10003810:	103d0a1e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
10003814:	d8c02017 	ldw	r3,128(sp)
10003818:	d8801f17 	ldw	r2,124(sp)
1000381c:	da000404 	addi	r8,sp,16
10003820:	003fee06 	br	100037dc <__alt_data_end+0xf80037dc>
10003824:	d9403117 	ldw	r5,196(sp)
10003828:	d8802917 	ldw	r2,164(sp)
1000382c:	28adc83a 	sub	r22,r5,r2
10003830:	05be410e 	bge	zero,r22,10003138 <__alt_data_end+0xf8003138>
10003834:	07000404 	movi	fp,16
10003838:	d8801f17 	ldw	r2,124(sp)
1000383c:	e5838f0e 	bge	fp,r22,1000467c <___vfprintf_internal_r+0x1e50>
10003840:	01440074 	movhi	r5,4097
10003844:	2949d784 	addi	r5,r5,10078
10003848:	dc403015 	stw	r17,192(sp)
1000384c:	d9402c15 	stw	r5,176(sp)
10003850:	b023883a 	mov	r17,r22
10003854:	04c001c4 	movi	r19,7
10003858:	a82d883a 	mov	r22,r21
1000385c:	902b883a 	mov	r21,r18
10003860:	8025883a 	mov	r18,r16
10003864:	dc002d17 	ldw	r16,180(sp)
10003868:	00000306 	br	10003878 <___vfprintf_internal_r+0x104c>
1000386c:	8c7ffc04 	addi	r17,r17,-16
10003870:	42000204 	addi	r8,r8,8
10003874:	e440110e 	bge	fp,r17,100038bc <___vfprintf_internal_r+0x1090>
10003878:	18c00404 	addi	r3,r3,16
1000387c:	10800044 	addi	r2,r2,1
10003880:	45000015 	stw	r20,0(r8)
10003884:	47000115 	stw	fp,4(r8)
10003888:	d8c02015 	stw	r3,128(sp)
1000388c:	d8801f15 	stw	r2,124(sp)
10003890:	98bff60e 	bge	r19,r2,1000386c <__alt_data_end+0xf800386c>
10003894:	d9801e04 	addi	r6,sp,120
10003898:	b80b883a 	mov	r5,r23
1000389c:	8009883a 	mov	r4,r16
100038a0:	000a0680 	call	1000a068 <__sprint_r>
100038a4:	103ce51e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
100038a8:	8c7ffc04 	addi	r17,r17,-16
100038ac:	d8c02017 	ldw	r3,128(sp)
100038b0:	d8801f17 	ldw	r2,124(sp)
100038b4:	da000404 	addi	r8,sp,16
100038b8:	e47fef16 	blt	fp,r17,10003878 <__alt_data_end+0xf8003878>
100038bc:	9021883a 	mov	r16,r18
100038c0:	a825883a 	mov	r18,r21
100038c4:	b02b883a 	mov	r21,r22
100038c8:	882d883a 	mov	r22,r17
100038cc:	dc403017 	ldw	r17,192(sp)
100038d0:	d9002c17 	ldw	r4,176(sp)
100038d4:	1d87883a 	add	r3,r3,r22
100038d8:	10800044 	addi	r2,r2,1
100038dc:	41000015 	stw	r4,0(r8)
100038e0:	45800115 	stw	r22,4(r8)
100038e4:	d8c02015 	stw	r3,128(sp)
100038e8:	d8801f15 	stw	r2,124(sp)
100038ec:	010001c4 	movi	r4,7
100038f0:	20818e16 	blt	r4,r2,10003f2c <___vfprintf_internal_r+0x1700>
100038f4:	42000204 	addi	r8,r8,8
100038f8:	003e0f06 	br	10003138 <__alt_data_end+0xf8003138>
100038fc:	d9403317 	ldw	r5,204(sp)
10003900:	00800044 	movi	r2,1
10003904:	18c00044 	addi	r3,r3,1
10003908:	1141530e 	bge	r2,r5,10003e58 <___vfprintf_internal_r+0x162c>
1000390c:	dc401f17 	ldw	r17,124(sp)
10003910:	00800044 	movi	r2,1
10003914:	40800115 	stw	r2,4(r8)
10003918:	8c400044 	addi	r17,r17,1
1000391c:	44000015 	stw	r16,0(r8)
10003920:	d8c02015 	stw	r3,128(sp)
10003924:	dc401f15 	stw	r17,124(sp)
10003928:	008001c4 	movi	r2,7
1000392c:	14416b16 	blt	r2,r17,10003edc <___vfprintf_internal_r+0x16b0>
10003930:	42000204 	addi	r8,r8,8
10003934:	d8803717 	ldw	r2,220(sp)
10003938:	d9003417 	ldw	r4,208(sp)
1000393c:	8c400044 	addi	r17,r17,1
10003940:	10c7883a 	add	r3,r2,r3
10003944:	40800115 	stw	r2,4(r8)
10003948:	41000015 	stw	r4,0(r8)
1000394c:	d8c02015 	stw	r3,128(sp)
10003950:	dc401f15 	stw	r17,124(sp)
10003954:	008001c4 	movi	r2,7
10003958:	14416916 	blt	r2,r17,10003f00 <___vfprintf_internal_r+0x16d4>
1000395c:	45800204 	addi	r22,r8,8
10003960:	d9003617 	ldw	r4,216(sp)
10003964:	d9403817 	ldw	r5,224(sp)
10003968:	000d883a 	mov	r6,zero
1000396c:	000f883a 	mov	r7,zero
10003970:	d8c03c15 	stw	r3,240(sp)
10003974:	000df200 	call	1000df20 <__eqdf2>
10003978:	d8c03c17 	ldw	r3,240(sp)
1000397c:	1000bc26 	beq	r2,zero,10003c70 <___vfprintf_internal_r+0x1444>
10003980:	d9403317 	ldw	r5,204(sp)
10003984:	84000044 	addi	r16,r16,1
10003988:	8c400044 	addi	r17,r17,1
1000398c:	28bfffc4 	addi	r2,r5,-1
10003990:	1887883a 	add	r3,r3,r2
10003994:	b0800115 	stw	r2,4(r22)
10003998:	b4000015 	stw	r16,0(r22)
1000399c:	d8c02015 	stw	r3,128(sp)
100039a0:	dc401f15 	stw	r17,124(sp)
100039a4:	008001c4 	movi	r2,7
100039a8:	14414316 	blt	r2,r17,10003eb8 <___vfprintf_internal_r+0x168c>
100039ac:	b5800204 	addi	r22,r22,8
100039b0:	d9003a17 	ldw	r4,232(sp)
100039b4:	df0022c4 	addi	fp,sp,139
100039b8:	8c400044 	addi	r17,r17,1
100039bc:	20c7883a 	add	r3,r4,r3
100039c0:	b7000015 	stw	fp,0(r22)
100039c4:	b1000115 	stw	r4,4(r22)
100039c8:	d8c02015 	stw	r3,128(sp)
100039cc:	dc401f15 	stw	r17,124(sp)
100039d0:	008001c4 	movi	r2,7
100039d4:	14400e16 	blt	r2,r17,10003a10 <___vfprintf_internal_r+0x11e4>
100039d8:	b2000204 	addi	r8,r22,8
100039dc:	003e1806 	br	10003240 <__alt_data_end+0xf8003240>
100039e0:	01040074 	movhi	r4,4097
100039e4:	2109d784 	addi	r4,r4,10078
100039e8:	d9002c15 	stw	r4,176(sp)
100039ec:	d9002c17 	ldw	r4,176(sp)
100039f0:	1c07883a 	add	r3,r3,r16
100039f4:	44000115 	stw	r16,4(r8)
100039f8:	41000015 	stw	r4,0(r8)
100039fc:	10800044 	addi	r2,r2,1
10003a00:	d8c02015 	stw	r3,128(sp)
10003a04:	d8801f15 	stw	r2,124(sp)
10003a08:	010001c4 	movi	r4,7
10003a0c:	20be0b0e 	bge	r4,r2,1000323c <__alt_data_end+0xf800323c>
10003a10:	d9002d17 	ldw	r4,180(sp)
10003a14:	d9801e04 	addi	r6,sp,120
10003a18:	b80b883a 	mov	r5,r23
10003a1c:	000a0680 	call	1000a068 <__sprint_r>
10003a20:	103c861e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
10003a24:	d8c02017 	ldw	r3,128(sp)
10003a28:	da000404 	addi	r8,sp,16
10003a2c:	003e0406 	br	10003240 <__alt_data_end+0xf8003240>
10003a30:	d9002d17 	ldw	r4,180(sp)
10003a34:	d9801e04 	addi	r6,sp,120
10003a38:	b80b883a 	mov	r5,r23
10003a3c:	000a0680 	call	1000a068 <__sprint_r>
10003a40:	103e3b26 	beq	r2,zero,10003330 <__alt_data_end+0xf8003330>
10003a44:	003c7d06 	br	10002c3c <__alt_data_end+0xf8002c3c>
10003a48:	d9002d17 	ldw	r4,180(sp)
10003a4c:	d9801e04 	addi	r6,sp,120
10003a50:	b80b883a 	mov	r5,r23
10003a54:	000a0680 	call	1000a068 <__sprint_r>
10003a58:	103c781e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
10003a5c:	d8c02017 	ldw	r3,128(sp)
10003a60:	da000404 	addi	r8,sp,16
10003a64:	003de906 	br	1000320c <__alt_data_end+0xf800320c>
10003a68:	d9002d17 	ldw	r4,180(sp)
10003a6c:	d9801e04 	addi	r6,sp,120
10003a70:	b80b883a 	mov	r5,r23
10003a74:	000a0680 	call	1000a068 <__sprint_r>
10003a78:	103c701e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
10003a7c:	d8c02017 	ldw	r3,128(sp)
10003a80:	da000404 	addi	r8,sp,16
10003a84:	003d9b06 	br	100030f4 <__alt_data_end+0xf80030f4>
10003a88:	d9002d17 	ldw	r4,180(sp)
10003a8c:	d9801e04 	addi	r6,sp,120
10003a90:	b80b883a 	mov	r5,r23
10003a94:	000a0680 	call	1000a068 <__sprint_r>
10003a98:	103c681e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
10003a9c:	d8c02017 	ldw	r3,128(sp)
10003aa0:	da000404 	addi	r8,sp,16
10003aa4:	003da106 	br	1000312c <__alt_data_end+0xf800312c>
10003aa8:	d9402a17 	ldw	r5,168(sp)
10003aac:	d8002785 	stb	zero,158(sp)
10003ab0:	283f0616 	blt	r5,zero,100036cc <__alt_data_end+0xf80036cc>
10003ab4:	00ffdfc4 	movi	r3,-129
10003ab8:	9d84b03a 	or	r2,r19,r22
10003abc:	90e4703a 	and	r18,r18,r3
10003ac0:	103c3b26 	beq	r2,zero,10002bb0 <__alt_data_end+0xf8002bb0>
10003ac4:	0039883a 	mov	fp,zero
10003ac8:	003e5806 	br	1000342c <__alt_data_end+0xf800342c>
10003acc:	9080040c 	andi	r2,r18,16
10003ad0:	1001b326 	beq	r2,zero,100041a0 <___vfprintf_internal_r+0x1974>
10003ad4:	d8c02e17 	ldw	r3,184(sp)
10003ad8:	d9002a17 	ldw	r4,168(sp)
10003adc:	d8002785 	stb	zero,158(sp)
10003ae0:	18800104 	addi	r2,r3,4
10003ae4:	1cc00017 	ldw	r19,0(r3)
10003ae8:	002d883a 	mov	r22,zero
10003aec:	2001b516 	blt	r4,zero,100041c4 <___vfprintf_internal_r+0x1998>
10003af0:	00ffdfc4 	movi	r3,-129
10003af4:	d8802e15 	stw	r2,184(sp)
10003af8:	90e4703a 	and	r18,r18,r3
10003afc:	983d0526 	beq	r19,zero,10002f14 <__alt_data_end+0xf8002f14>
10003b00:	0039883a 	mov	fp,zero
10003b04:	003d0806 	br	10002f28 <__alt_data_end+0xf8002f28>
10003b08:	dc402617 	ldw	r17,152(sp)
10003b0c:	0441d30e 	bge	zero,r17,1000425c <___vfprintf_internal_r+0x1a30>
10003b10:	dc403217 	ldw	r17,200(sp)
10003b14:	d8803317 	ldw	r2,204(sp)
10003b18:	1440010e 	bge	r2,r17,10003b20 <___vfprintf_internal_r+0x12f4>
10003b1c:	1023883a 	mov	r17,r2
10003b20:	04400a0e 	bge	zero,r17,10003b4c <___vfprintf_internal_r+0x1320>
10003b24:	d8801f17 	ldw	r2,124(sp)
10003b28:	1c47883a 	add	r3,r3,r17
10003b2c:	44000015 	stw	r16,0(r8)
10003b30:	10800044 	addi	r2,r2,1
10003b34:	44400115 	stw	r17,4(r8)
10003b38:	d8c02015 	stw	r3,128(sp)
10003b3c:	d8801f15 	stw	r2,124(sp)
10003b40:	010001c4 	movi	r4,7
10003b44:	20826516 	blt	r4,r2,100044dc <___vfprintf_internal_r+0x1cb0>
10003b48:	42000204 	addi	r8,r8,8
10003b4c:	88026116 	blt	r17,zero,100044d4 <___vfprintf_internal_r+0x1ca8>
10003b50:	d9003217 	ldw	r4,200(sp)
10003b54:	2463c83a 	sub	r17,r4,r17
10003b58:	04407b0e 	bge	zero,r17,10003d48 <___vfprintf_internal_r+0x151c>
10003b5c:	05800404 	movi	r22,16
10003b60:	d8801f17 	ldw	r2,124(sp)
10003b64:	b4419d0e 	bge	r22,r17,100041dc <___vfprintf_internal_r+0x19b0>
10003b68:	01040074 	movhi	r4,4097
10003b6c:	2109d784 	addi	r4,r4,10078
10003b70:	d9002c15 	stw	r4,176(sp)
10003b74:	070001c4 	movi	fp,7
10003b78:	dcc02d17 	ldw	r19,180(sp)
10003b7c:	00000306 	br	10003b8c <___vfprintf_internal_r+0x1360>
10003b80:	42000204 	addi	r8,r8,8
10003b84:	8c7ffc04 	addi	r17,r17,-16
10003b88:	b441970e 	bge	r22,r17,100041e8 <___vfprintf_internal_r+0x19bc>
10003b8c:	18c00404 	addi	r3,r3,16
10003b90:	10800044 	addi	r2,r2,1
10003b94:	45000015 	stw	r20,0(r8)
10003b98:	45800115 	stw	r22,4(r8)
10003b9c:	d8c02015 	stw	r3,128(sp)
10003ba0:	d8801f15 	stw	r2,124(sp)
10003ba4:	e0bff60e 	bge	fp,r2,10003b80 <__alt_data_end+0xf8003b80>
10003ba8:	d9801e04 	addi	r6,sp,120
10003bac:	b80b883a 	mov	r5,r23
10003bb0:	9809883a 	mov	r4,r19
10003bb4:	000a0680 	call	1000a068 <__sprint_r>
10003bb8:	103c201e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
10003bbc:	d8c02017 	ldw	r3,128(sp)
10003bc0:	d8801f17 	ldw	r2,124(sp)
10003bc4:	da000404 	addi	r8,sp,16
10003bc8:	003fee06 	br	10003b84 <__alt_data_end+0xf8003b84>
10003bcc:	d9002d17 	ldw	r4,180(sp)
10003bd0:	d9801e04 	addi	r6,sp,120
10003bd4:	b80b883a 	mov	r5,r23
10003bd8:	000a0680 	call	1000a068 <__sprint_r>
10003bdc:	103c171e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
10003be0:	d8c02017 	ldw	r3,128(sp)
10003be4:	df002787 	ldb	fp,158(sp)
10003be8:	da000404 	addi	r8,sp,16
10003bec:	003d3406 	br	100030c0 <__alt_data_end+0xf80030c0>
10003bf0:	9080040c 	andi	r2,r18,16
10003bf4:	10016126 	beq	r2,zero,1000417c <___vfprintf_internal_r+0x1950>
10003bf8:	d9402e17 	ldw	r5,184(sp)
10003bfc:	2cc00017 	ldw	r19,0(r5)
10003c00:	29400104 	addi	r5,r5,4
10003c04:	d9402e15 	stw	r5,184(sp)
10003c08:	982dd7fa 	srai	r22,r19,31
10003c0c:	b005883a 	mov	r2,r22
10003c10:	003c5a06 	br	10002d7c <__alt_data_end+0xf8002d7c>
10003c14:	9080040c 	andi	r2,r18,16
10003c18:	10003526 	beq	r2,zero,10003cf0 <___vfprintf_internal_r+0x14c4>
10003c1c:	d8c02e17 	ldw	r3,184(sp)
10003c20:	d9002a17 	ldw	r4,168(sp)
10003c24:	d8002785 	stb	zero,158(sp)
10003c28:	18800104 	addi	r2,r3,4
10003c2c:	1cc00017 	ldw	r19,0(r3)
10003c30:	002d883a 	mov	r22,zero
10003c34:	20003716 	blt	r4,zero,10003d14 <___vfprintf_internal_r+0x14e8>
10003c38:	00ffdfc4 	movi	r3,-129
10003c3c:	d8802e15 	stw	r2,184(sp)
10003c40:	90e4703a 	and	r18,r18,r3
10003c44:	0039883a 	mov	fp,zero
10003c48:	983dd426 	beq	r19,zero,1000339c <__alt_data_end+0xf800339c>
10003c4c:	00800244 	movi	r2,9
10003c50:	14fc5336 	bltu	r2,r19,10002da0 <__alt_data_end+0xf8002da0>
10003c54:	d8c02817 	ldw	r3,160(sp)
10003c58:	dc001dc4 	addi	r16,sp,119
10003c5c:	9cc00c04 	addi	r19,r19,48
10003c60:	1c07c83a 	sub	r3,r3,r16
10003c64:	dcc01dc5 	stb	r19,119(sp)
10003c68:	d8c02b15 	stw	r3,172(sp)
10003c6c:	003cc606 	br	10002f88 <__alt_data_end+0xf8002f88>
10003c70:	d8803317 	ldw	r2,204(sp)
10003c74:	143fffc4 	addi	r16,r2,-1
10003c78:	043f4d0e 	bge	zero,r16,100039b0 <__alt_data_end+0xf80039b0>
10003c7c:	07000404 	movi	fp,16
10003c80:	e400810e 	bge	fp,r16,10003e88 <___vfprintf_internal_r+0x165c>
10003c84:	01440074 	movhi	r5,4097
10003c88:	2949d784 	addi	r5,r5,10078
10003c8c:	d9402c15 	stw	r5,176(sp)
10003c90:	01c001c4 	movi	r7,7
10003c94:	dcc02d17 	ldw	r19,180(sp)
10003c98:	00000306 	br	10003ca8 <___vfprintf_internal_r+0x147c>
10003c9c:	b5800204 	addi	r22,r22,8
10003ca0:	843ffc04 	addi	r16,r16,-16
10003ca4:	e4007b0e 	bge	fp,r16,10003e94 <___vfprintf_internal_r+0x1668>
10003ca8:	18c00404 	addi	r3,r3,16
10003cac:	8c400044 	addi	r17,r17,1
10003cb0:	b5000015 	stw	r20,0(r22)
10003cb4:	b7000115 	stw	fp,4(r22)
10003cb8:	d8c02015 	stw	r3,128(sp)
10003cbc:	dc401f15 	stw	r17,124(sp)
10003cc0:	3c7ff60e 	bge	r7,r17,10003c9c <__alt_data_end+0xf8003c9c>
10003cc4:	d9801e04 	addi	r6,sp,120
10003cc8:	b80b883a 	mov	r5,r23
10003ccc:	9809883a 	mov	r4,r19
10003cd0:	d9c03c15 	stw	r7,240(sp)
10003cd4:	000a0680 	call	1000a068 <__sprint_r>
10003cd8:	d9c03c17 	ldw	r7,240(sp)
10003cdc:	103bd71e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
10003ce0:	d8c02017 	ldw	r3,128(sp)
10003ce4:	dc401f17 	ldw	r17,124(sp)
10003ce8:	dd800404 	addi	r22,sp,16
10003cec:	003fec06 	br	10003ca0 <__alt_data_end+0xf8003ca0>
10003cf0:	9080100c 	andi	r2,r18,64
10003cf4:	d8002785 	stb	zero,158(sp)
10003cf8:	10010e26 	beq	r2,zero,10004134 <___vfprintf_internal_r+0x1908>
10003cfc:	d9402e17 	ldw	r5,184(sp)
10003d00:	d8c02a17 	ldw	r3,168(sp)
10003d04:	002d883a 	mov	r22,zero
10003d08:	28800104 	addi	r2,r5,4
10003d0c:	2cc0000b 	ldhu	r19,0(r5)
10003d10:	183fc90e 	bge	r3,zero,10003c38 <__alt_data_end+0xf8003c38>
10003d14:	d8802e15 	stw	r2,184(sp)
10003d18:	0039883a 	mov	fp,zero
10003d1c:	9d84b03a 	or	r2,r19,r22
10003d20:	103c1e1e 	bne	r2,zero,10002d9c <__alt_data_end+0xf8002d9c>
10003d24:	00800044 	movi	r2,1
10003d28:	003e6c06 	br	100036dc <__alt_data_end+0xf80036dc>
10003d2c:	d9002d17 	ldw	r4,180(sp)
10003d30:	d9801e04 	addi	r6,sp,120
10003d34:	b80b883a 	mov	r5,r23
10003d38:	000a0680 	call	1000a068 <__sprint_r>
10003d3c:	103bbf1e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
10003d40:	d8c02017 	ldw	r3,128(sp)
10003d44:	da000404 	addi	r8,sp,16
10003d48:	d9003217 	ldw	r4,200(sp)
10003d4c:	d8802617 	ldw	r2,152(sp)
10003d50:	d9403317 	ldw	r5,204(sp)
10003d54:	8123883a 	add	r17,r16,r4
10003d58:	11400216 	blt	r2,r5,10003d64 <___vfprintf_internal_r+0x1538>
10003d5c:	9100004c 	andi	r4,r18,1
10003d60:	20000d26 	beq	r4,zero,10003d98 <___vfprintf_internal_r+0x156c>
10003d64:	d9003717 	ldw	r4,220(sp)
10003d68:	d9403417 	ldw	r5,208(sp)
10003d6c:	1907883a 	add	r3,r3,r4
10003d70:	d9001f17 	ldw	r4,124(sp)
10003d74:	41400015 	stw	r5,0(r8)
10003d78:	d9403717 	ldw	r5,220(sp)
10003d7c:	21000044 	addi	r4,r4,1
10003d80:	d8c02015 	stw	r3,128(sp)
10003d84:	41400115 	stw	r5,4(r8)
10003d88:	d9001f15 	stw	r4,124(sp)
10003d8c:	014001c4 	movi	r5,7
10003d90:	2901e816 	blt	r5,r4,10004534 <___vfprintf_internal_r+0x1d08>
10003d94:	42000204 	addi	r8,r8,8
10003d98:	d9003317 	ldw	r4,204(sp)
10003d9c:	8121883a 	add	r16,r16,r4
10003da0:	2085c83a 	sub	r2,r4,r2
10003da4:	8461c83a 	sub	r16,r16,r17
10003da8:	1400010e 	bge	r2,r16,10003db0 <___vfprintf_internal_r+0x1584>
10003dac:	1021883a 	mov	r16,r2
10003db0:	04000a0e 	bge	zero,r16,10003ddc <___vfprintf_internal_r+0x15b0>
10003db4:	d9001f17 	ldw	r4,124(sp)
10003db8:	1c07883a 	add	r3,r3,r16
10003dbc:	44400015 	stw	r17,0(r8)
10003dc0:	21000044 	addi	r4,r4,1
10003dc4:	44000115 	stw	r16,4(r8)
10003dc8:	d8c02015 	stw	r3,128(sp)
10003dcc:	d9001f15 	stw	r4,124(sp)
10003dd0:	014001c4 	movi	r5,7
10003dd4:	2901fb16 	blt	r5,r4,100045c4 <___vfprintf_internal_r+0x1d98>
10003dd8:	42000204 	addi	r8,r8,8
10003ddc:	8001f716 	blt	r16,zero,100045bc <___vfprintf_internal_r+0x1d90>
10003de0:	1421c83a 	sub	r16,r2,r16
10003de4:	043d160e 	bge	zero,r16,10003240 <__alt_data_end+0xf8003240>
10003de8:	04400404 	movi	r17,16
10003dec:	d8801f17 	ldw	r2,124(sp)
10003df0:	8c3efb0e 	bge	r17,r16,100039e0 <__alt_data_end+0xf80039e0>
10003df4:	01440074 	movhi	r5,4097
10003df8:	2949d784 	addi	r5,r5,10078
10003dfc:	d9402c15 	stw	r5,176(sp)
10003e00:	058001c4 	movi	r22,7
10003e04:	dcc02d17 	ldw	r19,180(sp)
10003e08:	00000306 	br	10003e18 <___vfprintf_internal_r+0x15ec>
10003e0c:	42000204 	addi	r8,r8,8
10003e10:	843ffc04 	addi	r16,r16,-16
10003e14:	8c3ef50e 	bge	r17,r16,100039ec <__alt_data_end+0xf80039ec>
10003e18:	18c00404 	addi	r3,r3,16
10003e1c:	10800044 	addi	r2,r2,1
10003e20:	45000015 	stw	r20,0(r8)
10003e24:	44400115 	stw	r17,4(r8)
10003e28:	d8c02015 	stw	r3,128(sp)
10003e2c:	d8801f15 	stw	r2,124(sp)
10003e30:	b0bff60e 	bge	r22,r2,10003e0c <__alt_data_end+0xf8003e0c>
10003e34:	d9801e04 	addi	r6,sp,120
10003e38:	b80b883a 	mov	r5,r23
10003e3c:	9809883a 	mov	r4,r19
10003e40:	000a0680 	call	1000a068 <__sprint_r>
10003e44:	103b7d1e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
10003e48:	d8c02017 	ldw	r3,128(sp)
10003e4c:	d8801f17 	ldw	r2,124(sp)
10003e50:	da000404 	addi	r8,sp,16
10003e54:	003fee06 	br	10003e10 <__alt_data_end+0xf8003e10>
10003e58:	9088703a 	and	r4,r18,r2
10003e5c:	203eab1e 	bne	r4,zero,1000390c <__alt_data_end+0xf800390c>
10003e60:	dc401f17 	ldw	r17,124(sp)
10003e64:	40800115 	stw	r2,4(r8)
10003e68:	44000015 	stw	r16,0(r8)
10003e6c:	8c400044 	addi	r17,r17,1
10003e70:	d8c02015 	stw	r3,128(sp)
10003e74:	dc401f15 	stw	r17,124(sp)
10003e78:	008001c4 	movi	r2,7
10003e7c:	14400e16 	blt	r2,r17,10003eb8 <___vfprintf_internal_r+0x168c>
10003e80:	45800204 	addi	r22,r8,8
10003e84:	003eca06 	br	100039b0 <__alt_data_end+0xf80039b0>
10003e88:	01040074 	movhi	r4,4097
10003e8c:	2109d784 	addi	r4,r4,10078
10003e90:	d9002c15 	stw	r4,176(sp)
10003e94:	d8802c17 	ldw	r2,176(sp)
10003e98:	1c07883a 	add	r3,r3,r16
10003e9c:	8c400044 	addi	r17,r17,1
10003ea0:	b0800015 	stw	r2,0(r22)
10003ea4:	b4000115 	stw	r16,4(r22)
10003ea8:	d8c02015 	stw	r3,128(sp)
10003eac:	dc401f15 	stw	r17,124(sp)
10003eb0:	008001c4 	movi	r2,7
10003eb4:	147ebd0e 	bge	r2,r17,100039ac <__alt_data_end+0xf80039ac>
10003eb8:	d9002d17 	ldw	r4,180(sp)
10003ebc:	d9801e04 	addi	r6,sp,120
10003ec0:	b80b883a 	mov	r5,r23
10003ec4:	000a0680 	call	1000a068 <__sprint_r>
10003ec8:	103b5c1e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
10003ecc:	d8c02017 	ldw	r3,128(sp)
10003ed0:	dc401f17 	ldw	r17,124(sp)
10003ed4:	dd800404 	addi	r22,sp,16
10003ed8:	003eb506 	br	100039b0 <__alt_data_end+0xf80039b0>
10003edc:	d9002d17 	ldw	r4,180(sp)
10003ee0:	d9801e04 	addi	r6,sp,120
10003ee4:	b80b883a 	mov	r5,r23
10003ee8:	000a0680 	call	1000a068 <__sprint_r>
10003eec:	103b531e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
10003ef0:	d8c02017 	ldw	r3,128(sp)
10003ef4:	dc401f17 	ldw	r17,124(sp)
10003ef8:	da000404 	addi	r8,sp,16
10003efc:	003e8d06 	br	10003934 <__alt_data_end+0xf8003934>
10003f00:	d9002d17 	ldw	r4,180(sp)
10003f04:	d9801e04 	addi	r6,sp,120
10003f08:	b80b883a 	mov	r5,r23
10003f0c:	000a0680 	call	1000a068 <__sprint_r>
10003f10:	103b4a1e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
10003f14:	d8c02017 	ldw	r3,128(sp)
10003f18:	dc401f17 	ldw	r17,124(sp)
10003f1c:	dd800404 	addi	r22,sp,16
10003f20:	003e8f06 	br	10003960 <__alt_data_end+0xf8003960>
10003f24:	0027883a 	mov	r19,zero
10003f28:	003f4a06 	br	10003c54 <__alt_data_end+0xf8003c54>
10003f2c:	d9002d17 	ldw	r4,180(sp)
10003f30:	d9801e04 	addi	r6,sp,120
10003f34:	b80b883a 	mov	r5,r23
10003f38:	000a0680 	call	1000a068 <__sprint_r>
10003f3c:	103b3f1e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
10003f40:	d8c02017 	ldw	r3,128(sp)
10003f44:	da000404 	addi	r8,sp,16
10003f48:	003c7b06 	br	10003138 <__alt_data_end+0xf8003138>
10003f4c:	d9402a17 	ldw	r5,168(sp)
10003f50:	04e7c83a 	sub	r19,zero,r19
10003f54:	07000b44 	movi	fp,45
10003f58:	9804c03a 	cmpne	r2,r19,zero
10003f5c:	05adc83a 	sub	r22,zero,r22
10003f60:	df002785 	stb	fp,158(sp)
10003f64:	b0adc83a 	sub	r22,r22,r2
10003f68:	28017b16 	blt	r5,zero,10004558 <___vfprintf_internal_r+0x1d2c>
10003f6c:	00bfdfc4 	movi	r2,-129
10003f70:	90a4703a 	and	r18,r18,r2
10003f74:	003b8906 	br	10002d9c <__alt_data_end+0xf8002d9c>
10003f78:	d9003617 	ldw	r4,216(sp)
10003f7c:	d9403817 	ldw	r5,224(sp)
10003f80:	da003d15 	stw	r8,244(sp)
10003f84:	0009c8c0 	call	10009c8c <__fpclassifyd>
10003f88:	da003d17 	ldw	r8,244(sp)
10003f8c:	1000f026 	beq	r2,zero,10004350 <___vfprintf_internal_r+0x1b24>
10003f90:	d9002a17 	ldw	r4,168(sp)
10003f94:	05bff7c4 	movi	r22,-33
10003f98:	00bfffc4 	movi	r2,-1
10003f9c:	8dac703a 	and	r22,r17,r22
10003fa0:	20820026 	beq	r4,r2,100047a4 <___vfprintf_internal_r+0x1f78>
10003fa4:	008011c4 	movi	r2,71
10003fa8:	b081f726 	beq	r22,r2,10004788 <___vfprintf_internal_r+0x1f5c>
10003fac:	d9003817 	ldw	r4,224(sp)
10003fb0:	90c04014 	ori	r3,r18,256
10003fb4:	d8c02c15 	stw	r3,176(sp)
10003fb8:	20021516 	blt	r4,zero,10004810 <___vfprintf_internal_r+0x1fe4>
10003fbc:	dcc03817 	ldw	r19,224(sp)
10003fc0:	d8002905 	stb	zero,164(sp)
10003fc4:	00801984 	movi	r2,102
10003fc8:	8881f926 	beq	r17,r2,100047b0 <___vfprintf_internal_r+0x1f84>
10003fcc:	00801184 	movi	r2,70
10003fd0:	88821c26 	beq	r17,r2,10004844 <___vfprintf_internal_r+0x2018>
10003fd4:	00801144 	movi	r2,69
10003fd8:	b081ef26 	beq	r22,r2,10004798 <___vfprintf_internal_r+0x1f6c>
10003fdc:	d8c02a17 	ldw	r3,168(sp)
10003fe0:	d8802104 	addi	r2,sp,132
10003fe4:	d8800315 	stw	r2,12(sp)
10003fe8:	d9403617 	ldw	r5,216(sp)
10003fec:	d8802504 	addi	r2,sp,148
10003ff0:	d9002d17 	ldw	r4,180(sp)
10003ff4:	d8800215 	stw	r2,8(sp)
10003ff8:	d8802604 	addi	r2,sp,152
10003ffc:	d8c00015 	stw	r3,0(sp)
10004000:	d8800115 	stw	r2,4(sp)
10004004:	01c00084 	movi	r7,2
10004008:	980d883a 	mov	r6,r19
1000400c:	d8c03c15 	stw	r3,240(sp)
10004010:	da003d15 	stw	r8,244(sp)
10004014:	0004f5c0 	call	10004f5c <_dtoa_r>
10004018:	1021883a 	mov	r16,r2
1000401c:	008019c4 	movi	r2,103
10004020:	d8c03c17 	ldw	r3,240(sp)
10004024:	da003d17 	ldw	r8,244(sp)
10004028:	88817126 	beq	r17,r2,100045f0 <___vfprintf_internal_r+0x1dc4>
1000402c:	008011c4 	movi	r2,71
10004030:	88829126 	beq	r17,r2,10004a78 <___vfprintf_internal_r+0x224c>
10004034:	80f9883a 	add	fp,r16,r3
10004038:	d9003617 	ldw	r4,216(sp)
1000403c:	000d883a 	mov	r6,zero
10004040:	000f883a 	mov	r7,zero
10004044:	980b883a 	mov	r5,r19
10004048:	da003d15 	stw	r8,244(sp)
1000404c:	000df200 	call	1000df20 <__eqdf2>
10004050:	da003d17 	ldw	r8,244(sp)
10004054:	10018d26 	beq	r2,zero,1000468c <___vfprintf_internal_r+0x1e60>
10004058:	d8802117 	ldw	r2,132(sp)
1000405c:	1700062e 	bgeu	r2,fp,10004078 <___vfprintf_internal_r+0x184c>
10004060:	01000c04 	movi	r4,48
10004064:	10c00044 	addi	r3,r2,1
10004068:	d8c02115 	stw	r3,132(sp)
1000406c:	11000005 	stb	r4,0(r2)
10004070:	d8802117 	ldw	r2,132(sp)
10004074:	173ffb36 	bltu	r2,fp,10004064 <__alt_data_end+0xf8004064>
10004078:	1405c83a 	sub	r2,r2,r16
1000407c:	d8803315 	stw	r2,204(sp)
10004080:	008011c4 	movi	r2,71
10004084:	b0817626 	beq	r22,r2,10004660 <___vfprintf_internal_r+0x1e34>
10004088:	00801944 	movi	r2,101
1000408c:	1442800e 	bge	r2,r17,10004a90 <___vfprintf_internal_r+0x2264>
10004090:	d8c02617 	ldw	r3,152(sp)
10004094:	00801984 	movi	r2,102
10004098:	d8c03215 	stw	r3,200(sp)
1000409c:	8881fe26 	beq	r17,r2,10004898 <___vfprintf_internal_r+0x206c>
100040a0:	d8c03217 	ldw	r3,200(sp)
100040a4:	d9003317 	ldw	r4,204(sp)
100040a8:	1901dd16 	blt	r3,r4,10004820 <___vfprintf_internal_r+0x1ff4>
100040ac:	9480004c 	andi	r18,r18,1
100040b0:	90022b1e 	bne	r18,zero,10004960 <___vfprintf_internal_r+0x2134>
100040b4:	1805883a 	mov	r2,r3
100040b8:	18028316 	blt	r3,zero,10004ac8 <___vfprintf_internal_r+0x229c>
100040bc:	d8c03217 	ldw	r3,200(sp)
100040c0:	044019c4 	movi	r17,103
100040c4:	d8c02b15 	stw	r3,172(sp)
100040c8:	df002907 	ldb	fp,164(sp)
100040cc:	e001531e 	bne	fp,zero,1000461c <___vfprintf_internal_r+0x1df0>
100040d0:	df002783 	ldbu	fp,158(sp)
100040d4:	d8802915 	stw	r2,164(sp)
100040d8:	dc802c17 	ldw	r18,176(sp)
100040dc:	d8002a15 	stw	zero,168(sp)
100040e0:	003baf06 	br	10002fa0 <__alt_data_end+0xf8002fa0>
100040e4:	d8c02e17 	ldw	r3,184(sp)
100040e8:	d9002e17 	ldw	r4,184(sp)
100040ec:	d9402e17 	ldw	r5,184(sp)
100040f0:	18c00017 	ldw	r3,0(r3)
100040f4:	21000117 	ldw	r4,4(r4)
100040f8:	29400204 	addi	r5,r5,8
100040fc:	d8c03615 	stw	r3,216(sp)
10004100:	d9003815 	stw	r4,224(sp)
10004104:	d9402e15 	stw	r5,184(sp)
10004108:	003b5006 	br	10002e4c <__alt_data_end+0xf8002e4c>
1000410c:	ac400007 	ldb	r17,0(r21)
10004110:	003a2806 	br	100029b4 <__alt_data_end+0xf80029b4>
10004114:	9080100c 	andi	r2,r18,64
10004118:	1000a826 	beq	r2,zero,100043bc <___vfprintf_internal_r+0x1b90>
1000411c:	d8c02e17 	ldw	r3,184(sp)
10004120:	002d883a 	mov	r22,zero
10004124:	1cc0000b 	ldhu	r19,0(r3)
10004128:	18c00104 	addi	r3,r3,4
1000412c:	d8c02e15 	stw	r3,184(sp)
10004130:	003caf06 	br	100033f0 <__alt_data_end+0xf80033f0>
10004134:	d9002e17 	ldw	r4,184(sp)
10004138:	d9402a17 	ldw	r5,168(sp)
1000413c:	002d883a 	mov	r22,zero
10004140:	20800104 	addi	r2,r4,4
10004144:	24c00017 	ldw	r19,0(r4)
10004148:	283ebb0e 	bge	r5,zero,10003c38 <__alt_data_end+0xf8003c38>
1000414c:	003ef106 	br	10003d14 <__alt_data_end+0xf8003d14>
10004150:	9080040c 	andi	r2,r18,16
10004154:	1000921e 	bne	r2,zero,100043a0 <___vfprintf_internal_r+0x1b74>
10004158:	9480100c 	andi	r18,r18,64
1000415c:	90013926 	beq	r18,zero,10004644 <___vfprintf_internal_r+0x1e18>
10004160:	d9402e17 	ldw	r5,184(sp)
10004164:	d8c02f17 	ldw	r3,188(sp)
10004168:	28800017 	ldw	r2,0(r5)
1000416c:	29400104 	addi	r5,r5,4
10004170:	d9402e15 	stw	r5,184(sp)
10004174:	10c0000d 	sth	r3,0(r2)
10004178:	0039e406 	br	1000290c <__alt_data_end+0xf800290c>
1000417c:	9080100c 	andi	r2,r18,64
10004180:	10008026 	beq	r2,zero,10004384 <___vfprintf_internal_r+0x1b58>
10004184:	d8802e17 	ldw	r2,184(sp)
10004188:	14c0000f 	ldh	r19,0(r2)
1000418c:	10800104 	addi	r2,r2,4
10004190:	d8802e15 	stw	r2,184(sp)
10004194:	982dd7fa 	srai	r22,r19,31
10004198:	b005883a 	mov	r2,r22
1000419c:	003af706 	br	10002d7c <__alt_data_end+0xf8002d7c>
100041a0:	9080100c 	andi	r2,r18,64
100041a4:	d8002785 	stb	zero,158(sp)
100041a8:	10008a1e 	bne	r2,zero,100043d4 <___vfprintf_internal_r+0x1ba8>
100041ac:	d9002e17 	ldw	r4,184(sp)
100041b0:	d9402a17 	ldw	r5,168(sp)
100041b4:	002d883a 	mov	r22,zero
100041b8:	20800104 	addi	r2,r4,4
100041bc:	24c00017 	ldw	r19,0(r4)
100041c0:	283e4b0e 	bge	r5,zero,10003af0 <__alt_data_end+0xf8003af0>
100041c4:	9d86b03a 	or	r3,r19,r22
100041c8:	d8802e15 	stw	r2,184(sp)
100041cc:	183e4c1e 	bne	r3,zero,10003b00 <__alt_data_end+0xf8003b00>
100041d0:	0039883a 	mov	fp,zero
100041d4:	0005883a 	mov	r2,zero
100041d8:	003d4006 	br	100036dc <__alt_data_end+0xf80036dc>
100041dc:	01440074 	movhi	r5,4097
100041e0:	2949d784 	addi	r5,r5,10078
100041e4:	d9402c15 	stw	r5,176(sp)
100041e8:	d9402c17 	ldw	r5,176(sp)
100041ec:	1c47883a 	add	r3,r3,r17
100041f0:	10800044 	addi	r2,r2,1
100041f4:	41400015 	stw	r5,0(r8)
100041f8:	44400115 	stw	r17,4(r8)
100041fc:	d8c02015 	stw	r3,128(sp)
10004200:	d8801f15 	stw	r2,124(sp)
10004204:	010001c4 	movi	r4,7
10004208:	20bec816 	blt	r4,r2,10003d2c <__alt_data_end+0xf8003d2c>
1000420c:	42000204 	addi	r8,r8,8
10004210:	003ecd06 	br	10003d48 <__alt_data_end+0xf8003d48>
10004214:	d9002a17 	ldw	r4,168(sp)
10004218:	d8002785 	stb	zero,158(sp)
1000421c:	203d2d16 	blt	r4,zero,100036d4 <__alt_data_end+0xf80036d4>
10004220:	00bfdfc4 	movi	r2,-129
10004224:	90a4703a 	and	r18,r18,r2
10004228:	003a6106 	br	10002bb0 <__alt_data_end+0xf8002bb0>
1000422c:	01040074 	movhi	r4,4097
10004230:	2109d784 	addi	r4,r4,10078
10004234:	d9002c15 	stw	r4,176(sp)
10004238:	003bea06 	br	100031e4 <__alt_data_end+0xf80031e4>
1000423c:	d9002d17 	ldw	r4,180(sp)
10004240:	d9801e04 	addi	r6,sp,120
10004244:	b80b883a 	mov	r5,r23
10004248:	000a0680 	call	1000a068 <__sprint_r>
1000424c:	103a7b1e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
10004250:	d8c02017 	ldw	r3,128(sp)
10004254:	da000404 	addi	r8,sp,16
10004258:	003d4106 	br	10003760 <__alt_data_end+0xf8003760>
1000425c:	d8801f17 	ldw	r2,124(sp)
10004260:	01440074 	movhi	r5,4097
10004264:	01000044 	movi	r4,1
10004268:	18c00044 	addi	r3,r3,1
1000426c:	10800044 	addi	r2,r2,1
10004270:	2949d704 	addi	r5,r5,10076
10004274:	41000115 	stw	r4,4(r8)
10004278:	41400015 	stw	r5,0(r8)
1000427c:	d8c02015 	stw	r3,128(sp)
10004280:	d8801f15 	stw	r2,124(sp)
10004284:	010001c4 	movi	r4,7
10004288:	20805c16 	blt	r4,r2,100043fc <___vfprintf_internal_r+0x1bd0>
1000428c:	42000204 	addi	r8,r8,8
10004290:	8800041e 	bne	r17,zero,100042a4 <___vfprintf_internal_r+0x1a78>
10004294:	d8803317 	ldw	r2,204(sp)
10004298:	1000021e 	bne	r2,zero,100042a4 <___vfprintf_internal_r+0x1a78>
1000429c:	9080004c 	andi	r2,r18,1
100042a0:	103be726 	beq	r2,zero,10003240 <__alt_data_end+0xf8003240>
100042a4:	d9003717 	ldw	r4,220(sp)
100042a8:	d8801f17 	ldw	r2,124(sp)
100042ac:	d9403417 	ldw	r5,208(sp)
100042b0:	20c7883a 	add	r3,r4,r3
100042b4:	10800044 	addi	r2,r2,1
100042b8:	41000115 	stw	r4,4(r8)
100042bc:	41400015 	stw	r5,0(r8)
100042c0:	d8c02015 	stw	r3,128(sp)
100042c4:	d8801f15 	stw	r2,124(sp)
100042c8:	010001c4 	movi	r4,7
100042cc:	20812116 	blt	r4,r2,10004754 <___vfprintf_internal_r+0x1f28>
100042d0:	42000204 	addi	r8,r8,8
100042d4:	0463c83a 	sub	r17,zero,r17
100042d8:	0440730e 	bge	zero,r17,100044a8 <___vfprintf_internal_r+0x1c7c>
100042dc:	05800404 	movi	r22,16
100042e0:	b440860e 	bge	r22,r17,100044fc <___vfprintf_internal_r+0x1cd0>
100042e4:	01440074 	movhi	r5,4097
100042e8:	2949d784 	addi	r5,r5,10078
100042ec:	d9402c15 	stw	r5,176(sp)
100042f0:	070001c4 	movi	fp,7
100042f4:	dcc02d17 	ldw	r19,180(sp)
100042f8:	00000306 	br	10004308 <___vfprintf_internal_r+0x1adc>
100042fc:	42000204 	addi	r8,r8,8
10004300:	8c7ffc04 	addi	r17,r17,-16
10004304:	b440800e 	bge	r22,r17,10004508 <___vfprintf_internal_r+0x1cdc>
10004308:	18c00404 	addi	r3,r3,16
1000430c:	10800044 	addi	r2,r2,1
10004310:	45000015 	stw	r20,0(r8)
10004314:	45800115 	stw	r22,4(r8)
10004318:	d8c02015 	stw	r3,128(sp)
1000431c:	d8801f15 	stw	r2,124(sp)
10004320:	e0bff60e 	bge	fp,r2,100042fc <__alt_data_end+0xf80042fc>
10004324:	d9801e04 	addi	r6,sp,120
10004328:	b80b883a 	mov	r5,r23
1000432c:	9809883a 	mov	r4,r19
10004330:	000a0680 	call	1000a068 <__sprint_r>
10004334:	103a411e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
10004338:	d8c02017 	ldw	r3,128(sp)
1000433c:	d8801f17 	ldw	r2,124(sp)
10004340:	da000404 	addi	r8,sp,16
10004344:	003fee06 	br	10004300 <__alt_data_end+0xf8004300>
10004348:	00bfffc4 	movi	r2,-1
1000434c:	003a3f06 	br	10002c4c <__alt_data_end+0xf8002c4c>
10004350:	008011c4 	movi	r2,71
10004354:	1440b816 	blt	r2,r17,10004638 <___vfprintf_internal_r+0x1e0c>
10004358:	04040074 	movhi	r16,4097
1000435c:	8409c904 	addi	r16,r16,10020
10004360:	00c000c4 	movi	r3,3
10004364:	00bfdfc4 	movi	r2,-129
10004368:	d8c02915 	stw	r3,164(sp)
1000436c:	90a4703a 	and	r18,r18,r2
10004370:	df002783 	ldbu	fp,158(sp)
10004374:	d8c02b15 	stw	r3,172(sp)
10004378:	d8002a15 	stw	zero,168(sp)
1000437c:	d8003215 	stw	zero,200(sp)
10004380:	003b0706 	br	10002fa0 <__alt_data_end+0xf8002fa0>
10004384:	d8c02e17 	ldw	r3,184(sp)
10004388:	1cc00017 	ldw	r19,0(r3)
1000438c:	18c00104 	addi	r3,r3,4
10004390:	d8c02e15 	stw	r3,184(sp)
10004394:	982dd7fa 	srai	r22,r19,31
10004398:	b005883a 	mov	r2,r22
1000439c:	003a7706 	br	10002d7c <__alt_data_end+0xf8002d7c>
100043a0:	d8c02e17 	ldw	r3,184(sp)
100043a4:	d9002f17 	ldw	r4,188(sp)
100043a8:	18800017 	ldw	r2,0(r3)
100043ac:	18c00104 	addi	r3,r3,4
100043b0:	d8c02e15 	stw	r3,184(sp)
100043b4:	11000015 	stw	r4,0(r2)
100043b8:	00395406 	br	1000290c <__alt_data_end+0xf800290c>
100043bc:	d9002e17 	ldw	r4,184(sp)
100043c0:	002d883a 	mov	r22,zero
100043c4:	24c00017 	ldw	r19,0(r4)
100043c8:	21000104 	addi	r4,r4,4
100043cc:	d9002e15 	stw	r4,184(sp)
100043d0:	003c0706 	br	100033f0 <__alt_data_end+0xf80033f0>
100043d4:	d9402e17 	ldw	r5,184(sp)
100043d8:	d8c02a17 	ldw	r3,168(sp)
100043dc:	002d883a 	mov	r22,zero
100043e0:	28800104 	addi	r2,r5,4
100043e4:	2cc0000b 	ldhu	r19,0(r5)
100043e8:	183dc10e 	bge	r3,zero,10003af0 <__alt_data_end+0xf8003af0>
100043ec:	003f7506 	br	100041c4 <__alt_data_end+0xf80041c4>
100043f0:	04040074 	movhi	r16,4097
100043f4:	8409c704 	addi	r16,r16,10012
100043f8:	003aa706 	br	10002e98 <__alt_data_end+0xf8002e98>
100043fc:	d9002d17 	ldw	r4,180(sp)
10004400:	d9801e04 	addi	r6,sp,120
10004404:	b80b883a 	mov	r5,r23
10004408:	000a0680 	call	1000a068 <__sprint_r>
1000440c:	103a0b1e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
10004410:	dc402617 	ldw	r17,152(sp)
10004414:	d8c02017 	ldw	r3,128(sp)
10004418:	da000404 	addi	r8,sp,16
1000441c:	003f9c06 	br	10004290 <__alt_data_end+0xf8004290>
10004420:	ac400043 	ldbu	r17,1(r21)
10004424:	84000814 	ori	r16,r16,32
10004428:	ad400044 	addi	r21,r21,1
1000442c:	8c403fcc 	andi	r17,r17,255
10004430:	8c40201c 	xori	r17,r17,128
10004434:	8c7fe004 	addi	r17,r17,-128
10004438:	00395e06 	br	100029b4 <__alt_data_end+0xf80029b4>
1000443c:	d8c02e15 	stw	r3,184(sp)
10004440:	0039883a 	mov	fp,zero
10004444:	003e3506 	br	10003d1c <__alt_data_end+0xf8003d1c>
10004448:	d9002d17 	ldw	r4,180(sp)
1000444c:	d9801e04 	addi	r6,sp,120
10004450:	b80b883a 	mov	r5,r23
10004454:	000a0680 	call	1000a068 <__sprint_r>
10004458:	1039f81e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
1000445c:	d8c02017 	ldw	r3,128(sp)
10004460:	da000404 	addi	r8,sp,16
10004464:	003cd006 	br	100037a8 <__alt_data_end+0xf80037a8>
10004468:	8009883a 	mov	r4,r16
1000446c:	df003d15 	stw	fp,244(sp)
10004470:	00027440 	call	10002744 <strlen>
10004474:	d8802b15 	stw	r2,172(sp)
10004478:	da003d17 	ldw	r8,244(sp)
1000447c:	103c200e 	bge	r2,zero,10003500 <__alt_data_end+0xf8003500>
10004480:	0005883a 	mov	r2,zero
10004484:	003c1e06 	br	10003500 <__alt_data_end+0xf8003500>
10004488:	d9002d17 	ldw	r4,180(sp)
1000448c:	d9801e04 	addi	r6,sp,120
10004490:	b80b883a 	mov	r5,r23
10004494:	000a0680 	call	1000a068 <__sprint_r>
10004498:	1039e81e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
1000449c:	d8c02017 	ldw	r3,128(sp)
100044a0:	d8801f17 	ldw	r2,124(sp)
100044a4:	da000404 	addi	r8,sp,16
100044a8:	d9403317 	ldw	r5,204(sp)
100044ac:	10800044 	addi	r2,r2,1
100044b0:	44000015 	stw	r16,0(r8)
100044b4:	28c7883a 	add	r3,r5,r3
100044b8:	003b5b06 	br	10003228 <__alt_data_end+0xf8003228>
100044bc:	01040074 	movhi	r4,4097
100044c0:	2109db84 	addi	r4,r4,10094
100044c4:	d9003515 	stw	r4,212(sp)
100044c8:	003af206 	br	10003094 <__alt_data_end+0xf8003094>
100044cc:	013fffc4 	movi	r4,-1
100044d0:	003a0806 	br	10002cf4 <__alt_data_end+0xf8002cf4>
100044d4:	0023883a 	mov	r17,zero
100044d8:	003d9d06 	br	10003b50 <__alt_data_end+0xf8003b50>
100044dc:	d9002d17 	ldw	r4,180(sp)
100044e0:	d9801e04 	addi	r6,sp,120
100044e4:	b80b883a 	mov	r5,r23
100044e8:	000a0680 	call	1000a068 <__sprint_r>
100044ec:	1039d31e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
100044f0:	d8c02017 	ldw	r3,128(sp)
100044f4:	da000404 	addi	r8,sp,16
100044f8:	003d9406 	br	10003b4c <__alt_data_end+0xf8003b4c>
100044fc:	01040074 	movhi	r4,4097
10004500:	2109d784 	addi	r4,r4,10078
10004504:	d9002c15 	stw	r4,176(sp)
10004508:	d9002c17 	ldw	r4,176(sp)
1000450c:	1c47883a 	add	r3,r3,r17
10004510:	10800044 	addi	r2,r2,1
10004514:	41000015 	stw	r4,0(r8)
10004518:	44400115 	stw	r17,4(r8)
1000451c:	d8c02015 	stw	r3,128(sp)
10004520:	d8801f15 	stw	r2,124(sp)
10004524:	010001c4 	movi	r4,7
10004528:	20bfd716 	blt	r4,r2,10004488 <__alt_data_end+0xf8004488>
1000452c:	42000204 	addi	r8,r8,8
10004530:	003fdd06 	br	100044a8 <__alt_data_end+0xf80044a8>
10004534:	d9002d17 	ldw	r4,180(sp)
10004538:	d9801e04 	addi	r6,sp,120
1000453c:	b80b883a 	mov	r5,r23
10004540:	000a0680 	call	1000a068 <__sprint_r>
10004544:	1039bd1e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
10004548:	d8802617 	ldw	r2,152(sp)
1000454c:	d8c02017 	ldw	r3,128(sp)
10004550:	da000404 	addi	r8,sp,16
10004554:	003e1006 	br	10003d98 <__alt_data_end+0xf8003d98>
10004558:	00800044 	movi	r2,1
1000455c:	10803fcc 	andi	r2,r2,255
10004560:	00c00044 	movi	r3,1
10004564:	10fa0d26 	beq	r2,r3,10002d9c <__alt_data_end+0xf8002d9c>
10004568:	00c00084 	movi	r3,2
1000456c:	10fbaf26 	beq	r2,r3,1000342c <__alt_data_end+0xf800342c>
10004570:	003a6d06 	br	10002f28 <__alt_data_end+0xf8002f28>
10004574:	01040074 	movhi	r4,4097
10004578:	2109db84 	addi	r4,r4,10094
1000457c:	d9003515 	stw	r4,212(sp)
10004580:	003b5406 	br	100032d4 <__alt_data_end+0xf80032d4>
10004584:	d8802a17 	ldw	r2,168(sp)
10004588:	00c00184 	movi	r3,6
1000458c:	1880012e 	bgeu	r3,r2,10004594 <___vfprintf_internal_r+0x1d68>
10004590:	1805883a 	mov	r2,r3
10004594:	d8802b15 	stw	r2,172(sp)
10004598:	1000ef16 	blt	r2,zero,10004958 <___vfprintf_internal_r+0x212c>
1000459c:	04040074 	movhi	r16,4097
100045a0:	d8802915 	stw	r2,164(sp)
100045a4:	dcc02e15 	stw	r19,184(sp)
100045a8:	d8002a15 	stw	zero,168(sp)
100045ac:	d8003215 	stw	zero,200(sp)
100045b0:	8409d504 	addi	r16,r16,10068
100045b4:	0039883a 	mov	fp,zero
100045b8:	003a8006 	br	10002fbc <__alt_data_end+0xf8002fbc>
100045bc:	0021883a 	mov	r16,zero
100045c0:	003e0706 	br	10003de0 <__alt_data_end+0xf8003de0>
100045c4:	d9002d17 	ldw	r4,180(sp)
100045c8:	d9801e04 	addi	r6,sp,120
100045cc:	b80b883a 	mov	r5,r23
100045d0:	000a0680 	call	1000a068 <__sprint_r>
100045d4:	1039991e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
100045d8:	d8802617 	ldw	r2,152(sp)
100045dc:	d9403317 	ldw	r5,204(sp)
100045e0:	d8c02017 	ldw	r3,128(sp)
100045e4:	da000404 	addi	r8,sp,16
100045e8:	2885c83a 	sub	r2,r5,r2
100045ec:	003dfb06 	br	10003ddc <__alt_data_end+0xf8003ddc>
100045f0:	9080004c 	andi	r2,r18,1
100045f4:	103e8f1e 	bne	r2,zero,10004034 <__alt_data_end+0xf8004034>
100045f8:	d8802117 	ldw	r2,132(sp)
100045fc:	003e9e06 	br	10004078 <__alt_data_end+0xf8004078>
10004600:	1025883a 	mov	r18,r2
10004604:	0039883a 	mov	fp,zero
10004608:	00800084 	movi	r2,2
1000460c:	003fd306 	br	1000455c <__alt_data_end+0xf800455c>
10004610:	07000b44 	movi	fp,45
10004614:	df002785 	stb	fp,158(sp)
10004618:	003a1b06 	br	10002e88 <__alt_data_end+0xf8002e88>
1000461c:	00c00b44 	movi	r3,45
10004620:	d8c02785 	stb	r3,158(sp)
10004624:	d8802915 	stw	r2,164(sp)
10004628:	dc802c17 	ldw	r18,176(sp)
1000462c:	d8002a15 	stw	zero,168(sp)
10004630:	07000b44 	movi	fp,45
10004634:	003a5e06 	br	10002fb0 <__alt_data_end+0xf8002fb0>
10004638:	04040074 	movhi	r16,4097
1000463c:	8409ca04 	addi	r16,r16,10024
10004640:	003f4706 	br	10004360 <__alt_data_end+0xf8004360>
10004644:	d9002e17 	ldw	r4,184(sp)
10004648:	d9402f17 	ldw	r5,188(sp)
1000464c:	20800017 	ldw	r2,0(r4)
10004650:	21000104 	addi	r4,r4,4
10004654:	d9002e15 	stw	r4,184(sp)
10004658:	11400015 	stw	r5,0(r2)
1000465c:	0038ab06 	br	1000290c <__alt_data_end+0xf800290c>
10004660:	dd802617 	ldw	r22,152(sp)
10004664:	00bfff44 	movi	r2,-3
10004668:	b0801c16 	blt	r22,r2,100046dc <___vfprintf_internal_r+0x1eb0>
1000466c:	d9402a17 	ldw	r5,168(sp)
10004670:	2d801a16 	blt	r5,r22,100046dc <___vfprintf_internal_r+0x1eb0>
10004674:	dd803215 	stw	r22,200(sp)
10004678:	003e8906 	br	100040a0 <__alt_data_end+0xf80040a0>
1000467c:	01040074 	movhi	r4,4097
10004680:	2109d784 	addi	r4,r4,10078
10004684:	d9002c15 	stw	r4,176(sp)
10004688:	003c9106 	br	100038d0 <__alt_data_end+0xf80038d0>
1000468c:	e005883a 	mov	r2,fp
10004690:	003e7906 	br	10004078 <__alt_data_end+0xf8004078>
10004694:	d9002a17 	ldw	r4,168(sp)
10004698:	df002783 	ldbu	fp,158(sp)
1000469c:	dcc02e15 	stw	r19,184(sp)
100046a0:	d9002915 	stw	r4,164(sp)
100046a4:	d9002b15 	stw	r4,172(sp)
100046a8:	d8002a15 	stw	zero,168(sp)
100046ac:	d8003215 	stw	zero,200(sp)
100046b0:	003a3b06 	br	10002fa0 <__alt_data_end+0xf8002fa0>
100046b4:	9080004c 	andi	r2,r18,1
100046b8:	0039883a 	mov	fp,zero
100046bc:	10000426 	beq	r2,zero,100046d0 <___vfprintf_internal_r+0x1ea4>
100046c0:	00800c04 	movi	r2,48
100046c4:	dc001dc4 	addi	r16,sp,119
100046c8:	d8801dc5 	stb	r2,119(sp)
100046cc:	003b6406 	br	10003460 <__alt_data_end+0xf8003460>
100046d0:	d8002b15 	stw	zero,172(sp)
100046d4:	dc001e04 	addi	r16,sp,120
100046d8:	003a2b06 	br	10002f88 <__alt_data_end+0xf8002f88>
100046dc:	8c7fff84 	addi	r17,r17,-2
100046e0:	b5bfffc4 	addi	r22,r22,-1
100046e4:	dd802615 	stw	r22,152(sp)
100046e8:	dc4022c5 	stb	r17,139(sp)
100046ec:	b000bf16 	blt	r22,zero,100049ec <___vfprintf_internal_r+0x21c0>
100046f0:	00800ac4 	movi	r2,43
100046f4:	d8802305 	stb	r2,140(sp)
100046f8:	00800244 	movi	r2,9
100046fc:	15807016 	blt	r2,r22,100048c0 <___vfprintf_internal_r+0x2094>
10004700:	00800c04 	movi	r2,48
10004704:	b5800c04 	addi	r22,r22,48
10004708:	d8802345 	stb	r2,141(sp)
1000470c:	dd802385 	stb	r22,142(sp)
10004710:	d88023c4 	addi	r2,sp,143
10004714:	df0022c4 	addi	fp,sp,139
10004718:	d8c03317 	ldw	r3,204(sp)
1000471c:	1739c83a 	sub	fp,r2,fp
10004720:	d9003317 	ldw	r4,204(sp)
10004724:	e0c7883a 	add	r3,fp,r3
10004728:	df003a15 	stw	fp,232(sp)
1000472c:	d8c02b15 	stw	r3,172(sp)
10004730:	00800044 	movi	r2,1
10004734:	1100b30e 	bge	r2,r4,10004a04 <___vfprintf_internal_r+0x21d8>
10004738:	d8c02b17 	ldw	r3,172(sp)
1000473c:	18c00044 	addi	r3,r3,1
10004740:	d8c02b15 	stw	r3,172(sp)
10004744:	1805883a 	mov	r2,r3
10004748:	1800ac16 	blt	r3,zero,100049fc <___vfprintf_internal_r+0x21d0>
1000474c:	d8003215 	stw	zero,200(sp)
10004750:	003e5d06 	br	100040c8 <__alt_data_end+0xf80040c8>
10004754:	d9002d17 	ldw	r4,180(sp)
10004758:	d9801e04 	addi	r6,sp,120
1000475c:	b80b883a 	mov	r5,r23
10004760:	000a0680 	call	1000a068 <__sprint_r>
10004764:	1039351e 	bne	r2,zero,10002c3c <__alt_data_end+0xf8002c3c>
10004768:	dc402617 	ldw	r17,152(sp)
1000476c:	d8c02017 	ldw	r3,128(sp)
10004770:	d8801f17 	ldw	r2,124(sp)
10004774:	da000404 	addi	r8,sp,16
10004778:	003ed606 	br	100042d4 <__alt_data_end+0xf80042d4>
1000477c:	182b883a 	mov	r21,r3
10004780:	d8002a15 	stw	zero,168(sp)
10004784:	00388c06 	br	100029b8 <__alt_data_end+0xf80029b8>
10004788:	d8802a17 	ldw	r2,168(sp)
1000478c:	103e071e 	bne	r2,zero,10003fac <__alt_data_end+0xf8003fac>
10004790:	dc002a15 	stw	r16,168(sp)
10004794:	003e0506 	br	10003fac <__alt_data_end+0xf8003fac>
10004798:	d9002a17 	ldw	r4,168(sp)
1000479c:	20c00044 	addi	r3,r4,1
100047a0:	003e0f06 	br	10003fe0 <__alt_data_end+0xf8003fe0>
100047a4:	01400184 	movi	r5,6
100047a8:	d9402a15 	stw	r5,168(sp)
100047ac:	003dff06 	br	10003fac <__alt_data_end+0xf8003fac>
100047b0:	d8802104 	addi	r2,sp,132
100047b4:	d8800315 	stw	r2,12(sp)
100047b8:	d8802504 	addi	r2,sp,148
100047bc:	d8800215 	stw	r2,8(sp)
100047c0:	d8802604 	addi	r2,sp,152
100047c4:	d8800115 	stw	r2,4(sp)
100047c8:	d8802a17 	ldw	r2,168(sp)
100047cc:	d9403617 	ldw	r5,216(sp)
100047d0:	d9002d17 	ldw	r4,180(sp)
100047d4:	d8800015 	stw	r2,0(sp)
100047d8:	01c000c4 	movi	r7,3
100047dc:	980d883a 	mov	r6,r19
100047e0:	da003d15 	stw	r8,244(sp)
100047e4:	0004f5c0 	call	10004f5c <_dtoa_r>
100047e8:	d8c02a17 	ldw	r3,168(sp)
100047ec:	da003d17 	ldw	r8,244(sp)
100047f0:	1021883a 	mov	r16,r2
100047f4:	10f9883a 	add	fp,r2,r3
100047f8:	81000007 	ldb	r4,0(r16)
100047fc:	00800c04 	movi	r2,48
10004800:	20805e26 	beq	r4,r2,1000497c <___vfprintf_internal_r+0x2150>
10004804:	d8c02617 	ldw	r3,152(sp)
10004808:	e0f9883a 	add	fp,fp,r3
1000480c:	003e0a06 	br	10004038 <__alt_data_end+0xf8004038>
10004810:	00c00b44 	movi	r3,45
10004814:	24e0003c 	xorhi	r19,r4,32768
10004818:	d8c02905 	stb	r3,164(sp)
1000481c:	003de906 	br	10003fc4 <__alt_data_end+0xf8003fc4>
10004820:	d8c03217 	ldw	r3,200(sp)
10004824:	00c07a0e 	bge	zero,r3,10004a10 <___vfprintf_internal_r+0x21e4>
10004828:	00800044 	movi	r2,1
1000482c:	d9003317 	ldw	r4,204(sp)
10004830:	1105883a 	add	r2,r2,r4
10004834:	d8802b15 	stw	r2,172(sp)
10004838:	10004e16 	blt	r2,zero,10004974 <___vfprintf_internal_r+0x2148>
1000483c:	044019c4 	movi	r17,103
10004840:	003e2106 	br	100040c8 <__alt_data_end+0xf80040c8>
10004844:	d9002a17 	ldw	r4,168(sp)
10004848:	d8802104 	addi	r2,sp,132
1000484c:	d8800315 	stw	r2,12(sp)
10004850:	d9000015 	stw	r4,0(sp)
10004854:	d8802504 	addi	r2,sp,148
10004858:	d9403617 	ldw	r5,216(sp)
1000485c:	d9002d17 	ldw	r4,180(sp)
10004860:	d8800215 	stw	r2,8(sp)
10004864:	d8802604 	addi	r2,sp,152
10004868:	d8800115 	stw	r2,4(sp)
1000486c:	01c000c4 	movi	r7,3
10004870:	980d883a 	mov	r6,r19
10004874:	da003d15 	stw	r8,244(sp)
10004878:	0004f5c0 	call	10004f5c <_dtoa_r>
1000487c:	d8c02a17 	ldw	r3,168(sp)
10004880:	da003d17 	ldw	r8,244(sp)
10004884:	1021883a 	mov	r16,r2
10004888:	00801184 	movi	r2,70
1000488c:	80f9883a 	add	fp,r16,r3
10004890:	88bfd926 	beq	r17,r2,100047f8 <__alt_data_end+0xf80047f8>
10004894:	003de806 	br	10004038 <__alt_data_end+0xf8004038>
10004898:	d9002a17 	ldw	r4,168(sp)
1000489c:	00c04d0e 	bge	zero,r3,100049d4 <___vfprintf_internal_r+0x21a8>
100048a0:	2000441e 	bne	r4,zero,100049b4 <___vfprintf_internal_r+0x2188>
100048a4:	9480004c 	andi	r18,r18,1
100048a8:	9000421e 	bne	r18,zero,100049b4 <___vfprintf_internal_r+0x2188>
100048ac:	1805883a 	mov	r2,r3
100048b0:	18006f16 	blt	r3,zero,10004a70 <___vfprintf_internal_r+0x2244>
100048b4:	d8c03217 	ldw	r3,200(sp)
100048b8:	d8c02b15 	stw	r3,172(sp)
100048bc:	003e0206 	br	100040c8 <__alt_data_end+0xf80040c8>
100048c0:	df0022c4 	addi	fp,sp,139
100048c4:	dc002a15 	stw	r16,168(sp)
100048c8:	4027883a 	mov	r19,r8
100048cc:	e021883a 	mov	r16,fp
100048d0:	b009883a 	mov	r4,r22
100048d4:	01400284 	movi	r5,10
100048d8:	00024580 	call	10002458 <__modsi3>
100048dc:	10800c04 	addi	r2,r2,48
100048e0:	843fffc4 	addi	r16,r16,-1
100048e4:	b009883a 	mov	r4,r22
100048e8:	01400284 	movi	r5,10
100048ec:	80800005 	stb	r2,0(r16)
100048f0:	00023d40 	call	100023d4 <__divsi3>
100048f4:	102d883a 	mov	r22,r2
100048f8:	00800244 	movi	r2,9
100048fc:	15bff416 	blt	r2,r22,100048d0 <__alt_data_end+0xf80048d0>
10004900:	9811883a 	mov	r8,r19
10004904:	b0800c04 	addi	r2,r22,48
10004908:	8027883a 	mov	r19,r16
1000490c:	997fffc4 	addi	r5,r19,-1
10004910:	98bfffc5 	stb	r2,-1(r19)
10004914:	dc002a17 	ldw	r16,168(sp)
10004918:	2f006d2e 	bgeu	r5,fp,10004ad0 <___vfprintf_internal_r+0x22a4>
1000491c:	d9c02384 	addi	r7,sp,142
10004920:	3ccfc83a 	sub	r7,r7,r19
10004924:	d9002344 	addi	r4,sp,141
10004928:	e1cf883a 	add	r7,fp,r7
1000492c:	00000106 	br	10004934 <___vfprintf_internal_r+0x2108>
10004930:	28800003 	ldbu	r2,0(r5)
10004934:	20800005 	stb	r2,0(r4)
10004938:	21000044 	addi	r4,r4,1
1000493c:	29400044 	addi	r5,r5,1
10004940:	393ffb1e 	bne	r7,r4,10004930 <__alt_data_end+0xf8004930>
10004944:	d8802304 	addi	r2,sp,140
10004948:	14c5c83a 	sub	r2,r2,r19
1000494c:	d8c02344 	addi	r3,sp,141
10004950:	1885883a 	add	r2,r3,r2
10004954:	003f7006 	br	10004718 <__alt_data_end+0xf8004718>
10004958:	0005883a 	mov	r2,zero
1000495c:	003f0f06 	br	1000459c <__alt_data_end+0xf800459c>
10004960:	d8c03217 	ldw	r3,200(sp)
10004964:	18c00044 	addi	r3,r3,1
10004968:	d8c02b15 	stw	r3,172(sp)
1000496c:	1805883a 	mov	r2,r3
10004970:	183fb20e 	bge	r3,zero,1000483c <__alt_data_end+0xf800483c>
10004974:	0005883a 	mov	r2,zero
10004978:	003fb006 	br	1000483c <__alt_data_end+0xf800483c>
1000497c:	d9003617 	ldw	r4,216(sp)
10004980:	000d883a 	mov	r6,zero
10004984:	000f883a 	mov	r7,zero
10004988:	980b883a 	mov	r5,r19
1000498c:	d8c03c15 	stw	r3,240(sp)
10004990:	da003d15 	stw	r8,244(sp)
10004994:	000df200 	call	1000df20 <__eqdf2>
10004998:	d8c03c17 	ldw	r3,240(sp)
1000499c:	da003d17 	ldw	r8,244(sp)
100049a0:	103f9826 	beq	r2,zero,10004804 <__alt_data_end+0xf8004804>
100049a4:	00800044 	movi	r2,1
100049a8:	10c7c83a 	sub	r3,r2,r3
100049ac:	d8c02615 	stw	r3,152(sp)
100049b0:	003f9506 	br	10004808 <__alt_data_end+0xf8004808>
100049b4:	d9002a17 	ldw	r4,168(sp)
100049b8:	d8c03217 	ldw	r3,200(sp)
100049bc:	20800044 	addi	r2,r4,1
100049c0:	1885883a 	add	r2,r3,r2
100049c4:	d8802b15 	stw	r2,172(sp)
100049c8:	103dbf0e 	bge	r2,zero,100040c8 <__alt_data_end+0xf80040c8>
100049cc:	0005883a 	mov	r2,zero
100049d0:	003dbd06 	br	100040c8 <__alt_data_end+0xf80040c8>
100049d4:	2000201e 	bne	r4,zero,10004a58 <___vfprintf_internal_r+0x222c>
100049d8:	9480004c 	andi	r18,r18,1
100049dc:	90001e1e 	bne	r18,zero,10004a58 <___vfprintf_internal_r+0x222c>
100049e0:	00800044 	movi	r2,1
100049e4:	d8802b15 	stw	r2,172(sp)
100049e8:	003db706 	br	100040c8 <__alt_data_end+0xf80040c8>
100049ec:	00800b44 	movi	r2,45
100049f0:	05adc83a 	sub	r22,zero,r22
100049f4:	d8802305 	stb	r2,140(sp)
100049f8:	003f3f06 	br	100046f8 <__alt_data_end+0xf80046f8>
100049fc:	0005883a 	mov	r2,zero
10004a00:	003f5206 	br	1000474c <__alt_data_end+0xf800474c>
10004a04:	90a4703a 	and	r18,r18,r2
10004a08:	903f4e26 	beq	r18,zero,10004744 <__alt_data_end+0xf8004744>
10004a0c:	003f4a06 	br	10004738 <__alt_data_end+0xf8004738>
10004a10:	00800084 	movi	r2,2
10004a14:	10c5c83a 	sub	r2,r2,r3
10004a18:	003f8406 	br	1000482c <__alt_data_end+0xf800482c>
10004a1c:	d9402e17 	ldw	r5,184(sp)
10004a20:	d9002e17 	ldw	r4,184(sp)
10004a24:	ac400043 	ldbu	r17,1(r21)
10004a28:	29400017 	ldw	r5,0(r5)
10004a2c:	20800104 	addi	r2,r4,4
10004a30:	d8802e15 	stw	r2,184(sp)
10004a34:	d9402a15 	stw	r5,168(sp)
10004a38:	182b883a 	mov	r21,r3
10004a3c:	283e7b0e 	bge	r5,zero,1000442c <__alt_data_end+0xf800442c>
10004a40:	8c403fcc 	andi	r17,r17,255
10004a44:	017fffc4 	movi	r5,-1
10004a48:	8c40201c 	xori	r17,r17,128
10004a4c:	d9402a15 	stw	r5,168(sp)
10004a50:	8c7fe004 	addi	r17,r17,-128
10004a54:	0037d706 	br	100029b4 <__alt_data_end+0xf80029b4>
10004a58:	d8c02a17 	ldw	r3,168(sp)
10004a5c:	18c00084 	addi	r3,r3,2
10004a60:	d8c02b15 	stw	r3,172(sp)
10004a64:	1805883a 	mov	r2,r3
10004a68:	183d970e 	bge	r3,zero,100040c8 <__alt_data_end+0xf80040c8>
10004a6c:	003fd706 	br	100049cc <__alt_data_end+0xf80049cc>
10004a70:	0005883a 	mov	r2,zero
10004a74:	003f8f06 	br	100048b4 <__alt_data_end+0xf80048b4>
10004a78:	9080004c 	andi	r2,r18,1
10004a7c:	103f821e 	bne	r2,zero,10004888 <__alt_data_end+0xf8004888>
10004a80:	d8802117 	ldw	r2,132(sp)
10004a84:	1405c83a 	sub	r2,r2,r16
10004a88:	d8803315 	stw	r2,204(sp)
10004a8c:	b47ef426 	beq	r22,r17,10004660 <__alt_data_end+0xf8004660>
10004a90:	dd802617 	ldw	r22,152(sp)
10004a94:	003f1206 	br	100046e0 <__alt_data_end+0xf80046e0>
10004a98:	d8c02b03 	ldbu	r3,172(sp)
10004a9c:	d8c02785 	stb	r3,158(sp)
10004aa0:	0038df06 	br	10002e20 <__alt_data_end+0xf8002e20>
10004aa4:	d8c02b03 	ldbu	r3,172(sp)
10004aa8:	d8c02785 	stb	r3,158(sp)
10004aac:	0038aa06 	br	10002d58 <__alt_data_end+0xf8002d58>
10004ab0:	d8c02b03 	ldbu	r3,172(sp)
10004ab4:	d8c02785 	stb	r3,158(sp)
10004ab8:	003a4306 	br	100033c8 <__alt_data_end+0xf80033c8>
10004abc:	d8c02b03 	ldbu	r3,172(sp)
10004ac0:	d8c02785 	stb	r3,158(sp)
10004ac4:	003af506 	br	1000369c <__alt_data_end+0xf800369c>
10004ac8:	0005883a 	mov	r2,zero
10004acc:	003d7b06 	br	100040bc <__alt_data_end+0xf80040bc>
10004ad0:	d8802344 	addi	r2,sp,141
10004ad4:	003f1006 	br	10004718 <__alt_data_end+0xf8004718>
10004ad8:	d8c02b03 	ldbu	r3,172(sp)
10004adc:	d8c02785 	stb	r3,158(sp)
10004ae0:	0038fd06 	br	10002ed8 <__alt_data_end+0xf8002ed8>
10004ae4:	d8c02b03 	ldbu	r3,172(sp)
10004ae8:	d8c02785 	stb	r3,158(sp)
10004aec:	003a9706 	br	1000354c <__alt_data_end+0xf800354c>
10004af0:	d8c02b03 	ldbu	r3,172(sp)
10004af4:	d8c02785 	stb	r3,158(sp)
10004af8:	003a1806 	br	1000335c <__alt_data_end+0xf800335c>
10004afc:	d8c02b03 	ldbu	r3,172(sp)
10004b00:	d8c02785 	stb	r3,158(sp)
10004b04:	003abe06 	br	10003600 <__alt_data_end+0xf8003600>

10004b08 <__vfprintf_internal>:
10004b08:	00840074 	movhi	r2,4097
10004b0c:	10913204 	addi	r2,r2,17608
10004b10:	300f883a 	mov	r7,r6
10004b14:	280d883a 	mov	r6,r5
10004b18:	200b883a 	mov	r5,r4
10004b1c:	11000017 	ldw	r4,0(r2)
10004b20:	000282c1 	jmpi	1000282c <___vfprintf_internal_r>

10004b24 <__sbprintf>:
10004b24:	2880030b 	ldhu	r2,12(r5)
10004b28:	2ac01917 	ldw	r11,100(r5)
10004b2c:	2a80038b 	ldhu	r10,14(r5)
10004b30:	2a400717 	ldw	r9,28(r5)
10004b34:	2a000917 	ldw	r8,36(r5)
10004b38:	defee204 	addi	sp,sp,-1144
10004b3c:	00c10004 	movi	r3,1024
10004b40:	dc011a15 	stw	r16,1128(sp)
10004b44:	10bfff4c 	andi	r2,r2,65533
10004b48:	2821883a 	mov	r16,r5
10004b4c:	d8cb883a 	add	r5,sp,r3
10004b50:	dc811c15 	stw	r18,1136(sp)
10004b54:	dc411b15 	stw	r17,1132(sp)
10004b58:	dfc11d15 	stw	ra,1140(sp)
10004b5c:	2025883a 	mov	r18,r4
10004b60:	d881030d 	sth	r2,1036(sp)
10004b64:	dac11915 	stw	r11,1124(sp)
10004b68:	da81038d 	sth	r10,1038(sp)
10004b6c:	da410715 	stw	r9,1052(sp)
10004b70:	da010915 	stw	r8,1060(sp)
10004b74:	dec10015 	stw	sp,1024(sp)
10004b78:	dec10415 	stw	sp,1040(sp)
10004b7c:	d8c10215 	stw	r3,1032(sp)
10004b80:	d8c10515 	stw	r3,1044(sp)
10004b84:	d8010615 	stw	zero,1048(sp)
10004b88:	000282c0 	call	1000282c <___vfprintf_internal_r>
10004b8c:	1023883a 	mov	r17,r2
10004b90:	10000416 	blt	r2,zero,10004ba4 <__sbprintf+0x80>
10004b94:	d9410004 	addi	r5,sp,1024
10004b98:	9009883a 	mov	r4,r18
10004b9c:	00068000 	call	10006800 <_fflush_r>
10004ba0:	10000d1e 	bne	r2,zero,10004bd8 <__sbprintf+0xb4>
10004ba4:	d881030b 	ldhu	r2,1036(sp)
10004ba8:	1080100c 	andi	r2,r2,64
10004bac:	10000326 	beq	r2,zero,10004bbc <__sbprintf+0x98>
10004bb0:	8080030b 	ldhu	r2,12(r16)
10004bb4:	10801014 	ori	r2,r2,64
10004bb8:	8080030d 	sth	r2,12(r16)
10004bbc:	8805883a 	mov	r2,r17
10004bc0:	dfc11d17 	ldw	ra,1140(sp)
10004bc4:	dc811c17 	ldw	r18,1136(sp)
10004bc8:	dc411b17 	ldw	r17,1132(sp)
10004bcc:	dc011a17 	ldw	r16,1128(sp)
10004bd0:	dec11e04 	addi	sp,sp,1144
10004bd4:	f800283a 	ret
10004bd8:	047fffc4 	movi	r17,-1
10004bdc:	003ff106 	br	10004ba4 <__alt_data_end+0xf8004ba4>

10004be0 <__swsetup_r>:
10004be0:	00840074 	movhi	r2,4097
10004be4:	defffd04 	addi	sp,sp,-12
10004be8:	10913204 	addi	r2,r2,17608
10004bec:	dc400115 	stw	r17,4(sp)
10004bf0:	2023883a 	mov	r17,r4
10004bf4:	11000017 	ldw	r4,0(r2)
10004bf8:	dc000015 	stw	r16,0(sp)
10004bfc:	dfc00215 	stw	ra,8(sp)
10004c00:	2821883a 	mov	r16,r5
10004c04:	20000226 	beq	r4,zero,10004c10 <__swsetup_r+0x30>
10004c08:	20800e17 	ldw	r2,56(r4)
10004c0c:	10003126 	beq	r2,zero,10004cd4 <__swsetup_r+0xf4>
10004c10:	8080030b 	ldhu	r2,12(r16)
10004c14:	10c0020c 	andi	r3,r2,8
10004c18:	1009883a 	mov	r4,r2
10004c1c:	18000f26 	beq	r3,zero,10004c5c <__swsetup_r+0x7c>
10004c20:	80c00417 	ldw	r3,16(r16)
10004c24:	18001526 	beq	r3,zero,10004c7c <__swsetup_r+0x9c>
10004c28:	1100004c 	andi	r4,r2,1
10004c2c:	20001c1e 	bne	r4,zero,10004ca0 <__swsetup_r+0xc0>
10004c30:	1080008c 	andi	r2,r2,2
10004c34:	1000291e 	bne	r2,zero,10004cdc <__swsetup_r+0xfc>
10004c38:	80800517 	ldw	r2,20(r16)
10004c3c:	80800215 	stw	r2,8(r16)
10004c40:	18001c26 	beq	r3,zero,10004cb4 <__swsetup_r+0xd4>
10004c44:	0005883a 	mov	r2,zero
10004c48:	dfc00217 	ldw	ra,8(sp)
10004c4c:	dc400117 	ldw	r17,4(sp)
10004c50:	dc000017 	ldw	r16,0(sp)
10004c54:	dec00304 	addi	sp,sp,12
10004c58:	f800283a 	ret
10004c5c:	2080040c 	andi	r2,r4,16
10004c60:	10002e26 	beq	r2,zero,10004d1c <__swsetup_r+0x13c>
10004c64:	2080010c 	andi	r2,r4,4
10004c68:	10001e1e 	bne	r2,zero,10004ce4 <__swsetup_r+0x104>
10004c6c:	80c00417 	ldw	r3,16(r16)
10004c70:	20800214 	ori	r2,r4,8
10004c74:	8080030d 	sth	r2,12(r16)
10004c78:	183feb1e 	bne	r3,zero,10004c28 <__alt_data_end+0xf8004c28>
10004c7c:	1100a00c 	andi	r4,r2,640
10004c80:	01408004 	movi	r5,512
10004c84:	217fe826 	beq	r4,r5,10004c28 <__alt_data_end+0xf8004c28>
10004c88:	800b883a 	mov	r5,r16
10004c8c:	8809883a 	mov	r4,r17
10004c90:	00077f80 	call	100077f8 <__smakebuf_r>
10004c94:	8080030b 	ldhu	r2,12(r16)
10004c98:	80c00417 	ldw	r3,16(r16)
10004c9c:	003fe206 	br	10004c28 <__alt_data_end+0xf8004c28>
10004ca0:	80800517 	ldw	r2,20(r16)
10004ca4:	80000215 	stw	zero,8(r16)
10004ca8:	0085c83a 	sub	r2,zero,r2
10004cac:	80800615 	stw	r2,24(r16)
10004cb0:	183fe41e 	bne	r3,zero,10004c44 <__alt_data_end+0xf8004c44>
10004cb4:	80c0030b 	ldhu	r3,12(r16)
10004cb8:	0005883a 	mov	r2,zero
10004cbc:	1900200c 	andi	r4,r3,128
10004cc0:	203fe126 	beq	r4,zero,10004c48 <__alt_data_end+0xf8004c48>
10004cc4:	18c01014 	ori	r3,r3,64
10004cc8:	80c0030d 	sth	r3,12(r16)
10004ccc:	00bfffc4 	movi	r2,-1
10004cd0:	003fdd06 	br	10004c48 <__alt_data_end+0xf8004c48>
10004cd4:	0006bec0 	call	10006bec <__sinit>
10004cd8:	003fcd06 	br	10004c10 <__alt_data_end+0xf8004c10>
10004cdc:	0005883a 	mov	r2,zero
10004ce0:	003fd606 	br	10004c3c <__alt_data_end+0xf8004c3c>
10004ce4:	81400c17 	ldw	r5,48(r16)
10004ce8:	28000626 	beq	r5,zero,10004d04 <__swsetup_r+0x124>
10004cec:	80801004 	addi	r2,r16,64
10004cf0:	28800326 	beq	r5,r2,10004d00 <__swsetup_r+0x120>
10004cf4:	8809883a 	mov	r4,r17
10004cf8:	0006d600 	call	10006d60 <_free_r>
10004cfc:	8100030b 	ldhu	r4,12(r16)
10004d00:	80000c15 	stw	zero,48(r16)
10004d04:	80c00417 	ldw	r3,16(r16)
10004d08:	00bff6c4 	movi	r2,-37
10004d0c:	1108703a 	and	r4,r2,r4
10004d10:	80000115 	stw	zero,4(r16)
10004d14:	80c00015 	stw	r3,0(r16)
10004d18:	003fd506 	br	10004c70 <__alt_data_end+0xf8004c70>
10004d1c:	00800244 	movi	r2,9
10004d20:	88800015 	stw	r2,0(r17)
10004d24:	20801014 	ori	r2,r4,64
10004d28:	8080030d 	sth	r2,12(r16)
10004d2c:	00bfffc4 	movi	r2,-1
10004d30:	003fc506 	br	10004c48 <__alt_data_end+0xf8004c48>

10004d34 <quorem>:
10004d34:	defff204 	addi	sp,sp,-56
10004d38:	ddc00b15 	stw	r23,44(sp)
10004d3c:	20800417 	ldw	r2,16(r4)
10004d40:	2dc00417 	ldw	r23,16(r5)
10004d44:	dfc00d15 	stw	ra,52(sp)
10004d48:	df000c15 	stw	fp,48(sp)
10004d4c:	dd800a15 	stw	r22,40(sp)
10004d50:	dd400915 	stw	r21,36(sp)
10004d54:	dd000815 	stw	r20,32(sp)
10004d58:	dcc00715 	stw	r19,28(sp)
10004d5c:	dc800615 	stw	r18,24(sp)
10004d60:	dc400515 	stw	r17,20(sp)
10004d64:	dc000415 	stw	r16,16(sp)
10004d68:	15c07a16 	blt	r2,r23,10004f54 <quorem+0x220>
10004d6c:	bdffffc4 	addi	r23,r23,-1
10004d70:	bde9883a 	add	r20,r23,r23
10004d74:	28c00504 	addi	r3,r5,20
10004d78:	a529883a 	add	r20,r20,r20
10004d7c:	1d39883a 	add	fp,r3,r20
10004d80:	24c00504 	addi	r19,r4,20
10004d84:	d9400215 	stw	r5,8(sp)
10004d88:	9d29883a 	add	r20,r19,r20
10004d8c:	e1400017 	ldw	r5,0(fp)
10004d90:	d9000015 	stw	r4,0(sp)
10004d94:	a1000017 	ldw	r4,0(r20)
10004d98:	29400044 	addi	r5,r5,1
10004d9c:	d8c00115 	stw	r3,4(sp)
10004da0:	dd000315 	stw	r20,12(sp)
10004da4:	00024cc0 	call	100024cc <__udivsi3>
10004da8:	1025883a 	mov	r18,r2
10004dac:	10003026 	beq	r2,zero,10004e70 <quorem+0x13c>
10004db0:	dc400117 	ldw	r17,4(sp)
10004db4:	9829883a 	mov	r20,r19
10004db8:	002d883a 	mov	r22,zero
10004dbc:	0021883a 	mov	r16,zero
10004dc0:	8d400017 	ldw	r21,0(r17)
10004dc4:	900b883a 	mov	r5,r18
10004dc8:	8c400104 	addi	r17,r17,4
10004dcc:	a93fffcc 	andi	r4,r21,65535
10004dd0:	000cc7c0 	call	1000cc7c <__mulsi3>
10004dd4:	a808d43a 	srli	r4,r21,16
10004dd8:	900b883a 	mov	r5,r18
10004ddc:	15ad883a 	add	r22,r2,r22
10004de0:	000cc7c0 	call	1000cc7c <__mulsi3>
10004de4:	a1000017 	ldw	r4,0(r20)
10004de8:	b00cd43a 	srli	r6,r22,16
10004dec:	b0ffffcc 	andi	r3,r22,65535
10004df0:	217fffcc 	andi	r5,r4,65535
10004df4:	2c21883a 	add	r16,r5,r16
10004df8:	80c7c83a 	sub	r3,r16,r3
10004dfc:	2008d43a 	srli	r4,r4,16
10004e00:	1185883a 	add	r2,r2,r6
10004e04:	1821d43a 	srai	r16,r3,16
10004e08:	117fffcc 	andi	r5,r2,65535
10004e0c:	2149c83a 	sub	r4,r4,r5
10004e10:	2421883a 	add	r16,r4,r16
10004e14:	8008943a 	slli	r4,r16,16
10004e18:	18ffffcc 	andi	r3,r3,65535
10004e1c:	102cd43a 	srli	r22,r2,16
10004e20:	20c8b03a 	or	r4,r4,r3
10004e24:	a1000015 	stw	r4,0(r20)
10004e28:	8021d43a 	srai	r16,r16,16
10004e2c:	a5000104 	addi	r20,r20,4
10004e30:	e47fe32e 	bgeu	fp,r17,10004dc0 <__alt_data_end+0xf8004dc0>
10004e34:	d8c00317 	ldw	r3,12(sp)
10004e38:	18800017 	ldw	r2,0(r3)
10004e3c:	10000c1e 	bne	r2,zero,10004e70 <quorem+0x13c>
10004e40:	18bfff04 	addi	r2,r3,-4
10004e44:	9880082e 	bgeu	r19,r2,10004e68 <quorem+0x134>
10004e48:	18ffff17 	ldw	r3,-4(r3)
10004e4c:	18000326 	beq	r3,zero,10004e5c <quorem+0x128>
10004e50:	00000506 	br	10004e68 <quorem+0x134>
10004e54:	10c00017 	ldw	r3,0(r2)
10004e58:	1800031e 	bne	r3,zero,10004e68 <quorem+0x134>
10004e5c:	10bfff04 	addi	r2,r2,-4
10004e60:	bdffffc4 	addi	r23,r23,-1
10004e64:	98bffb36 	bltu	r19,r2,10004e54 <__alt_data_end+0xf8004e54>
10004e68:	d8c00017 	ldw	r3,0(sp)
10004e6c:	1dc00415 	stw	r23,16(r3)
10004e70:	d9400217 	ldw	r5,8(sp)
10004e74:	d9000017 	ldw	r4,0(sp)
10004e78:	0008ff40 	call	10008ff4 <__mcmp>
10004e7c:	10002816 	blt	r2,zero,10004f20 <quorem+0x1ec>
10004e80:	dc400117 	ldw	r17,4(sp)
10004e84:	94800044 	addi	r18,r18,1
10004e88:	980d883a 	mov	r6,r19
10004e8c:	0007883a 	mov	r3,zero
10004e90:	31000017 	ldw	r4,0(r6)
10004e94:	89400017 	ldw	r5,0(r17)
10004e98:	31800104 	addi	r6,r6,4
10004e9c:	20bfffcc 	andi	r2,r4,65535
10004ea0:	10c7883a 	add	r3,r2,r3
10004ea4:	28bfffcc 	andi	r2,r5,65535
10004ea8:	1885c83a 	sub	r2,r3,r2
10004eac:	280ad43a 	srli	r5,r5,16
10004eb0:	2008d43a 	srli	r4,r4,16
10004eb4:	1007d43a 	srai	r3,r2,16
10004eb8:	10bfffcc 	andi	r2,r2,65535
10004ebc:	2149c83a 	sub	r4,r4,r5
10004ec0:	20c9883a 	add	r4,r4,r3
10004ec4:	200a943a 	slli	r5,r4,16
10004ec8:	8c400104 	addi	r17,r17,4
10004ecc:	2007d43a 	srai	r3,r4,16
10004ed0:	2884b03a 	or	r2,r5,r2
10004ed4:	30bfff15 	stw	r2,-4(r6)
10004ed8:	e47fed2e 	bgeu	fp,r17,10004e90 <__alt_data_end+0xf8004e90>
10004edc:	bdc5883a 	add	r2,r23,r23
10004ee0:	1085883a 	add	r2,r2,r2
10004ee4:	9887883a 	add	r3,r19,r2
10004ee8:	18800017 	ldw	r2,0(r3)
10004eec:	10000c1e 	bne	r2,zero,10004f20 <quorem+0x1ec>
10004ef0:	18bfff04 	addi	r2,r3,-4
10004ef4:	9880082e 	bgeu	r19,r2,10004f18 <quorem+0x1e4>
10004ef8:	18ffff17 	ldw	r3,-4(r3)
10004efc:	18000326 	beq	r3,zero,10004f0c <quorem+0x1d8>
10004f00:	00000506 	br	10004f18 <quorem+0x1e4>
10004f04:	10c00017 	ldw	r3,0(r2)
10004f08:	1800031e 	bne	r3,zero,10004f18 <quorem+0x1e4>
10004f0c:	10bfff04 	addi	r2,r2,-4
10004f10:	bdffffc4 	addi	r23,r23,-1
10004f14:	98bffb36 	bltu	r19,r2,10004f04 <__alt_data_end+0xf8004f04>
10004f18:	d8c00017 	ldw	r3,0(sp)
10004f1c:	1dc00415 	stw	r23,16(r3)
10004f20:	9005883a 	mov	r2,r18
10004f24:	dfc00d17 	ldw	ra,52(sp)
10004f28:	df000c17 	ldw	fp,48(sp)
10004f2c:	ddc00b17 	ldw	r23,44(sp)
10004f30:	dd800a17 	ldw	r22,40(sp)
10004f34:	dd400917 	ldw	r21,36(sp)
10004f38:	dd000817 	ldw	r20,32(sp)
10004f3c:	dcc00717 	ldw	r19,28(sp)
10004f40:	dc800617 	ldw	r18,24(sp)
10004f44:	dc400517 	ldw	r17,20(sp)
10004f48:	dc000417 	ldw	r16,16(sp)
10004f4c:	dec00e04 	addi	sp,sp,56
10004f50:	f800283a 	ret
10004f54:	0005883a 	mov	r2,zero
10004f58:	003ff206 	br	10004f24 <__alt_data_end+0xf8004f24>

10004f5c <_dtoa_r>:
10004f5c:	20801017 	ldw	r2,64(r4)
10004f60:	deffde04 	addi	sp,sp,-136
10004f64:	df002015 	stw	fp,128(sp)
10004f68:	dcc01b15 	stw	r19,108(sp)
10004f6c:	dc801a15 	stw	r18,104(sp)
10004f70:	dc401915 	stw	r17,100(sp)
10004f74:	dc001815 	stw	r16,96(sp)
10004f78:	dfc02115 	stw	ra,132(sp)
10004f7c:	ddc01f15 	stw	r23,124(sp)
10004f80:	dd801e15 	stw	r22,120(sp)
10004f84:	dd401d15 	stw	r21,116(sp)
10004f88:	dd001c15 	stw	r20,112(sp)
10004f8c:	d9c00315 	stw	r7,12(sp)
10004f90:	2039883a 	mov	fp,r4
10004f94:	3023883a 	mov	r17,r6
10004f98:	2825883a 	mov	r18,r5
10004f9c:	dc002417 	ldw	r16,144(sp)
10004fa0:	3027883a 	mov	r19,r6
10004fa4:	10000826 	beq	r2,zero,10004fc8 <_dtoa_r+0x6c>
10004fa8:	21801117 	ldw	r6,68(r4)
10004fac:	00c00044 	movi	r3,1
10004fb0:	100b883a 	mov	r5,r2
10004fb4:	1986983a 	sll	r3,r3,r6
10004fb8:	11800115 	stw	r6,4(r2)
10004fbc:	10c00215 	stw	r3,8(r2)
10004fc0:	00087180 	call	10008718 <_Bfree>
10004fc4:	e0001015 	stw	zero,64(fp)
10004fc8:	88002e16 	blt	r17,zero,10005084 <_dtoa_r+0x128>
10004fcc:	80000015 	stw	zero,0(r16)
10004fd0:	889ffc2c 	andhi	r2,r17,32752
10004fd4:	00dffc34 	movhi	r3,32752
10004fd8:	10c01c26 	beq	r2,r3,1000504c <_dtoa_r+0xf0>
10004fdc:	000d883a 	mov	r6,zero
10004fe0:	000f883a 	mov	r7,zero
10004fe4:	9009883a 	mov	r4,r18
10004fe8:	980b883a 	mov	r5,r19
10004fec:	000df200 	call	1000df20 <__eqdf2>
10004ff0:	10002b1e 	bne	r2,zero,100050a0 <_dtoa_r+0x144>
10004ff4:	d9c02317 	ldw	r7,140(sp)
10004ff8:	00800044 	movi	r2,1
10004ffc:	38800015 	stw	r2,0(r7)
10005000:	d8802517 	ldw	r2,148(sp)
10005004:	10019e26 	beq	r2,zero,10005680 <_dtoa_r+0x724>
10005008:	d8c02517 	ldw	r3,148(sp)
1000500c:	00840074 	movhi	r2,4097
10005010:	1089d744 	addi	r2,r2,10077
10005014:	18800015 	stw	r2,0(r3)
10005018:	10bfffc4 	addi	r2,r2,-1
1000501c:	dfc02117 	ldw	ra,132(sp)
10005020:	df002017 	ldw	fp,128(sp)
10005024:	ddc01f17 	ldw	r23,124(sp)
10005028:	dd801e17 	ldw	r22,120(sp)
1000502c:	dd401d17 	ldw	r21,116(sp)
10005030:	dd001c17 	ldw	r20,112(sp)
10005034:	dcc01b17 	ldw	r19,108(sp)
10005038:	dc801a17 	ldw	r18,104(sp)
1000503c:	dc401917 	ldw	r17,100(sp)
10005040:	dc001817 	ldw	r16,96(sp)
10005044:	dec02204 	addi	sp,sp,136
10005048:	f800283a 	ret
1000504c:	d8c02317 	ldw	r3,140(sp)
10005050:	0089c3c4 	movi	r2,9999
10005054:	18800015 	stw	r2,0(r3)
10005058:	90017726 	beq	r18,zero,10005638 <_dtoa_r+0x6dc>
1000505c:	00840074 	movhi	r2,4097
10005060:	1089e304 	addi	r2,r2,10124
10005064:	d9002517 	ldw	r4,148(sp)
10005068:	203fec26 	beq	r4,zero,1000501c <__alt_data_end+0xf800501c>
1000506c:	10c000c7 	ldb	r3,3(r2)
10005070:	1801781e 	bne	r3,zero,10005654 <_dtoa_r+0x6f8>
10005074:	10c000c4 	addi	r3,r2,3
10005078:	d9802517 	ldw	r6,148(sp)
1000507c:	30c00015 	stw	r3,0(r6)
10005080:	003fe606 	br	1000501c <__alt_data_end+0xf800501c>
10005084:	04e00034 	movhi	r19,32768
10005088:	9cffffc4 	addi	r19,r19,-1
1000508c:	00800044 	movi	r2,1
10005090:	8ce6703a 	and	r19,r17,r19
10005094:	80800015 	stw	r2,0(r16)
10005098:	9823883a 	mov	r17,r19
1000509c:	003fcc06 	br	10004fd0 <__alt_data_end+0xf8004fd0>
100050a0:	d8800204 	addi	r2,sp,8
100050a4:	d8800015 	stw	r2,0(sp)
100050a8:	d9c00104 	addi	r7,sp,4
100050ac:	900b883a 	mov	r5,r18
100050b0:	980d883a 	mov	r6,r19
100050b4:	e009883a 	mov	r4,fp
100050b8:	8820d53a 	srli	r16,r17,20
100050bc:	00093c00 	call	100093c0 <__d2b>
100050c0:	d8800915 	stw	r2,36(sp)
100050c4:	8001651e 	bne	r16,zero,1000565c <_dtoa_r+0x700>
100050c8:	dd800217 	ldw	r22,8(sp)
100050cc:	dc000117 	ldw	r16,4(sp)
100050d0:	00800804 	movi	r2,32
100050d4:	b421883a 	add	r16,r22,r16
100050d8:	80c10c84 	addi	r3,r16,1074
100050dc:	10c2d10e 	bge	r2,r3,10005c24 <_dtoa_r+0xcc8>
100050e0:	00801004 	movi	r2,64
100050e4:	81010484 	addi	r4,r16,1042
100050e8:	10c7c83a 	sub	r3,r2,r3
100050ec:	9108d83a 	srl	r4,r18,r4
100050f0:	88e2983a 	sll	r17,r17,r3
100050f4:	2448b03a 	or	r4,r4,r17
100050f8:	000f43c0 	call	1000f43c <__floatunsidf>
100050fc:	017f8434 	movhi	r5,65040
10005100:	01800044 	movi	r6,1
10005104:	1009883a 	mov	r4,r2
10005108:	194b883a 	add	r5,r3,r5
1000510c:	843fffc4 	addi	r16,r16,-1
10005110:	d9801115 	stw	r6,68(sp)
10005114:	000d883a 	mov	r6,zero
10005118:	01cffe34 	movhi	r7,16376
1000511c:	000e9e40 	call	1000e9e4 <__subdf3>
10005120:	0198dbf4 	movhi	r6,25455
10005124:	01cff4f4 	movhi	r7,16339
10005128:	3190d844 	addi	r6,r6,17249
1000512c:	39e1e9c4 	addi	r7,r7,-30809
10005130:	1009883a 	mov	r4,r2
10005134:	180b883a 	mov	r5,r3
10005138:	000e1780 	call	1000e178 <__muldf3>
1000513c:	01a2d874 	movhi	r6,35681
10005140:	01cff1f4 	movhi	r7,16327
10005144:	31b22cc4 	addi	r6,r6,-14157
10005148:	39e28a04 	addi	r7,r7,-30168
1000514c:	180b883a 	mov	r5,r3
10005150:	1009883a 	mov	r4,r2
10005154:	000cca40 	call	1000cca4 <__adddf3>
10005158:	8009883a 	mov	r4,r16
1000515c:	1029883a 	mov	r20,r2
10005160:	1823883a 	mov	r17,r3
10005164:	000f3600 	call	1000f360 <__floatsidf>
10005168:	019427f4 	movhi	r6,20639
1000516c:	01cff4f4 	movhi	r7,16339
10005170:	319e7ec4 	addi	r6,r6,31227
10005174:	39d104c4 	addi	r7,r7,17427
10005178:	1009883a 	mov	r4,r2
1000517c:	180b883a 	mov	r5,r3
10005180:	000e1780 	call	1000e178 <__muldf3>
10005184:	100d883a 	mov	r6,r2
10005188:	180f883a 	mov	r7,r3
1000518c:	a009883a 	mov	r4,r20
10005190:	880b883a 	mov	r5,r17
10005194:	000cca40 	call	1000cca4 <__adddf3>
10005198:	1009883a 	mov	r4,r2
1000519c:	180b883a 	mov	r5,r3
100051a0:	1029883a 	mov	r20,r2
100051a4:	1823883a 	mov	r17,r3
100051a8:	000f2e00 	call	1000f2e0 <__fixdfsi>
100051ac:	000d883a 	mov	r6,zero
100051b0:	000f883a 	mov	r7,zero
100051b4:	a009883a 	mov	r4,r20
100051b8:	880b883a 	mov	r5,r17
100051bc:	d8800515 	stw	r2,20(sp)
100051c0:	000e0840 	call	1000e084 <__ledf2>
100051c4:	10028716 	blt	r2,zero,10005be4 <_dtoa_r+0xc88>
100051c8:	d8c00517 	ldw	r3,20(sp)
100051cc:	00800584 	movi	r2,22
100051d0:	10c27536 	bltu	r2,r3,10005ba8 <_dtoa_r+0xc4c>
100051d4:	180490fa 	slli	r2,r3,3
100051d8:	00c40074 	movhi	r3,4097
100051dc:	18c9ff04 	addi	r3,r3,10236
100051e0:	1885883a 	add	r2,r3,r2
100051e4:	11000017 	ldw	r4,0(r2)
100051e8:	11400117 	ldw	r5,4(r2)
100051ec:	900d883a 	mov	r6,r18
100051f0:	980f883a 	mov	r7,r19
100051f4:	000dfa80 	call	1000dfa8 <__gedf2>
100051f8:	00828d0e 	bge	zero,r2,10005c30 <_dtoa_r+0xcd4>
100051fc:	d9000517 	ldw	r4,20(sp)
10005200:	d8000e15 	stw	zero,56(sp)
10005204:	213fffc4 	addi	r4,r4,-1
10005208:	d9000515 	stw	r4,20(sp)
1000520c:	b42dc83a 	sub	r22,r22,r16
10005210:	b5bfffc4 	addi	r22,r22,-1
10005214:	b0026f16 	blt	r22,zero,10005bd4 <_dtoa_r+0xc78>
10005218:	d8000815 	stw	zero,32(sp)
1000521c:	d9c00517 	ldw	r7,20(sp)
10005220:	38026416 	blt	r7,zero,10005bb4 <_dtoa_r+0xc58>
10005224:	b1ed883a 	add	r22,r22,r7
10005228:	d9c00d15 	stw	r7,52(sp)
1000522c:	d8000a15 	stw	zero,40(sp)
10005230:	d9800317 	ldw	r6,12(sp)
10005234:	00800244 	movi	r2,9
10005238:	11811436 	bltu	r2,r6,1000568c <_dtoa_r+0x730>
1000523c:	00800144 	movi	r2,5
10005240:	1184e10e 	bge	r2,r6,100065c8 <_dtoa_r+0x166c>
10005244:	31bfff04 	addi	r6,r6,-4
10005248:	d9800315 	stw	r6,12(sp)
1000524c:	0023883a 	mov	r17,zero
10005250:	d9800317 	ldw	r6,12(sp)
10005254:	008000c4 	movi	r2,3
10005258:	30836726 	beq	r6,r2,10005ff8 <_dtoa_r+0x109c>
1000525c:	1183410e 	bge	r2,r6,10005f64 <_dtoa_r+0x1008>
10005260:	d9c00317 	ldw	r7,12(sp)
10005264:	00800104 	movi	r2,4
10005268:	38827c26 	beq	r7,r2,10005c5c <_dtoa_r+0xd00>
1000526c:	00800144 	movi	r2,5
10005270:	3884c41e 	bne	r7,r2,10006584 <_dtoa_r+0x1628>
10005274:	00800044 	movi	r2,1
10005278:	d8800b15 	stw	r2,44(sp)
1000527c:	d8c00517 	ldw	r3,20(sp)
10005280:	d9002217 	ldw	r4,136(sp)
10005284:	1907883a 	add	r3,r3,r4
10005288:	19800044 	addi	r6,r3,1
1000528c:	d8c00c15 	stw	r3,48(sp)
10005290:	d9800615 	stw	r6,24(sp)
10005294:	0183a40e 	bge	zero,r6,10006128 <_dtoa_r+0x11cc>
10005298:	d9800617 	ldw	r6,24(sp)
1000529c:	3021883a 	mov	r16,r6
100052a0:	e0001115 	stw	zero,68(fp)
100052a4:	008005c4 	movi	r2,23
100052a8:	1184c92e 	bgeu	r2,r6,100065d0 <_dtoa_r+0x1674>
100052ac:	00c00044 	movi	r3,1
100052b0:	00800104 	movi	r2,4
100052b4:	1085883a 	add	r2,r2,r2
100052b8:	11000504 	addi	r4,r2,20
100052bc:	180b883a 	mov	r5,r3
100052c0:	18c00044 	addi	r3,r3,1
100052c4:	313ffb2e 	bgeu	r6,r4,100052b4 <__alt_data_end+0xf80052b4>
100052c8:	e1401115 	stw	r5,68(fp)
100052cc:	e009883a 	mov	r4,fp
100052d0:	00086700 	call	10008670 <_Balloc>
100052d4:	d8800715 	stw	r2,28(sp)
100052d8:	e0801015 	stw	r2,64(fp)
100052dc:	00800384 	movi	r2,14
100052e0:	1400f736 	bltu	r2,r16,100056c0 <_dtoa_r+0x764>
100052e4:	8800f626 	beq	r17,zero,100056c0 <_dtoa_r+0x764>
100052e8:	d9c00517 	ldw	r7,20(sp)
100052ec:	01c39a0e 	bge	zero,r7,10006158 <_dtoa_r+0x11fc>
100052f0:	388003cc 	andi	r2,r7,15
100052f4:	100490fa 	slli	r2,r2,3
100052f8:	382bd13a 	srai	r21,r7,4
100052fc:	00c40074 	movhi	r3,4097
10005300:	18c9ff04 	addi	r3,r3,10236
10005304:	1885883a 	add	r2,r3,r2
10005308:	a8c0040c 	andi	r3,r21,16
1000530c:	12400017 	ldw	r9,0(r2)
10005310:	12000117 	ldw	r8,4(r2)
10005314:	18037926 	beq	r3,zero,100060fc <_dtoa_r+0x11a0>
10005318:	00840074 	movhi	r2,4097
1000531c:	1089f504 	addi	r2,r2,10196
10005320:	11800817 	ldw	r6,32(r2)
10005324:	11c00917 	ldw	r7,36(r2)
10005328:	9009883a 	mov	r4,r18
1000532c:	980b883a 	mov	r5,r19
10005330:	da001715 	stw	r8,92(sp)
10005334:	da401615 	stw	r9,88(sp)
10005338:	000d5500 	call	1000d550 <__divdf3>
1000533c:	da001717 	ldw	r8,92(sp)
10005340:	da401617 	ldw	r9,88(sp)
10005344:	ad4003cc 	andi	r21,r21,15
10005348:	040000c4 	movi	r16,3
1000534c:	1023883a 	mov	r17,r2
10005350:	1829883a 	mov	r20,r3
10005354:	a8001126 	beq	r21,zero,1000539c <_dtoa_r+0x440>
10005358:	05c40074 	movhi	r23,4097
1000535c:	bdc9f504 	addi	r23,r23,10196
10005360:	4805883a 	mov	r2,r9
10005364:	4007883a 	mov	r3,r8
10005368:	a980004c 	andi	r6,r21,1
1000536c:	1009883a 	mov	r4,r2
10005370:	a82bd07a 	srai	r21,r21,1
10005374:	180b883a 	mov	r5,r3
10005378:	30000426 	beq	r6,zero,1000538c <_dtoa_r+0x430>
1000537c:	b9800017 	ldw	r6,0(r23)
10005380:	b9c00117 	ldw	r7,4(r23)
10005384:	84000044 	addi	r16,r16,1
10005388:	000e1780 	call	1000e178 <__muldf3>
1000538c:	bdc00204 	addi	r23,r23,8
10005390:	a83ff51e 	bne	r21,zero,10005368 <__alt_data_end+0xf8005368>
10005394:	1013883a 	mov	r9,r2
10005398:	1811883a 	mov	r8,r3
1000539c:	480d883a 	mov	r6,r9
100053a0:	400f883a 	mov	r7,r8
100053a4:	8809883a 	mov	r4,r17
100053a8:	a00b883a 	mov	r5,r20
100053ac:	000d5500 	call	1000d550 <__divdf3>
100053b0:	d8800f15 	stw	r2,60(sp)
100053b4:	d8c01015 	stw	r3,64(sp)
100053b8:	d8c00e17 	ldw	r3,56(sp)
100053bc:	18000626 	beq	r3,zero,100053d8 <_dtoa_r+0x47c>
100053c0:	d9000f17 	ldw	r4,60(sp)
100053c4:	d9401017 	ldw	r5,64(sp)
100053c8:	000d883a 	mov	r6,zero
100053cc:	01cffc34 	movhi	r7,16368
100053d0:	000e0840 	call	1000e084 <__ledf2>
100053d4:	10040b16 	blt	r2,zero,10006404 <_dtoa_r+0x14a8>
100053d8:	8009883a 	mov	r4,r16
100053dc:	000f3600 	call	1000f360 <__floatsidf>
100053e0:	d9800f17 	ldw	r6,60(sp)
100053e4:	d9c01017 	ldw	r7,64(sp)
100053e8:	1009883a 	mov	r4,r2
100053ec:	180b883a 	mov	r5,r3
100053f0:	000e1780 	call	1000e178 <__muldf3>
100053f4:	000d883a 	mov	r6,zero
100053f8:	01d00734 	movhi	r7,16412
100053fc:	1009883a 	mov	r4,r2
10005400:	180b883a 	mov	r5,r3
10005404:	000cca40 	call	1000cca4 <__adddf3>
10005408:	1021883a 	mov	r16,r2
1000540c:	d8800617 	ldw	r2,24(sp)
10005410:	047f3034 	movhi	r17,64704
10005414:	1c63883a 	add	r17,r3,r17
10005418:	10031826 	beq	r2,zero,1000607c <_dtoa_r+0x1120>
1000541c:	d8c00517 	ldw	r3,20(sp)
10005420:	db000617 	ldw	r12,24(sp)
10005424:	d8c01315 	stw	r3,76(sp)
10005428:	d9000b17 	ldw	r4,44(sp)
1000542c:	20038f26 	beq	r4,zero,1000626c <_dtoa_r+0x1310>
10005430:	60bfffc4 	addi	r2,r12,-1
10005434:	100490fa 	slli	r2,r2,3
10005438:	00c40074 	movhi	r3,4097
1000543c:	18c9ff04 	addi	r3,r3,10236
10005440:	1885883a 	add	r2,r3,r2
10005444:	11800017 	ldw	r6,0(r2)
10005448:	11c00117 	ldw	r7,4(r2)
1000544c:	d8800717 	ldw	r2,28(sp)
10005450:	0009883a 	mov	r4,zero
10005454:	014ff834 	movhi	r5,16352
10005458:	db001615 	stw	r12,88(sp)
1000545c:	15c00044 	addi	r23,r2,1
10005460:	000d5500 	call	1000d550 <__divdf3>
10005464:	800d883a 	mov	r6,r16
10005468:	880f883a 	mov	r7,r17
1000546c:	1009883a 	mov	r4,r2
10005470:	180b883a 	mov	r5,r3
10005474:	000e9e40 	call	1000e9e4 <__subdf3>
10005478:	d9401017 	ldw	r5,64(sp)
1000547c:	d9000f17 	ldw	r4,60(sp)
10005480:	102b883a 	mov	r21,r2
10005484:	d8c01215 	stw	r3,72(sp)
10005488:	000f2e00 	call	1000f2e0 <__fixdfsi>
1000548c:	1009883a 	mov	r4,r2
10005490:	1029883a 	mov	r20,r2
10005494:	000f3600 	call	1000f360 <__floatsidf>
10005498:	d9000f17 	ldw	r4,60(sp)
1000549c:	d9401017 	ldw	r5,64(sp)
100054a0:	100d883a 	mov	r6,r2
100054a4:	180f883a 	mov	r7,r3
100054a8:	000e9e40 	call	1000e9e4 <__subdf3>
100054ac:	1823883a 	mov	r17,r3
100054b0:	d8c00717 	ldw	r3,28(sp)
100054b4:	d9401217 	ldw	r5,72(sp)
100054b8:	a2000c04 	addi	r8,r20,48
100054bc:	1021883a 	mov	r16,r2
100054c0:	1a000005 	stb	r8,0(r3)
100054c4:	800d883a 	mov	r6,r16
100054c8:	880f883a 	mov	r7,r17
100054cc:	a809883a 	mov	r4,r21
100054d0:	4029883a 	mov	r20,r8
100054d4:	000dfa80 	call	1000dfa8 <__gedf2>
100054d8:	00841d16 	blt	zero,r2,10006550 <_dtoa_r+0x15f4>
100054dc:	800d883a 	mov	r6,r16
100054e0:	880f883a 	mov	r7,r17
100054e4:	0009883a 	mov	r4,zero
100054e8:	014ffc34 	movhi	r5,16368
100054ec:	000e9e40 	call	1000e9e4 <__subdf3>
100054f0:	d9401217 	ldw	r5,72(sp)
100054f4:	100d883a 	mov	r6,r2
100054f8:	180f883a 	mov	r7,r3
100054fc:	a809883a 	mov	r4,r21
10005500:	000dfa80 	call	1000dfa8 <__gedf2>
10005504:	db001617 	ldw	r12,88(sp)
10005508:	00840e16 	blt	zero,r2,10006544 <_dtoa_r+0x15e8>
1000550c:	00800044 	movi	r2,1
10005510:	13006b0e 	bge	r2,r12,100056c0 <_dtoa_r+0x764>
10005514:	d9000717 	ldw	r4,28(sp)
10005518:	dd800f15 	stw	r22,60(sp)
1000551c:	dcc01015 	stw	r19,64(sp)
10005520:	2319883a 	add	r12,r4,r12
10005524:	dcc01217 	ldw	r19,72(sp)
10005528:	602d883a 	mov	r22,r12
1000552c:	dc801215 	stw	r18,72(sp)
10005530:	b825883a 	mov	r18,r23
10005534:	00000906 	br	1000555c <_dtoa_r+0x600>
10005538:	000e9e40 	call	1000e9e4 <__subdf3>
1000553c:	a80d883a 	mov	r6,r21
10005540:	980f883a 	mov	r7,r19
10005544:	1009883a 	mov	r4,r2
10005548:	180b883a 	mov	r5,r3
1000554c:	000e0840 	call	1000e084 <__ledf2>
10005550:	1003e816 	blt	r2,zero,100064f4 <_dtoa_r+0x1598>
10005554:	b825883a 	mov	r18,r23
10005558:	bd83e926 	beq	r23,r22,10006500 <_dtoa_r+0x15a4>
1000555c:	a809883a 	mov	r4,r21
10005560:	980b883a 	mov	r5,r19
10005564:	000d883a 	mov	r6,zero
10005568:	01d00934 	movhi	r7,16420
1000556c:	000e1780 	call	1000e178 <__muldf3>
10005570:	000d883a 	mov	r6,zero
10005574:	01d00934 	movhi	r7,16420
10005578:	8009883a 	mov	r4,r16
1000557c:	880b883a 	mov	r5,r17
10005580:	102b883a 	mov	r21,r2
10005584:	1827883a 	mov	r19,r3
10005588:	000e1780 	call	1000e178 <__muldf3>
1000558c:	180b883a 	mov	r5,r3
10005590:	1009883a 	mov	r4,r2
10005594:	1821883a 	mov	r16,r3
10005598:	1023883a 	mov	r17,r2
1000559c:	000f2e00 	call	1000f2e0 <__fixdfsi>
100055a0:	1009883a 	mov	r4,r2
100055a4:	1029883a 	mov	r20,r2
100055a8:	000f3600 	call	1000f360 <__floatsidf>
100055ac:	8809883a 	mov	r4,r17
100055b0:	800b883a 	mov	r5,r16
100055b4:	100d883a 	mov	r6,r2
100055b8:	180f883a 	mov	r7,r3
100055bc:	000e9e40 	call	1000e9e4 <__subdf3>
100055c0:	a5000c04 	addi	r20,r20,48
100055c4:	a80d883a 	mov	r6,r21
100055c8:	980f883a 	mov	r7,r19
100055cc:	1009883a 	mov	r4,r2
100055d0:	180b883a 	mov	r5,r3
100055d4:	95000005 	stb	r20,0(r18)
100055d8:	1021883a 	mov	r16,r2
100055dc:	1823883a 	mov	r17,r3
100055e0:	000e0840 	call	1000e084 <__ledf2>
100055e4:	bdc00044 	addi	r23,r23,1
100055e8:	800d883a 	mov	r6,r16
100055ec:	880f883a 	mov	r7,r17
100055f0:	0009883a 	mov	r4,zero
100055f4:	014ffc34 	movhi	r5,16368
100055f8:	103fcf0e 	bge	r2,zero,10005538 <__alt_data_end+0xf8005538>
100055fc:	d8c01317 	ldw	r3,76(sp)
10005600:	d8c00515 	stw	r3,20(sp)
10005604:	d9400917 	ldw	r5,36(sp)
10005608:	e009883a 	mov	r4,fp
1000560c:	00087180 	call	10008718 <_Bfree>
10005610:	d9000517 	ldw	r4,20(sp)
10005614:	d9802317 	ldw	r6,140(sp)
10005618:	d9c02517 	ldw	r7,148(sp)
1000561c:	b8000005 	stb	zero,0(r23)
10005620:	20800044 	addi	r2,r4,1
10005624:	30800015 	stw	r2,0(r6)
10005628:	3802aa26 	beq	r7,zero,100060d4 <_dtoa_r+0x1178>
1000562c:	3dc00015 	stw	r23,0(r7)
10005630:	d8800717 	ldw	r2,28(sp)
10005634:	003e7906 	br	1000501c <__alt_data_end+0xf800501c>
10005638:	00800434 	movhi	r2,16
1000563c:	10bfffc4 	addi	r2,r2,-1
10005640:	88a2703a 	and	r17,r17,r2
10005644:	883e851e 	bne	r17,zero,1000505c <__alt_data_end+0xf800505c>
10005648:	00840074 	movhi	r2,4097
1000564c:	1089e004 	addi	r2,r2,10112
10005650:	003e8406 	br	10005064 <__alt_data_end+0xf8005064>
10005654:	10c00204 	addi	r3,r2,8
10005658:	003e8706 	br	10005078 <__alt_data_end+0xf8005078>
1000565c:	01400434 	movhi	r5,16
10005660:	297fffc4 	addi	r5,r5,-1
10005664:	994a703a 	and	r5,r19,r5
10005668:	9009883a 	mov	r4,r18
1000566c:	843f0044 	addi	r16,r16,-1023
10005670:	294ffc34 	orhi	r5,r5,16368
10005674:	dd800217 	ldw	r22,8(sp)
10005678:	d8001115 	stw	zero,68(sp)
1000567c:	003ea506 	br	10005114 <__alt_data_end+0xf8005114>
10005680:	00840074 	movhi	r2,4097
10005684:	1089d704 	addi	r2,r2,10076
10005688:	003e6406 	br	1000501c <__alt_data_end+0xf800501c>
1000568c:	e0001115 	stw	zero,68(fp)
10005690:	000b883a 	mov	r5,zero
10005694:	e009883a 	mov	r4,fp
10005698:	00086700 	call	10008670 <_Balloc>
1000569c:	01bfffc4 	movi	r6,-1
100056a0:	01c00044 	movi	r7,1
100056a4:	d8800715 	stw	r2,28(sp)
100056a8:	d9800c15 	stw	r6,48(sp)
100056ac:	e0801015 	stw	r2,64(fp)
100056b0:	d8000315 	stw	zero,12(sp)
100056b4:	d9c00b15 	stw	r7,44(sp)
100056b8:	d9800615 	stw	r6,24(sp)
100056bc:	d8002215 	stw	zero,136(sp)
100056c0:	d8800117 	ldw	r2,4(sp)
100056c4:	10008916 	blt	r2,zero,100058ec <_dtoa_r+0x990>
100056c8:	d9000517 	ldw	r4,20(sp)
100056cc:	00c00384 	movi	r3,14
100056d0:	19008616 	blt	r3,r4,100058ec <_dtoa_r+0x990>
100056d4:	200490fa 	slli	r2,r4,3
100056d8:	00c40074 	movhi	r3,4097
100056dc:	d9802217 	ldw	r6,136(sp)
100056e0:	18c9ff04 	addi	r3,r3,10236
100056e4:	1885883a 	add	r2,r3,r2
100056e8:	14000017 	ldw	r16,0(r2)
100056ec:	14400117 	ldw	r17,4(r2)
100056f0:	30016316 	blt	r6,zero,10005c80 <_dtoa_r+0xd24>
100056f4:	800d883a 	mov	r6,r16
100056f8:	880f883a 	mov	r7,r17
100056fc:	9009883a 	mov	r4,r18
10005700:	980b883a 	mov	r5,r19
10005704:	000d5500 	call	1000d550 <__divdf3>
10005708:	180b883a 	mov	r5,r3
1000570c:	1009883a 	mov	r4,r2
10005710:	000f2e00 	call	1000f2e0 <__fixdfsi>
10005714:	1009883a 	mov	r4,r2
10005718:	102b883a 	mov	r21,r2
1000571c:	000f3600 	call	1000f360 <__floatsidf>
10005720:	800d883a 	mov	r6,r16
10005724:	880f883a 	mov	r7,r17
10005728:	1009883a 	mov	r4,r2
1000572c:	180b883a 	mov	r5,r3
10005730:	000e1780 	call	1000e178 <__muldf3>
10005734:	100d883a 	mov	r6,r2
10005738:	180f883a 	mov	r7,r3
1000573c:	9009883a 	mov	r4,r18
10005740:	980b883a 	mov	r5,r19
10005744:	000e9e40 	call	1000e9e4 <__subdf3>
10005748:	d9c00717 	ldw	r7,28(sp)
1000574c:	1009883a 	mov	r4,r2
10005750:	a8800c04 	addi	r2,r21,48
10005754:	38800005 	stb	r2,0(r7)
10005758:	3dc00044 	addi	r23,r7,1
1000575c:	d9c00617 	ldw	r7,24(sp)
10005760:	01800044 	movi	r6,1
10005764:	180b883a 	mov	r5,r3
10005768:	2005883a 	mov	r2,r4
1000576c:	39803826 	beq	r7,r6,10005850 <_dtoa_r+0x8f4>
10005770:	000d883a 	mov	r6,zero
10005774:	01d00934 	movhi	r7,16420
10005778:	000e1780 	call	1000e178 <__muldf3>
1000577c:	000d883a 	mov	r6,zero
10005780:	000f883a 	mov	r7,zero
10005784:	1009883a 	mov	r4,r2
10005788:	180b883a 	mov	r5,r3
1000578c:	1025883a 	mov	r18,r2
10005790:	1827883a 	mov	r19,r3
10005794:	000df200 	call	1000df20 <__eqdf2>
10005798:	103f9a26 	beq	r2,zero,10005604 <__alt_data_end+0xf8005604>
1000579c:	d9c00617 	ldw	r7,24(sp)
100057a0:	d8c00717 	ldw	r3,28(sp)
100057a4:	b829883a 	mov	r20,r23
100057a8:	38bfffc4 	addi	r2,r7,-1
100057ac:	18ad883a 	add	r22,r3,r2
100057b0:	00000a06 	br	100057dc <_dtoa_r+0x880>
100057b4:	000e1780 	call	1000e178 <__muldf3>
100057b8:	000d883a 	mov	r6,zero
100057bc:	000f883a 	mov	r7,zero
100057c0:	1009883a 	mov	r4,r2
100057c4:	180b883a 	mov	r5,r3
100057c8:	1025883a 	mov	r18,r2
100057cc:	1827883a 	mov	r19,r3
100057d0:	b829883a 	mov	r20,r23
100057d4:	000df200 	call	1000df20 <__eqdf2>
100057d8:	103f8a26 	beq	r2,zero,10005604 <__alt_data_end+0xf8005604>
100057dc:	800d883a 	mov	r6,r16
100057e0:	880f883a 	mov	r7,r17
100057e4:	9009883a 	mov	r4,r18
100057e8:	980b883a 	mov	r5,r19
100057ec:	000d5500 	call	1000d550 <__divdf3>
100057f0:	180b883a 	mov	r5,r3
100057f4:	1009883a 	mov	r4,r2
100057f8:	000f2e00 	call	1000f2e0 <__fixdfsi>
100057fc:	1009883a 	mov	r4,r2
10005800:	102b883a 	mov	r21,r2
10005804:	000f3600 	call	1000f360 <__floatsidf>
10005808:	800d883a 	mov	r6,r16
1000580c:	880f883a 	mov	r7,r17
10005810:	1009883a 	mov	r4,r2
10005814:	180b883a 	mov	r5,r3
10005818:	000e1780 	call	1000e178 <__muldf3>
1000581c:	100d883a 	mov	r6,r2
10005820:	180f883a 	mov	r7,r3
10005824:	9009883a 	mov	r4,r18
10005828:	980b883a 	mov	r5,r19
1000582c:	000e9e40 	call	1000e9e4 <__subdf3>
10005830:	aa000c04 	addi	r8,r21,48
10005834:	a2000005 	stb	r8,0(r20)
10005838:	000d883a 	mov	r6,zero
1000583c:	01d00934 	movhi	r7,16420
10005840:	1009883a 	mov	r4,r2
10005844:	180b883a 	mov	r5,r3
10005848:	a5c00044 	addi	r23,r20,1
1000584c:	b53fd91e 	bne	r22,r20,100057b4 <__alt_data_end+0xf80057b4>
10005850:	100d883a 	mov	r6,r2
10005854:	180f883a 	mov	r7,r3
10005858:	1009883a 	mov	r4,r2
1000585c:	180b883a 	mov	r5,r3
10005860:	000cca40 	call	1000cca4 <__adddf3>
10005864:	100d883a 	mov	r6,r2
10005868:	180f883a 	mov	r7,r3
1000586c:	8009883a 	mov	r4,r16
10005870:	880b883a 	mov	r5,r17
10005874:	1027883a 	mov	r19,r2
10005878:	1825883a 	mov	r18,r3
1000587c:	000e0840 	call	1000e084 <__ledf2>
10005880:	10000816 	blt	r2,zero,100058a4 <_dtoa_r+0x948>
10005884:	980d883a 	mov	r6,r19
10005888:	900f883a 	mov	r7,r18
1000588c:	8009883a 	mov	r4,r16
10005890:	880b883a 	mov	r5,r17
10005894:	000df200 	call	1000df20 <__eqdf2>
10005898:	103f5a1e 	bne	r2,zero,10005604 <__alt_data_end+0xf8005604>
1000589c:	ad40004c 	andi	r21,r21,1
100058a0:	a83f5826 	beq	r21,zero,10005604 <__alt_data_end+0xf8005604>
100058a4:	bd3fffc3 	ldbu	r20,-1(r23)
100058a8:	b8bfffc4 	addi	r2,r23,-1
100058ac:	1007883a 	mov	r3,r2
100058b0:	01400e44 	movi	r5,57
100058b4:	d9800717 	ldw	r6,28(sp)
100058b8:	00000506 	br	100058d0 <_dtoa_r+0x974>
100058bc:	18ffffc4 	addi	r3,r3,-1
100058c0:	11824726 	beq	r2,r6,100061e0 <_dtoa_r+0x1284>
100058c4:	1d000003 	ldbu	r20,0(r3)
100058c8:	102f883a 	mov	r23,r2
100058cc:	10bfffc4 	addi	r2,r2,-1
100058d0:	a1003fcc 	andi	r4,r20,255
100058d4:	2100201c 	xori	r4,r4,128
100058d8:	213fe004 	addi	r4,r4,-128
100058dc:	217ff726 	beq	r4,r5,100058bc <__alt_data_end+0xf80058bc>
100058e0:	a2000044 	addi	r8,r20,1
100058e4:	12000005 	stb	r8,0(r2)
100058e8:	003f4606 	br	10005604 <__alt_data_end+0xf8005604>
100058ec:	d9000b17 	ldw	r4,44(sp)
100058f0:	2000c826 	beq	r4,zero,10005c14 <_dtoa_r+0xcb8>
100058f4:	d9800317 	ldw	r6,12(sp)
100058f8:	00c00044 	movi	r3,1
100058fc:	1980f90e 	bge	r3,r6,10005ce4 <_dtoa_r+0xd88>
10005900:	d8800617 	ldw	r2,24(sp)
10005904:	d8c00a17 	ldw	r3,40(sp)
10005908:	157fffc4 	addi	r21,r2,-1
1000590c:	1d41f316 	blt	r3,r21,100060dc <_dtoa_r+0x1180>
10005910:	1d6bc83a 	sub	r21,r3,r21
10005914:	d9c00617 	ldw	r7,24(sp)
10005918:	3802aa16 	blt	r7,zero,100063c4 <_dtoa_r+0x1468>
1000591c:	dd000817 	ldw	r20,32(sp)
10005920:	d8800617 	ldw	r2,24(sp)
10005924:	d8c00817 	ldw	r3,32(sp)
10005928:	01400044 	movi	r5,1
1000592c:	e009883a 	mov	r4,fp
10005930:	1887883a 	add	r3,r3,r2
10005934:	d8c00815 	stw	r3,32(sp)
10005938:	b0ad883a 	add	r22,r22,r2
1000593c:	0008aa40 	call	10008aa4 <__i2b>
10005940:	1023883a 	mov	r17,r2
10005944:	a0000826 	beq	r20,zero,10005968 <_dtoa_r+0xa0c>
10005948:	0580070e 	bge	zero,r22,10005968 <_dtoa_r+0xa0c>
1000594c:	a005883a 	mov	r2,r20
10005950:	b500b916 	blt	r22,r20,10005c38 <_dtoa_r+0xcdc>
10005954:	d9000817 	ldw	r4,32(sp)
10005958:	a0a9c83a 	sub	r20,r20,r2
1000595c:	b0adc83a 	sub	r22,r22,r2
10005960:	2089c83a 	sub	r4,r4,r2
10005964:	d9000815 	stw	r4,32(sp)
10005968:	d9800a17 	ldw	r6,40(sp)
1000596c:	0181810e 	bge	zero,r6,10005f74 <_dtoa_r+0x1018>
10005970:	d9c00b17 	ldw	r7,44(sp)
10005974:	3800b326 	beq	r7,zero,10005c44 <_dtoa_r+0xce8>
10005978:	a800b226 	beq	r21,zero,10005c44 <_dtoa_r+0xce8>
1000597c:	880b883a 	mov	r5,r17
10005980:	a80d883a 	mov	r6,r21
10005984:	e009883a 	mov	r4,fp
10005988:	0008d6c0 	call	10008d6c <__pow5mult>
1000598c:	d9800917 	ldw	r6,36(sp)
10005990:	100b883a 	mov	r5,r2
10005994:	e009883a 	mov	r4,fp
10005998:	1023883a 	mov	r17,r2
1000599c:	0008ae00 	call	10008ae0 <__multiply>
100059a0:	1021883a 	mov	r16,r2
100059a4:	d8800a17 	ldw	r2,40(sp)
100059a8:	d9400917 	ldw	r5,36(sp)
100059ac:	e009883a 	mov	r4,fp
100059b0:	1545c83a 	sub	r2,r2,r21
100059b4:	d8800a15 	stw	r2,40(sp)
100059b8:	00087180 	call	10008718 <_Bfree>
100059bc:	d8c00a17 	ldw	r3,40(sp)
100059c0:	18009f1e 	bne	r3,zero,10005c40 <_dtoa_r+0xce4>
100059c4:	05c00044 	movi	r23,1
100059c8:	e009883a 	mov	r4,fp
100059cc:	b80b883a 	mov	r5,r23
100059d0:	0008aa40 	call	10008aa4 <__i2b>
100059d4:	d9000d17 	ldw	r4,52(sp)
100059d8:	102b883a 	mov	r21,r2
100059dc:	2000ce26 	beq	r4,zero,10005d18 <_dtoa_r+0xdbc>
100059e0:	200d883a 	mov	r6,r4
100059e4:	100b883a 	mov	r5,r2
100059e8:	e009883a 	mov	r4,fp
100059ec:	0008d6c0 	call	10008d6c <__pow5mult>
100059f0:	d9800317 	ldw	r6,12(sp)
100059f4:	102b883a 	mov	r21,r2
100059f8:	b981810e 	bge	r23,r6,10006000 <_dtoa_r+0x10a4>
100059fc:	0027883a 	mov	r19,zero
10005a00:	a8800417 	ldw	r2,16(r21)
10005a04:	05c00804 	movi	r23,32
10005a08:	10800104 	addi	r2,r2,4
10005a0c:	1085883a 	add	r2,r2,r2
10005a10:	1085883a 	add	r2,r2,r2
10005a14:	a885883a 	add	r2,r21,r2
10005a18:	11000017 	ldw	r4,0(r2)
10005a1c:	000898c0 	call	1000898c <__hi0bits>
10005a20:	b885c83a 	sub	r2,r23,r2
10005a24:	1585883a 	add	r2,r2,r22
10005a28:	108007cc 	andi	r2,r2,31
10005a2c:	1000b326 	beq	r2,zero,10005cfc <_dtoa_r+0xda0>
10005a30:	00c00804 	movi	r3,32
10005a34:	1887c83a 	sub	r3,r3,r2
10005a38:	01000104 	movi	r4,4
10005a3c:	20c2cd0e 	bge	r4,r3,10006574 <_dtoa_r+0x1618>
10005a40:	00c00704 	movi	r3,28
10005a44:	1885c83a 	sub	r2,r3,r2
10005a48:	d8c00817 	ldw	r3,32(sp)
10005a4c:	a0a9883a 	add	r20,r20,r2
10005a50:	b0ad883a 	add	r22,r22,r2
10005a54:	1887883a 	add	r3,r3,r2
10005a58:	d8c00815 	stw	r3,32(sp)
10005a5c:	d9800817 	ldw	r6,32(sp)
10005a60:	0180040e 	bge	zero,r6,10005a74 <_dtoa_r+0xb18>
10005a64:	800b883a 	mov	r5,r16
10005a68:	e009883a 	mov	r4,fp
10005a6c:	0008eac0 	call	10008eac <__lshift>
10005a70:	1021883a 	mov	r16,r2
10005a74:	0580050e 	bge	zero,r22,10005a8c <_dtoa_r+0xb30>
10005a78:	a80b883a 	mov	r5,r21
10005a7c:	b00d883a 	mov	r6,r22
10005a80:	e009883a 	mov	r4,fp
10005a84:	0008eac0 	call	10008eac <__lshift>
10005a88:	102b883a 	mov	r21,r2
10005a8c:	d9c00e17 	ldw	r7,56(sp)
10005a90:	3801211e 	bne	r7,zero,10005f18 <_dtoa_r+0xfbc>
10005a94:	d9800617 	ldw	r6,24(sp)
10005a98:	0181380e 	bge	zero,r6,10005f7c <_dtoa_r+0x1020>
10005a9c:	d8c00b17 	ldw	r3,44(sp)
10005aa0:	1800ab1e 	bne	r3,zero,10005d50 <_dtoa_r+0xdf4>
10005aa4:	dc800717 	ldw	r18,28(sp)
10005aa8:	dcc00617 	ldw	r19,24(sp)
10005aac:	9029883a 	mov	r20,r18
10005ab0:	00000206 	br	10005abc <_dtoa_r+0xb60>
10005ab4:	00087400 	call	10008740 <__multadd>
10005ab8:	1021883a 	mov	r16,r2
10005abc:	a80b883a 	mov	r5,r21
10005ac0:	8009883a 	mov	r4,r16
10005ac4:	0004d340 	call	10004d34 <quorem>
10005ac8:	10800c04 	addi	r2,r2,48
10005acc:	90800005 	stb	r2,0(r18)
10005ad0:	94800044 	addi	r18,r18,1
10005ad4:	9507c83a 	sub	r3,r18,r20
10005ad8:	000f883a 	mov	r7,zero
10005adc:	01800284 	movi	r6,10
10005ae0:	800b883a 	mov	r5,r16
10005ae4:	e009883a 	mov	r4,fp
10005ae8:	1cfff216 	blt	r3,r19,10005ab4 <__alt_data_end+0xf8005ab4>
10005aec:	1011883a 	mov	r8,r2
10005af0:	d8800617 	ldw	r2,24(sp)
10005af4:	0082370e 	bge	zero,r2,100063d4 <_dtoa_r+0x1478>
10005af8:	d9000717 	ldw	r4,28(sp)
10005afc:	0025883a 	mov	r18,zero
10005b00:	20af883a 	add	r23,r4,r2
10005b04:	01800044 	movi	r6,1
10005b08:	800b883a 	mov	r5,r16
10005b0c:	e009883a 	mov	r4,fp
10005b10:	da001715 	stw	r8,92(sp)
10005b14:	0008eac0 	call	10008eac <__lshift>
10005b18:	a80b883a 	mov	r5,r21
10005b1c:	1009883a 	mov	r4,r2
10005b20:	d8800915 	stw	r2,36(sp)
10005b24:	0008ff40 	call	10008ff4 <__mcmp>
10005b28:	da001717 	ldw	r8,92(sp)
10005b2c:	0081800e 	bge	zero,r2,10006130 <_dtoa_r+0x11d4>
10005b30:	b93fffc3 	ldbu	r4,-1(r23)
10005b34:	b8bfffc4 	addi	r2,r23,-1
10005b38:	1007883a 	mov	r3,r2
10005b3c:	01800e44 	movi	r6,57
10005b40:	d9c00717 	ldw	r7,28(sp)
10005b44:	00000506 	br	10005b5c <_dtoa_r+0xc00>
10005b48:	18ffffc4 	addi	r3,r3,-1
10005b4c:	11c12326 	beq	r2,r7,10005fdc <_dtoa_r+0x1080>
10005b50:	19000003 	ldbu	r4,0(r3)
10005b54:	102f883a 	mov	r23,r2
10005b58:	10bfffc4 	addi	r2,r2,-1
10005b5c:	21403fcc 	andi	r5,r4,255
10005b60:	2940201c 	xori	r5,r5,128
10005b64:	297fe004 	addi	r5,r5,-128
10005b68:	29bff726 	beq	r5,r6,10005b48 <__alt_data_end+0xf8005b48>
10005b6c:	21000044 	addi	r4,r4,1
10005b70:	11000005 	stb	r4,0(r2)
10005b74:	a80b883a 	mov	r5,r21
10005b78:	e009883a 	mov	r4,fp
10005b7c:	00087180 	call	10008718 <_Bfree>
10005b80:	883ea026 	beq	r17,zero,10005604 <__alt_data_end+0xf8005604>
10005b84:	90000426 	beq	r18,zero,10005b98 <_dtoa_r+0xc3c>
10005b88:	94400326 	beq	r18,r17,10005b98 <_dtoa_r+0xc3c>
10005b8c:	900b883a 	mov	r5,r18
10005b90:	e009883a 	mov	r4,fp
10005b94:	00087180 	call	10008718 <_Bfree>
10005b98:	880b883a 	mov	r5,r17
10005b9c:	e009883a 	mov	r4,fp
10005ba0:	00087180 	call	10008718 <_Bfree>
10005ba4:	003e9706 	br	10005604 <__alt_data_end+0xf8005604>
10005ba8:	01800044 	movi	r6,1
10005bac:	d9800e15 	stw	r6,56(sp)
10005bb0:	003d9606 	br	1000520c <__alt_data_end+0xf800520c>
10005bb4:	d8800817 	ldw	r2,32(sp)
10005bb8:	d8c00517 	ldw	r3,20(sp)
10005bbc:	d8000d15 	stw	zero,52(sp)
10005bc0:	10c5c83a 	sub	r2,r2,r3
10005bc4:	00c9c83a 	sub	r4,zero,r3
10005bc8:	d8800815 	stw	r2,32(sp)
10005bcc:	d9000a15 	stw	r4,40(sp)
10005bd0:	003d9706 	br	10005230 <__alt_data_end+0xf8005230>
10005bd4:	05adc83a 	sub	r22,zero,r22
10005bd8:	dd800815 	stw	r22,32(sp)
10005bdc:	002d883a 	mov	r22,zero
10005be0:	003d8e06 	br	1000521c <__alt_data_end+0xf800521c>
10005be4:	d9000517 	ldw	r4,20(sp)
10005be8:	000f3600 	call	1000f360 <__floatsidf>
10005bec:	100d883a 	mov	r6,r2
10005bf0:	180f883a 	mov	r7,r3
10005bf4:	a009883a 	mov	r4,r20
10005bf8:	880b883a 	mov	r5,r17
10005bfc:	000df200 	call	1000df20 <__eqdf2>
10005c00:	103d7126 	beq	r2,zero,100051c8 <__alt_data_end+0xf80051c8>
10005c04:	d9c00517 	ldw	r7,20(sp)
10005c08:	39ffffc4 	addi	r7,r7,-1
10005c0c:	d9c00515 	stw	r7,20(sp)
10005c10:	003d6d06 	br	100051c8 <__alt_data_end+0xf80051c8>
10005c14:	dd400a17 	ldw	r21,40(sp)
10005c18:	dd000817 	ldw	r20,32(sp)
10005c1c:	0023883a 	mov	r17,zero
10005c20:	003f4806 	br	10005944 <__alt_data_end+0xf8005944>
10005c24:	10e3c83a 	sub	r17,r2,r3
10005c28:	9448983a 	sll	r4,r18,r17
10005c2c:	003d3206 	br	100050f8 <__alt_data_end+0xf80050f8>
10005c30:	d8000e15 	stw	zero,56(sp)
10005c34:	003d7506 	br	1000520c <__alt_data_end+0xf800520c>
10005c38:	b005883a 	mov	r2,r22
10005c3c:	003f4506 	br	10005954 <__alt_data_end+0xf8005954>
10005c40:	dc000915 	stw	r16,36(sp)
10005c44:	d9800a17 	ldw	r6,40(sp)
10005c48:	d9400917 	ldw	r5,36(sp)
10005c4c:	e009883a 	mov	r4,fp
10005c50:	0008d6c0 	call	10008d6c <__pow5mult>
10005c54:	1021883a 	mov	r16,r2
10005c58:	003f5a06 	br	100059c4 <__alt_data_end+0xf80059c4>
10005c5c:	01c00044 	movi	r7,1
10005c60:	d9c00b15 	stw	r7,44(sp)
10005c64:	d8802217 	ldw	r2,136(sp)
10005c68:	0081280e 	bge	zero,r2,1000610c <_dtoa_r+0x11b0>
10005c6c:	100d883a 	mov	r6,r2
10005c70:	1021883a 	mov	r16,r2
10005c74:	d8800c15 	stw	r2,48(sp)
10005c78:	d8800615 	stw	r2,24(sp)
10005c7c:	003d8806 	br	100052a0 <__alt_data_end+0xf80052a0>
10005c80:	d8800617 	ldw	r2,24(sp)
10005c84:	00be9b16 	blt	zero,r2,100056f4 <__alt_data_end+0xf80056f4>
10005c88:	10010f1e 	bne	r2,zero,100060c8 <_dtoa_r+0x116c>
10005c8c:	880b883a 	mov	r5,r17
10005c90:	000d883a 	mov	r6,zero
10005c94:	01d00534 	movhi	r7,16404
10005c98:	8009883a 	mov	r4,r16
10005c9c:	000e1780 	call	1000e178 <__muldf3>
10005ca0:	900d883a 	mov	r6,r18
10005ca4:	980f883a 	mov	r7,r19
10005ca8:	1009883a 	mov	r4,r2
10005cac:	180b883a 	mov	r5,r3
10005cb0:	000dfa80 	call	1000dfa8 <__gedf2>
10005cb4:	002b883a 	mov	r21,zero
10005cb8:	0023883a 	mov	r17,zero
10005cbc:	1000bf16 	blt	r2,zero,10005fbc <_dtoa_r+0x1060>
10005cc0:	d9802217 	ldw	r6,136(sp)
10005cc4:	ddc00717 	ldw	r23,28(sp)
10005cc8:	018c303a 	nor	r6,zero,r6
10005ccc:	d9800515 	stw	r6,20(sp)
10005cd0:	a80b883a 	mov	r5,r21
10005cd4:	e009883a 	mov	r4,fp
10005cd8:	00087180 	call	10008718 <_Bfree>
10005cdc:	883e4926 	beq	r17,zero,10005604 <__alt_data_end+0xf8005604>
10005ce0:	003fad06 	br	10005b98 <__alt_data_end+0xf8005b98>
10005ce4:	d9c01117 	ldw	r7,68(sp)
10005ce8:	3801bc26 	beq	r7,zero,100063dc <_dtoa_r+0x1480>
10005cec:	10810cc4 	addi	r2,r2,1075
10005cf0:	dd400a17 	ldw	r21,40(sp)
10005cf4:	dd000817 	ldw	r20,32(sp)
10005cf8:	003f0a06 	br	10005924 <__alt_data_end+0xf8005924>
10005cfc:	00800704 	movi	r2,28
10005d00:	d9000817 	ldw	r4,32(sp)
10005d04:	a0a9883a 	add	r20,r20,r2
10005d08:	b0ad883a 	add	r22,r22,r2
10005d0c:	2089883a 	add	r4,r4,r2
10005d10:	d9000815 	stw	r4,32(sp)
10005d14:	003f5106 	br	10005a5c <__alt_data_end+0xf8005a5c>
10005d18:	d8c00317 	ldw	r3,12(sp)
10005d1c:	b8c1fc0e 	bge	r23,r3,10006510 <_dtoa_r+0x15b4>
10005d20:	0027883a 	mov	r19,zero
10005d24:	b805883a 	mov	r2,r23
10005d28:	003f3e06 	br	10005a24 <__alt_data_end+0xf8005a24>
10005d2c:	880b883a 	mov	r5,r17
10005d30:	e009883a 	mov	r4,fp
10005d34:	000f883a 	mov	r7,zero
10005d38:	01800284 	movi	r6,10
10005d3c:	00087400 	call	10008740 <__multadd>
10005d40:	d9000c17 	ldw	r4,48(sp)
10005d44:	1023883a 	mov	r17,r2
10005d48:	0102040e 	bge	zero,r4,1000655c <_dtoa_r+0x1600>
10005d4c:	d9000615 	stw	r4,24(sp)
10005d50:	0500050e 	bge	zero,r20,10005d68 <_dtoa_r+0xe0c>
10005d54:	880b883a 	mov	r5,r17
10005d58:	a00d883a 	mov	r6,r20
10005d5c:	e009883a 	mov	r4,fp
10005d60:	0008eac0 	call	10008eac <__lshift>
10005d64:	1023883a 	mov	r17,r2
10005d68:	9801241e 	bne	r19,zero,100061fc <_dtoa_r+0x12a0>
10005d6c:	8829883a 	mov	r20,r17
10005d70:	d9000617 	ldw	r4,24(sp)
10005d74:	dcc00717 	ldw	r19,28(sp)
10005d78:	9480004c 	andi	r18,r18,1
10005d7c:	20bfffc4 	addi	r2,r4,-1
10005d80:	9885883a 	add	r2,r19,r2
10005d84:	d8800415 	stw	r2,16(sp)
10005d88:	dc800615 	stw	r18,24(sp)
10005d8c:	a80b883a 	mov	r5,r21
10005d90:	8009883a 	mov	r4,r16
10005d94:	0004d340 	call	10004d34 <quorem>
10005d98:	880b883a 	mov	r5,r17
10005d9c:	8009883a 	mov	r4,r16
10005da0:	102f883a 	mov	r23,r2
10005da4:	0008ff40 	call	10008ff4 <__mcmp>
10005da8:	a80b883a 	mov	r5,r21
10005dac:	a00d883a 	mov	r6,r20
10005db0:	e009883a 	mov	r4,fp
10005db4:	102d883a 	mov	r22,r2
10005db8:	00090540 	call	10009054 <__mdiff>
10005dbc:	1007883a 	mov	r3,r2
10005dc0:	10800317 	ldw	r2,12(r2)
10005dc4:	bc800c04 	addi	r18,r23,48
10005dc8:	180b883a 	mov	r5,r3
10005dcc:	10004e1e 	bne	r2,zero,10005f08 <_dtoa_r+0xfac>
10005dd0:	8009883a 	mov	r4,r16
10005dd4:	d8c01615 	stw	r3,88(sp)
10005dd8:	0008ff40 	call	10008ff4 <__mcmp>
10005ddc:	d8c01617 	ldw	r3,88(sp)
10005de0:	e009883a 	mov	r4,fp
10005de4:	d8801615 	stw	r2,88(sp)
10005de8:	180b883a 	mov	r5,r3
10005dec:	00087180 	call	10008718 <_Bfree>
10005df0:	d8801617 	ldw	r2,88(sp)
10005df4:	1000041e 	bne	r2,zero,10005e08 <_dtoa_r+0xeac>
10005df8:	d9800317 	ldw	r6,12(sp)
10005dfc:	3000021e 	bne	r6,zero,10005e08 <_dtoa_r+0xeac>
10005e00:	d8c00617 	ldw	r3,24(sp)
10005e04:	18003726 	beq	r3,zero,10005ee4 <_dtoa_r+0xf88>
10005e08:	b0002016 	blt	r22,zero,10005e8c <_dtoa_r+0xf30>
10005e0c:	b000041e 	bne	r22,zero,10005e20 <_dtoa_r+0xec4>
10005e10:	d9000317 	ldw	r4,12(sp)
10005e14:	2000021e 	bne	r4,zero,10005e20 <_dtoa_r+0xec4>
10005e18:	d8c00617 	ldw	r3,24(sp)
10005e1c:	18001b26 	beq	r3,zero,10005e8c <_dtoa_r+0xf30>
10005e20:	00810716 	blt	zero,r2,10006240 <_dtoa_r+0x12e4>
10005e24:	d8c00417 	ldw	r3,16(sp)
10005e28:	9d800044 	addi	r22,r19,1
10005e2c:	9c800005 	stb	r18,0(r19)
10005e30:	b02f883a 	mov	r23,r22
10005e34:	98c10626 	beq	r19,r3,10006250 <_dtoa_r+0x12f4>
10005e38:	800b883a 	mov	r5,r16
10005e3c:	000f883a 	mov	r7,zero
10005e40:	01800284 	movi	r6,10
10005e44:	e009883a 	mov	r4,fp
10005e48:	00087400 	call	10008740 <__multadd>
10005e4c:	1021883a 	mov	r16,r2
10005e50:	000f883a 	mov	r7,zero
10005e54:	01800284 	movi	r6,10
10005e58:	880b883a 	mov	r5,r17
10005e5c:	e009883a 	mov	r4,fp
10005e60:	8d002526 	beq	r17,r20,10005ef8 <_dtoa_r+0xf9c>
10005e64:	00087400 	call	10008740 <__multadd>
10005e68:	a00b883a 	mov	r5,r20
10005e6c:	000f883a 	mov	r7,zero
10005e70:	01800284 	movi	r6,10
10005e74:	e009883a 	mov	r4,fp
10005e78:	1023883a 	mov	r17,r2
10005e7c:	00087400 	call	10008740 <__multadd>
10005e80:	1029883a 	mov	r20,r2
10005e84:	b027883a 	mov	r19,r22
10005e88:	003fc006 	br	10005d8c <__alt_data_end+0xf8005d8c>
10005e8c:	9011883a 	mov	r8,r18
10005e90:	00800e0e 	bge	zero,r2,10005ecc <_dtoa_r+0xf70>
10005e94:	800b883a 	mov	r5,r16
10005e98:	01800044 	movi	r6,1
10005e9c:	e009883a 	mov	r4,fp
10005ea0:	da001715 	stw	r8,92(sp)
10005ea4:	0008eac0 	call	10008eac <__lshift>
10005ea8:	a80b883a 	mov	r5,r21
10005eac:	1009883a 	mov	r4,r2
10005eb0:	1021883a 	mov	r16,r2
10005eb4:	0008ff40 	call	10008ff4 <__mcmp>
10005eb8:	da001717 	ldw	r8,92(sp)
10005ebc:	0081960e 	bge	zero,r2,10006518 <_dtoa_r+0x15bc>
10005ec0:	00800e44 	movi	r2,57
10005ec4:	40817026 	beq	r8,r2,10006488 <_dtoa_r+0x152c>
10005ec8:	ba000c44 	addi	r8,r23,49
10005ecc:	8825883a 	mov	r18,r17
10005ed0:	9dc00044 	addi	r23,r19,1
10005ed4:	9a000005 	stb	r8,0(r19)
10005ed8:	a023883a 	mov	r17,r20
10005edc:	dc000915 	stw	r16,36(sp)
10005ee0:	003f2406 	br	10005b74 <__alt_data_end+0xf8005b74>
10005ee4:	00800e44 	movi	r2,57
10005ee8:	9011883a 	mov	r8,r18
10005eec:	90816626 	beq	r18,r2,10006488 <_dtoa_r+0x152c>
10005ef0:	05bff516 	blt	zero,r22,10005ec8 <__alt_data_end+0xf8005ec8>
10005ef4:	003ff506 	br	10005ecc <__alt_data_end+0xf8005ecc>
10005ef8:	00087400 	call	10008740 <__multadd>
10005efc:	1023883a 	mov	r17,r2
10005f00:	1029883a 	mov	r20,r2
10005f04:	003fdf06 	br	10005e84 <__alt_data_end+0xf8005e84>
10005f08:	e009883a 	mov	r4,fp
10005f0c:	00087180 	call	10008718 <_Bfree>
10005f10:	00800044 	movi	r2,1
10005f14:	003fbc06 	br	10005e08 <__alt_data_end+0xf8005e08>
10005f18:	a80b883a 	mov	r5,r21
10005f1c:	8009883a 	mov	r4,r16
10005f20:	0008ff40 	call	10008ff4 <__mcmp>
10005f24:	103edb0e 	bge	r2,zero,10005a94 <__alt_data_end+0xf8005a94>
10005f28:	800b883a 	mov	r5,r16
10005f2c:	000f883a 	mov	r7,zero
10005f30:	01800284 	movi	r6,10
10005f34:	e009883a 	mov	r4,fp
10005f38:	00087400 	call	10008740 <__multadd>
10005f3c:	1021883a 	mov	r16,r2
10005f40:	d8800517 	ldw	r2,20(sp)
10005f44:	d8c00b17 	ldw	r3,44(sp)
10005f48:	10bfffc4 	addi	r2,r2,-1
10005f4c:	d8800515 	stw	r2,20(sp)
10005f50:	183f761e 	bne	r3,zero,10005d2c <__alt_data_end+0xf8005d2c>
10005f54:	d9000c17 	ldw	r4,48(sp)
10005f58:	0101730e 	bge	zero,r4,10006528 <_dtoa_r+0x15cc>
10005f5c:	d9000615 	stw	r4,24(sp)
10005f60:	003ed006 	br	10005aa4 <__alt_data_end+0xf8005aa4>
10005f64:	00800084 	movi	r2,2
10005f68:	3081861e 	bne	r6,r2,10006584 <_dtoa_r+0x1628>
10005f6c:	d8000b15 	stw	zero,44(sp)
10005f70:	003f3c06 	br	10005c64 <__alt_data_end+0xf8005c64>
10005f74:	dc000917 	ldw	r16,36(sp)
10005f78:	003e9206 	br	100059c4 <__alt_data_end+0xf80059c4>
10005f7c:	d9c00317 	ldw	r7,12(sp)
10005f80:	00800084 	movi	r2,2
10005f84:	11fec50e 	bge	r2,r7,10005a9c <__alt_data_end+0xf8005a9c>
10005f88:	d9000617 	ldw	r4,24(sp)
10005f8c:	20013c1e 	bne	r4,zero,10006480 <_dtoa_r+0x1524>
10005f90:	a80b883a 	mov	r5,r21
10005f94:	000f883a 	mov	r7,zero
10005f98:	01800144 	movi	r6,5
10005f9c:	e009883a 	mov	r4,fp
10005fa0:	00087400 	call	10008740 <__multadd>
10005fa4:	100b883a 	mov	r5,r2
10005fa8:	8009883a 	mov	r4,r16
10005fac:	102b883a 	mov	r21,r2
10005fb0:	0008ff40 	call	10008ff4 <__mcmp>
10005fb4:	dc000915 	stw	r16,36(sp)
10005fb8:	00bf410e 	bge	zero,r2,10005cc0 <__alt_data_end+0xf8005cc0>
10005fbc:	d9c00717 	ldw	r7,28(sp)
10005fc0:	00800c44 	movi	r2,49
10005fc4:	38800005 	stb	r2,0(r7)
10005fc8:	d8800517 	ldw	r2,20(sp)
10005fcc:	3dc00044 	addi	r23,r7,1
10005fd0:	10800044 	addi	r2,r2,1
10005fd4:	d8800515 	stw	r2,20(sp)
10005fd8:	003f3d06 	br	10005cd0 <__alt_data_end+0xf8005cd0>
10005fdc:	d9800517 	ldw	r6,20(sp)
10005fe0:	d9c00717 	ldw	r7,28(sp)
10005fe4:	00800c44 	movi	r2,49
10005fe8:	31800044 	addi	r6,r6,1
10005fec:	d9800515 	stw	r6,20(sp)
10005ff0:	38800005 	stb	r2,0(r7)
10005ff4:	003edf06 	br	10005b74 <__alt_data_end+0xf8005b74>
10005ff8:	d8000b15 	stw	zero,44(sp)
10005ffc:	003c9f06 	br	1000527c <__alt_data_end+0xf800527c>
10006000:	903e7e1e 	bne	r18,zero,100059fc <__alt_data_end+0xf80059fc>
10006004:	00800434 	movhi	r2,16
10006008:	10bfffc4 	addi	r2,r2,-1
1000600c:	9884703a 	and	r2,r19,r2
10006010:	1000ea1e 	bne	r2,zero,100063bc <_dtoa_r+0x1460>
10006014:	9cdffc2c 	andhi	r19,r19,32752
10006018:	9800e826 	beq	r19,zero,100063bc <_dtoa_r+0x1460>
1000601c:	d9c00817 	ldw	r7,32(sp)
10006020:	b5800044 	addi	r22,r22,1
10006024:	04c00044 	movi	r19,1
10006028:	39c00044 	addi	r7,r7,1
1000602c:	d9c00815 	stw	r7,32(sp)
10006030:	d8800d17 	ldw	r2,52(sp)
10006034:	103e721e 	bne	r2,zero,10005a00 <__alt_data_end+0xf8005a00>
10006038:	00800044 	movi	r2,1
1000603c:	003e7906 	br	10005a24 <__alt_data_end+0xf8005a24>
10006040:	8009883a 	mov	r4,r16
10006044:	000f3600 	call	1000f360 <__floatsidf>
10006048:	d9800f17 	ldw	r6,60(sp)
1000604c:	d9c01017 	ldw	r7,64(sp)
10006050:	1009883a 	mov	r4,r2
10006054:	180b883a 	mov	r5,r3
10006058:	000e1780 	call	1000e178 <__muldf3>
1000605c:	000d883a 	mov	r6,zero
10006060:	01d00734 	movhi	r7,16412
10006064:	1009883a 	mov	r4,r2
10006068:	180b883a 	mov	r5,r3
1000606c:	000cca40 	call	1000cca4 <__adddf3>
10006070:	047f3034 	movhi	r17,64704
10006074:	1021883a 	mov	r16,r2
10006078:	1c63883a 	add	r17,r3,r17
1000607c:	d9000f17 	ldw	r4,60(sp)
10006080:	d9401017 	ldw	r5,64(sp)
10006084:	000d883a 	mov	r6,zero
10006088:	01d00534 	movhi	r7,16404
1000608c:	000e9e40 	call	1000e9e4 <__subdf3>
10006090:	800d883a 	mov	r6,r16
10006094:	880f883a 	mov	r7,r17
10006098:	1009883a 	mov	r4,r2
1000609c:	180b883a 	mov	r5,r3
100060a0:	102b883a 	mov	r21,r2
100060a4:	1829883a 	mov	r20,r3
100060a8:	000dfa80 	call	1000dfa8 <__gedf2>
100060ac:	00806c16 	blt	zero,r2,10006260 <_dtoa_r+0x1304>
100060b0:	89e0003c 	xorhi	r7,r17,32768
100060b4:	800d883a 	mov	r6,r16
100060b8:	a809883a 	mov	r4,r21
100060bc:	a00b883a 	mov	r5,r20
100060c0:	000e0840 	call	1000e084 <__ledf2>
100060c4:	103d7e0e 	bge	r2,zero,100056c0 <__alt_data_end+0xf80056c0>
100060c8:	002b883a 	mov	r21,zero
100060cc:	0023883a 	mov	r17,zero
100060d0:	003efb06 	br	10005cc0 <__alt_data_end+0xf8005cc0>
100060d4:	d8800717 	ldw	r2,28(sp)
100060d8:	003bd006 	br	1000501c <__alt_data_end+0xf800501c>
100060dc:	d9000a17 	ldw	r4,40(sp)
100060e0:	d9800d17 	ldw	r6,52(sp)
100060e4:	dd400a15 	stw	r21,40(sp)
100060e8:	a905c83a 	sub	r2,r21,r4
100060ec:	308d883a 	add	r6,r6,r2
100060f0:	d9800d15 	stw	r6,52(sp)
100060f4:	002b883a 	mov	r21,zero
100060f8:	003e0606 	br	10005914 <__alt_data_end+0xf8005914>
100060fc:	9023883a 	mov	r17,r18
10006100:	9829883a 	mov	r20,r19
10006104:	04000084 	movi	r16,2
10006108:	003c9206 	br	10005354 <__alt_data_end+0xf8005354>
1000610c:	04000044 	movi	r16,1
10006110:	dc000c15 	stw	r16,48(sp)
10006114:	dc000615 	stw	r16,24(sp)
10006118:	dc002215 	stw	r16,136(sp)
1000611c:	e0001115 	stw	zero,68(fp)
10006120:	000b883a 	mov	r5,zero
10006124:	003c6906 	br	100052cc <__alt_data_end+0xf80052cc>
10006128:	3021883a 	mov	r16,r6
1000612c:	003ffb06 	br	1000611c <__alt_data_end+0xf800611c>
10006130:	1000021e 	bne	r2,zero,1000613c <_dtoa_r+0x11e0>
10006134:	4200004c 	andi	r8,r8,1
10006138:	403e7d1e 	bne	r8,zero,10005b30 <__alt_data_end+0xf8005b30>
1000613c:	01000c04 	movi	r4,48
10006140:	00000106 	br	10006148 <_dtoa_r+0x11ec>
10006144:	102f883a 	mov	r23,r2
10006148:	b8bfffc4 	addi	r2,r23,-1
1000614c:	10c00007 	ldb	r3,0(r2)
10006150:	193ffc26 	beq	r3,r4,10006144 <__alt_data_end+0xf8006144>
10006154:	003e8706 	br	10005b74 <__alt_data_end+0xf8005b74>
10006158:	d8800517 	ldw	r2,20(sp)
1000615c:	00a3c83a 	sub	r17,zero,r2
10006160:	8800a426 	beq	r17,zero,100063f4 <_dtoa_r+0x1498>
10006164:	888003cc 	andi	r2,r17,15
10006168:	100490fa 	slli	r2,r2,3
1000616c:	00c40074 	movhi	r3,4097
10006170:	18c9ff04 	addi	r3,r3,10236
10006174:	1885883a 	add	r2,r3,r2
10006178:	11800017 	ldw	r6,0(r2)
1000617c:	11c00117 	ldw	r7,4(r2)
10006180:	9009883a 	mov	r4,r18
10006184:	980b883a 	mov	r5,r19
10006188:	8823d13a 	srai	r17,r17,4
1000618c:	000e1780 	call	1000e178 <__muldf3>
10006190:	d8800f15 	stw	r2,60(sp)
10006194:	d8c01015 	stw	r3,64(sp)
10006198:	8800e826 	beq	r17,zero,1000653c <_dtoa_r+0x15e0>
1000619c:	05040074 	movhi	r20,4097
100061a0:	a509f504 	addi	r20,r20,10196
100061a4:	04000084 	movi	r16,2
100061a8:	8980004c 	andi	r6,r17,1
100061ac:	1009883a 	mov	r4,r2
100061b0:	8823d07a 	srai	r17,r17,1
100061b4:	180b883a 	mov	r5,r3
100061b8:	30000426 	beq	r6,zero,100061cc <_dtoa_r+0x1270>
100061bc:	a1800017 	ldw	r6,0(r20)
100061c0:	a1c00117 	ldw	r7,4(r20)
100061c4:	84000044 	addi	r16,r16,1
100061c8:	000e1780 	call	1000e178 <__muldf3>
100061cc:	a5000204 	addi	r20,r20,8
100061d0:	883ff51e 	bne	r17,zero,100061a8 <__alt_data_end+0xf80061a8>
100061d4:	d8800f15 	stw	r2,60(sp)
100061d8:	d8c01015 	stw	r3,64(sp)
100061dc:	003c7606 	br	100053b8 <__alt_data_end+0xf80053b8>
100061e0:	00c00c04 	movi	r3,48
100061e4:	10c00005 	stb	r3,0(r2)
100061e8:	d8c00517 	ldw	r3,20(sp)
100061ec:	bd3fffc3 	ldbu	r20,-1(r23)
100061f0:	18c00044 	addi	r3,r3,1
100061f4:	d8c00515 	stw	r3,20(sp)
100061f8:	003db906 	br	100058e0 <__alt_data_end+0xf80058e0>
100061fc:	89400117 	ldw	r5,4(r17)
10006200:	e009883a 	mov	r4,fp
10006204:	00086700 	call	10008670 <_Balloc>
10006208:	89800417 	ldw	r6,16(r17)
1000620c:	89400304 	addi	r5,r17,12
10006210:	11000304 	addi	r4,r2,12
10006214:	31800084 	addi	r6,r6,2
10006218:	318d883a 	add	r6,r6,r6
1000621c:	318d883a 	add	r6,r6,r6
10006220:	1027883a 	mov	r19,r2
10006224:	00082a40 	call	100082a4 <memcpy>
10006228:	01800044 	movi	r6,1
1000622c:	980b883a 	mov	r5,r19
10006230:	e009883a 	mov	r4,fp
10006234:	0008eac0 	call	10008eac <__lshift>
10006238:	1029883a 	mov	r20,r2
1000623c:	003ecc06 	br	10005d70 <__alt_data_end+0xf8005d70>
10006240:	00800e44 	movi	r2,57
10006244:	90809026 	beq	r18,r2,10006488 <_dtoa_r+0x152c>
10006248:	92000044 	addi	r8,r18,1
1000624c:	003f1f06 	br	10005ecc <__alt_data_end+0xf8005ecc>
10006250:	9011883a 	mov	r8,r18
10006254:	8825883a 	mov	r18,r17
10006258:	a023883a 	mov	r17,r20
1000625c:	003e2906 	br	10005b04 <__alt_data_end+0xf8005b04>
10006260:	002b883a 	mov	r21,zero
10006264:	0023883a 	mov	r17,zero
10006268:	003f5406 	br	10005fbc <__alt_data_end+0xf8005fbc>
1000626c:	61bfffc4 	addi	r6,r12,-1
10006270:	300490fa 	slli	r2,r6,3
10006274:	00c40074 	movhi	r3,4097
10006278:	18c9ff04 	addi	r3,r3,10236
1000627c:	1885883a 	add	r2,r3,r2
10006280:	11000017 	ldw	r4,0(r2)
10006284:	11400117 	ldw	r5,4(r2)
10006288:	d8800717 	ldw	r2,28(sp)
1000628c:	880f883a 	mov	r7,r17
10006290:	d9801215 	stw	r6,72(sp)
10006294:	800d883a 	mov	r6,r16
10006298:	db001615 	stw	r12,88(sp)
1000629c:	15c00044 	addi	r23,r2,1
100062a0:	000e1780 	call	1000e178 <__muldf3>
100062a4:	d9401017 	ldw	r5,64(sp)
100062a8:	d9000f17 	ldw	r4,60(sp)
100062ac:	d8c01515 	stw	r3,84(sp)
100062b0:	d8801415 	stw	r2,80(sp)
100062b4:	000f2e00 	call	1000f2e0 <__fixdfsi>
100062b8:	1009883a 	mov	r4,r2
100062bc:	1021883a 	mov	r16,r2
100062c0:	000f3600 	call	1000f360 <__floatsidf>
100062c4:	d9000f17 	ldw	r4,60(sp)
100062c8:	d9401017 	ldw	r5,64(sp)
100062cc:	100d883a 	mov	r6,r2
100062d0:	180f883a 	mov	r7,r3
100062d4:	000e9e40 	call	1000e9e4 <__subdf3>
100062d8:	1829883a 	mov	r20,r3
100062dc:	d8c00717 	ldw	r3,28(sp)
100062e0:	84000c04 	addi	r16,r16,48
100062e4:	1023883a 	mov	r17,r2
100062e8:	1c000005 	stb	r16,0(r3)
100062ec:	db001617 	ldw	r12,88(sp)
100062f0:	00800044 	movi	r2,1
100062f4:	60802226 	beq	r12,r2,10006380 <_dtoa_r+0x1424>
100062f8:	d9c00717 	ldw	r7,28(sp)
100062fc:	8805883a 	mov	r2,r17
10006300:	b82b883a 	mov	r21,r23
10006304:	3b19883a 	add	r12,r7,r12
10006308:	6023883a 	mov	r17,r12
1000630c:	a007883a 	mov	r3,r20
10006310:	dc800f15 	stw	r18,60(sp)
10006314:	000d883a 	mov	r6,zero
10006318:	01d00934 	movhi	r7,16420
1000631c:	1009883a 	mov	r4,r2
10006320:	180b883a 	mov	r5,r3
10006324:	000e1780 	call	1000e178 <__muldf3>
10006328:	180b883a 	mov	r5,r3
1000632c:	1009883a 	mov	r4,r2
10006330:	1829883a 	mov	r20,r3
10006334:	1025883a 	mov	r18,r2
10006338:	000f2e00 	call	1000f2e0 <__fixdfsi>
1000633c:	1009883a 	mov	r4,r2
10006340:	1021883a 	mov	r16,r2
10006344:	000f3600 	call	1000f360 <__floatsidf>
10006348:	100d883a 	mov	r6,r2
1000634c:	180f883a 	mov	r7,r3
10006350:	9009883a 	mov	r4,r18
10006354:	a00b883a 	mov	r5,r20
10006358:	84000c04 	addi	r16,r16,48
1000635c:	000e9e40 	call	1000e9e4 <__subdf3>
10006360:	ad400044 	addi	r21,r21,1
10006364:	ac3fffc5 	stb	r16,-1(r21)
10006368:	ac7fea1e 	bne	r21,r17,10006314 <__alt_data_end+0xf8006314>
1000636c:	1023883a 	mov	r17,r2
10006370:	d8801217 	ldw	r2,72(sp)
10006374:	dc800f17 	ldw	r18,60(sp)
10006378:	1829883a 	mov	r20,r3
1000637c:	b8af883a 	add	r23,r23,r2
10006380:	d9001417 	ldw	r4,80(sp)
10006384:	d9401517 	ldw	r5,84(sp)
10006388:	000d883a 	mov	r6,zero
1000638c:	01cff834 	movhi	r7,16352
10006390:	000cca40 	call	1000cca4 <__adddf3>
10006394:	880d883a 	mov	r6,r17
10006398:	a00f883a 	mov	r7,r20
1000639c:	1009883a 	mov	r4,r2
100063a0:	180b883a 	mov	r5,r3
100063a4:	000e0840 	call	1000e084 <__ledf2>
100063a8:	10003e0e 	bge	r2,zero,100064a4 <_dtoa_r+0x1548>
100063ac:	d9001317 	ldw	r4,76(sp)
100063b0:	bd3fffc3 	ldbu	r20,-1(r23)
100063b4:	d9000515 	stw	r4,20(sp)
100063b8:	003d3b06 	br	100058a8 <__alt_data_end+0xf80058a8>
100063bc:	0027883a 	mov	r19,zero
100063c0:	003f1b06 	br	10006030 <__alt_data_end+0xf8006030>
100063c4:	d8800817 	ldw	r2,32(sp)
100063c8:	11e9c83a 	sub	r20,r2,r7
100063cc:	0005883a 	mov	r2,zero
100063d0:	003d5406 	br	10005924 <__alt_data_end+0xf8005924>
100063d4:	00800044 	movi	r2,1
100063d8:	003dc706 	br	10005af8 <__alt_data_end+0xf8005af8>
100063dc:	d8c00217 	ldw	r3,8(sp)
100063e0:	00800d84 	movi	r2,54
100063e4:	dd400a17 	ldw	r21,40(sp)
100063e8:	10c5c83a 	sub	r2,r2,r3
100063ec:	dd000817 	ldw	r20,32(sp)
100063f0:	003d4c06 	br	10005924 <__alt_data_end+0xf8005924>
100063f4:	dc800f15 	stw	r18,60(sp)
100063f8:	dcc01015 	stw	r19,64(sp)
100063fc:	04000084 	movi	r16,2
10006400:	003bed06 	br	100053b8 <__alt_data_end+0xf80053b8>
10006404:	d9000617 	ldw	r4,24(sp)
10006408:	203f0d26 	beq	r4,zero,10006040 <__alt_data_end+0xf8006040>
1000640c:	d9800c17 	ldw	r6,48(sp)
10006410:	01bcab0e 	bge	zero,r6,100056c0 <__alt_data_end+0xf80056c0>
10006414:	d9401017 	ldw	r5,64(sp)
10006418:	d9000f17 	ldw	r4,60(sp)
1000641c:	000d883a 	mov	r6,zero
10006420:	01d00934 	movhi	r7,16420
10006424:	000e1780 	call	1000e178 <__muldf3>
10006428:	81000044 	addi	r4,r16,1
1000642c:	d8800f15 	stw	r2,60(sp)
10006430:	d8c01015 	stw	r3,64(sp)
10006434:	000f3600 	call	1000f360 <__floatsidf>
10006438:	d9800f17 	ldw	r6,60(sp)
1000643c:	d9c01017 	ldw	r7,64(sp)
10006440:	1009883a 	mov	r4,r2
10006444:	180b883a 	mov	r5,r3
10006448:	000e1780 	call	1000e178 <__muldf3>
1000644c:	01d00734 	movhi	r7,16412
10006450:	000d883a 	mov	r6,zero
10006454:	1009883a 	mov	r4,r2
10006458:	180b883a 	mov	r5,r3
1000645c:	000cca40 	call	1000cca4 <__adddf3>
10006460:	d9c00517 	ldw	r7,20(sp)
10006464:	047f3034 	movhi	r17,64704
10006468:	1021883a 	mov	r16,r2
1000646c:	39ffffc4 	addi	r7,r7,-1
10006470:	d9c01315 	stw	r7,76(sp)
10006474:	1c63883a 	add	r17,r3,r17
10006478:	db000c17 	ldw	r12,48(sp)
1000647c:	003bea06 	br	10005428 <__alt_data_end+0xf8005428>
10006480:	dc000915 	stw	r16,36(sp)
10006484:	003e0e06 	br	10005cc0 <__alt_data_end+0xf8005cc0>
10006488:	01000e44 	movi	r4,57
1000648c:	8825883a 	mov	r18,r17
10006490:	9dc00044 	addi	r23,r19,1
10006494:	99000005 	stb	r4,0(r19)
10006498:	a023883a 	mov	r17,r20
1000649c:	dc000915 	stw	r16,36(sp)
100064a0:	003da406 	br	10005b34 <__alt_data_end+0xf8005b34>
100064a4:	d9801417 	ldw	r6,80(sp)
100064a8:	d9c01517 	ldw	r7,84(sp)
100064ac:	0009883a 	mov	r4,zero
100064b0:	014ff834 	movhi	r5,16352
100064b4:	000e9e40 	call	1000e9e4 <__subdf3>
100064b8:	880d883a 	mov	r6,r17
100064bc:	a00f883a 	mov	r7,r20
100064c0:	1009883a 	mov	r4,r2
100064c4:	180b883a 	mov	r5,r3
100064c8:	000dfa80 	call	1000dfa8 <__gedf2>
100064cc:	00bc7c0e 	bge	zero,r2,100056c0 <__alt_data_end+0xf80056c0>
100064d0:	01000c04 	movi	r4,48
100064d4:	00000106 	br	100064dc <_dtoa_r+0x1580>
100064d8:	102f883a 	mov	r23,r2
100064dc:	b8bfffc4 	addi	r2,r23,-1
100064e0:	10c00007 	ldb	r3,0(r2)
100064e4:	193ffc26 	beq	r3,r4,100064d8 <__alt_data_end+0xf80064d8>
100064e8:	d9801317 	ldw	r6,76(sp)
100064ec:	d9800515 	stw	r6,20(sp)
100064f0:	003c4406 	br	10005604 <__alt_data_end+0xf8005604>
100064f4:	d9801317 	ldw	r6,76(sp)
100064f8:	d9800515 	stw	r6,20(sp)
100064fc:	003cea06 	br	100058a8 <__alt_data_end+0xf80058a8>
10006500:	dd800f17 	ldw	r22,60(sp)
10006504:	dcc01017 	ldw	r19,64(sp)
10006508:	dc801217 	ldw	r18,72(sp)
1000650c:	003c6c06 	br	100056c0 <__alt_data_end+0xf80056c0>
10006510:	903e031e 	bne	r18,zero,10005d20 <__alt_data_end+0xf8005d20>
10006514:	003ebb06 	br	10006004 <__alt_data_end+0xf8006004>
10006518:	103e6c1e 	bne	r2,zero,10005ecc <__alt_data_end+0xf8005ecc>
1000651c:	4080004c 	andi	r2,r8,1
10006520:	103e6a26 	beq	r2,zero,10005ecc <__alt_data_end+0xf8005ecc>
10006524:	003e6606 	br	10005ec0 <__alt_data_end+0xf8005ec0>
10006528:	d8c00317 	ldw	r3,12(sp)
1000652c:	00800084 	movi	r2,2
10006530:	10c02916 	blt	r2,r3,100065d8 <_dtoa_r+0x167c>
10006534:	d9000c17 	ldw	r4,48(sp)
10006538:	003e8806 	br	10005f5c <__alt_data_end+0xf8005f5c>
1000653c:	04000084 	movi	r16,2
10006540:	003b9d06 	br	100053b8 <__alt_data_end+0xf80053b8>
10006544:	d9001317 	ldw	r4,76(sp)
10006548:	d9000515 	stw	r4,20(sp)
1000654c:	003cd606 	br	100058a8 <__alt_data_end+0xf80058a8>
10006550:	d8801317 	ldw	r2,76(sp)
10006554:	d8800515 	stw	r2,20(sp)
10006558:	003c2a06 	br	10005604 <__alt_data_end+0xf8005604>
1000655c:	d9800317 	ldw	r6,12(sp)
10006560:	00800084 	movi	r2,2
10006564:	11801516 	blt	r2,r6,100065bc <_dtoa_r+0x1660>
10006568:	d9c00c17 	ldw	r7,48(sp)
1000656c:	d9c00615 	stw	r7,24(sp)
10006570:	003df706 	br	10005d50 <__alt_data_end+0xf8005d50>
10006574:	193d3926 	beq	r3,r4,10005a5c <__alt_data_end+0xf8005a5c>
10006578:	00c00f04 	movi	r3,60
1000657c:	1885c83a 	sub	r2,r3,r2
10006580:	003ddf06 	br	10005d00 <__alt_data_end+0xf8005d00>
10006584:	e009883a 	mov	r4,fp
10006588:	e0001115 	stw	zero,68(fp)
1000658c:	000b883a 	mov	r5,zero
10006590:	00086700 	call	10008670 <_Balloc>
10006594:	d8800715 	stw	r2,28(sp)
10006598:	d8c00717 	ldw	r3,28(sp)
1000659c:	00bfffc4 	movi	r2,-1
100065a0:	01000044 	movi	r4,1
100065a4:	d8800c15 	stw	r2,48(sp)
100065a8:	e0c01015 	stw	r3,64(fp)
100065ac:	d9000b15 	stw	r4,44(sp)
100065b0:	d8800615 	stw	r2,24(sp)
100065b4:	d8002215 	stw	zero,136(sp)
100065b8:	003c4106 	br	100056c0 <__alt_data_end+0xf80056c0>
100065bc:	d8c00c17 	ldw	r3,48(sp)
100065c0:	d8c00615 	stw	r3,24(sp)
100065c4:	003e7006 	br	10005f88 <__alt_data_end+0xf8005f88>
100065c8:	04400044 	movi	r17,1
100065cc:	003b2006 	br	10005250 <__alt_data_end+0xf8005250>
100065d0:	000b883a 	mov	r5,zero
100065d4:	003b3d06 	br	100052cc <__alt_data_end+0xf80052cc>
100065d8:	d8800c17 	ldw	r2,48(sp)
100065dc:	d8800615 	stw	r2,24(sp)
100065e0:	003e6906 	br	10005f88 <__alt_data_end+0xf8005f88>

100065e4 <__sflush_r>:
100065e4:	2880030b 	ldhu	r2,12(r5)
100065e8:	defffb04 	addi	sp,sp,-20
100065ec:	dcc00315 	stw	r19,12(sp)
100065f0:	dc400115 	stw	r17,4(sp)
100065f4:	dfc00415 	stw	ra,16(sp)
100065f8:	dc800215 	stw	r18,8(sp)
100065fc:	dc000015 	stw	r16,0(sp)
10006600:	10c0020c 	andi	r3,r2,8
10006604:	2823883a 	mov	r17,r5
10006608:	2027883a 	mov	r19,r4
1000660c:	1800311e 	bne	r3,zero,100066d4 <__sflush_r+0xf0>
10006610:	28c00117 	ldw	r3,4(r5)
10006614:	10820014 	ori	r2,r2,2048
10006618:	2880030d 	sth	r2,12(r5)
1000661c:	00c04b0e 	bge	zero,r3,1000674c <__sflush_r+0x168>
10006620:	8a000a17 	ldw	r8,40(r17)
10006624:	40002326 	beq	r8,zero,100066b4 <__sflush_r+0xd0>
10006628:	9c000017 	ldw	r16,0(r19)
1000662c:	10c4000c 	andi	r3,r2,4096
10006630:	98000015 	stw	zero,0(r19)
10006634:	18004826 	beq	r3,zero,10006758 <__sflush_r+0x174>
10006638:	89801417 	ldw	r6,80(r17)
1000663c:	10c0010c 	andi	r3,r2,4
10006640:	18000626 	beq	r3,zero,1000665c <__sflush_r+0x78>
10006644:	88c00117 	ldw	r3,4(r17)
10006648:	88800c17 	ldw	r2,48(r17)
1000664c:	30cdc83a 	sub	r6,r6,r3
10006650:	10000226 	beq	r2,zero,1000665c <__sflush_r+0x78>
10006654:	88800f17 	ldw	r2,60(r17)
10006658:	308dc83a 	sub	r6,r6,r2
1000665c:	89400717 	ldw	r5,28(r17)
10006660:	000f883a 	mov	r7,zero
10006664:	9809883a 	mov	r4,r19
10006668:	403ee83a 	callr	r8
1000666c:	00ffffc4 	movi	r3,-1
10006670:	10c04426 	beq	r2,r3,10006784 <__sflush_r+0x1a0>
10006674:	88c0030b 	ldhu	r3,12(r17)
10006678:	89000417 	ldw	r4,16(r17)
1000667c:	88000115 	stw	zero,4(r17)
10006680:	197dffcc 	andi	r5,r3,63487
10006684:	8940030d 	sth	r5,12(r17)
10006688:	89000015 	stw	r4,0(r17)
1000668c:	18c4000c 	andi	r3,r3,4096
10006690:	18002c1e 	bne	r3,zero,10006744 <__sflush_r+0x160>
10006694:	89400c17 	ldw	r5,48(r17)
10006698:	9c000015 	stw	r16,0(r19)
1000669c:	28000526 	beq	r5,zero,100066b4 <__sflush_r+0xd0>
100066a0:	88801004 	addi	r2,r17,64
100066a4:	28800226 	beq	r5,r2,100066b0 <__sflush_r+0xcc>
100066a8:	9809883a 	mov	r4,r19
100066ac:	0006d600 	call	10006d60 <_free_r>
100066b0:	88000c15 	stw	zero,48(r17)
100066b4:	0005883a 	mov	r2,zero
100066b8:	dfc00417 	ldw	ra,16(sp)
100066bc:	dcc00317 	ldw	r19,12(sp)
100066c0:	dc800217 	ldw	r18,8(sp)
100066c4:	dc400117 	ldw	r17,4(sp)
100066c8:	dc000017 	ldw	r16,0(sp)
100066cc:	dec00504 	addi	sp,sp,20
100066d0:	f800283a 	ret
100066d4:	2c800417 	ldw	r18,16(r5)
100066d8:	903ff626 	beq	r18,zero,100066b4 <__alt_data_end+0xf80066b4>
100066dc:	2c000017 	ldw	r16,0(r5)
100066e0:	108000cc 	andi	r2,r2,3
100066e4:	2c800015 	stw	r18,0(r5)
100066e8:	84a1c83a 	sub	r16,r16,r18
100066ec:	1000131e 	bne	r2,zero,1000673c <__sflush_r+0x158>
100066f0:	28800517 	ldw	r2,20(r5)
100066f4:	88800215 	stw	r2,8(r17)
100066f8:	04000316 	blt	zero,r16,10006708 <__sflush_r+0x124>
100066fc:	003fed06 	br	100066b4 <__alt_data_end+0xf80066b4>
10006700:	90a5883a 	add	r18,r18,r2
10006704:	043feb0e 	bge	zero,r16,100066b4 <__alt_data_end+0xf80066b4>
10006708:	88800917 	ldw	r2,36(r17)
1000670c:	89400717 	ldw	r5,28(r17)
10006710:	800f883a 	mov	r7,r16
10006714:	900d883a 	mov	r6,r18
10006718:	9809883a 	mov	r4,r19
1000671c:	103ee83a 	callr	r2
10006720:	80a1c83a 	sub	r16,r16,r2
10006724:	00bff616 	blt	zero,r2,10006700 <__alt_data_end+0xf8006700>
10006728:	88c0030b 	ldhu	r3,12(r17)
1000672c:	00bfffc4 	movi	r2,-1
10006730:	18c01014 	ori	r3,r3,64
10006734:	88c0030d 	sth	r3,12(r17)
10006738:	003fdf06 	br	100066b8 <__alt_data_end+0xf80066b8>
1000673c:	0005883a 	mov	r2,zero
10006740:	003fec06 	br	100066f4 <__alt_data_end+0xf80066f4>
10006744:	88801415 	stw	r2,80(r17)
10006748:	003fd206 	br	10006694 <__alt_data_end+0xf8006694>
1000674c:	28c00f17 	ldw	r3,60(r5)
10006750:	00ffb316 	blt	zero,r3,10006620 <__alt_data_end+0xf8006620>
10006754:	003fd706 	br	100066b4 <__alt_data_end+0xf80066b4>
10006758:	89400717 	ldw	r5,28(r17)
1000675c:	000d883a 	mov	r6,zero
10006760:	01c00044 	movi	r7,1
10006764:	9809883a 	mov	r4,r19
10006768:	403ee83a 	callr	r8
1000676c:	100d883a 	mov	r6,r2
10006770:	00bfffc4 	movi	r2,-1
10006774:	30801426 	beq	r6,r2,100067c8 <__sflush_r+0x1e4>
10006778:	8880030b 	ldhu	r2,12(r17)
1000677c:	8a000a17 	ldw	r8,40(r17)
10006780:	003fae06 	br	1000663c <__alt_data_end+0xf800663c>
10006784:	98c00017 	ldw	r3,0(r19)
10006788:	183fba26 	beq	r3,zero,10006674 <__alt_data_end+0xf8006674>
1000678c:	01000744 	movi	r4,29
10006790:	19000626 	beq	r3,r4,100067ac <__sflush_r+0x1c8>
10006794:	01000584 	movi	r4,22
10006798:	19000426 	beq	r3,r4,100067ac <__sflush_r+0x1c8>
1000679c:	88c0030b 	ldhu	r3,12(r17)
100067a0:	18c01014 	ori	r3,r3,64
100067a4:	88c0030d 	sth	r3,12(r17)
100067a8:	003fc306 	br	100066b8 <__alt_data_end+0xf80066b8>
100067ac:	8880030b 	ldhu	r2,12(r17)
100067b0:	88c00417 	ldw	r3,16(r17)
100067b4:	88000115 	stw	zero,4(r17)
100067b8:	10bdffcc 	andi	r2,r2,63487
100067bc:	8880030d 	sth	r2,12(r17)
100067c0:	88c00015 	stw	r3,0(r17)
100067c4:	003fb306 	br	10006694 <__alt_data_end+0xf8006694>
100067c8:	98800017 	ldw	r2,0(r19)
100067cc:	103fea26 	beq	r2,zero,10006778 <__alt_data_end+0xf8006778>
100067d0:	00c00744 	movi	r3,29
100067d4:	10c00226 	beq	r2,r3,100067e0 <__sflush_r+0x1fc>
100067d8:	00c00584 	movi	r3,22
100067dc:	10c0031e 	bne	r2,r3,100067ec <__sflush_r+0x208>
100067e0:	9c000015 	stw	r16,0(r19)
100067e4:	0005883a 	mov	r2,zero
100067e8:	003fb306 	br	100066b8 <__alt_data_end+0xf80066b8>
100067ec:	88c0030b 	ldhu	r3,12(r17)
100067f0:	3005883a 	mov	r2,r6
100067f4:	18c01014 	ori	r3,r3,64
100067f8:	88c0030d 	sth	r3,12(r17)
100067fc:	003fae06 	br	100066b8 <__alt_data_end+0xf80066b8>

10006800 <_fflush_r>:
10006800:	defffd04 	addi	sp,sp,-12
10006804:	dc000115 	stw	r16,4(sp)
10006808:	dfc00215 	stw	ra,8(sp)
1000680c:	2021883a 	mov	r16,r4
10006810:	20000226 	beq	r4,zero,1000681c <_fflush_r+0x1c>
10006814:	20800e17 	ldw	r2,56(r4)
10006818:	10000c26 	beq	r2,zero,1000684c <_fflush_r+0x4c>
1000681c:	2880030f 	ldh	r2,12(r5)
10006820:	1000051e 	bne	r2,zero,10006838 <_fflush_r+0x38>
10006824:	0005883a 	mov	r2,zero
10006828:	dfc00217 	ldw	ra,8(sp)
1000682c:	dc000117 	ldw	r16,4(sp)
10006830:	dec00304 	addi	sp,sp,12
10006834:	f800283a 	ret
10006838:	8009883a 	mov	r4,r16
1000683c:	dfc00217 	ldw	ra,8(sp)
10006840:	dc000117 	ldw	r16,4(sp)
10006844:	dec00304 	addi	sp,sp,12
10006848:	00065e41 	jmpi	100065e4 <__sflush_r>
1000684c:	d9400015 	stw	r5,0(sp)
10006850:	0006bec0 	call	10006bec <__sinit>
10006854:	d9400017 	ldw	r5,0(sp)
10006858:	003ff006 	br	1000681c <__alt_data_end+0xf800681c>

1000685c <fflush>:
1000685c:	20000526 	beq	r4,zero,10006874 <fflush+0x18>
10006860:	00840074 	movhi	r2,4097
10006864:	10913204 	addi	r2,r2,17608
10006868:	200b883a 	mov	r5,r4
1000686c:	11000017 	ldw	r4,0(r2)
10006870:	00068001 	jmpi	10006800 <_fflush_r>
10006874:	00840074 	movhi	r2,4097
10006878:	10913104 	addi	r2,r2,17604
1000687c:	11000017 	ldw	r4,0(r2)
10006880:	01440034 	movhi	r5,4096
10006884:	295a0004 	addi	r5,r5,26624
10006888:	00075fc1 	jmpi	100075fc <_fwalk_reent>

1000688c <__fp_unlock>:
1000688c:	0005883a 	mov	r2,zero
10006890:	f800283a 	ret

10006894 <_cleanup_r>:
10006894:	01440074 	movhi	r5,4097
10006898:	296dfd04 	addi	r5,r5,-18444
1000689c:	00075fc1 	jmpi	100075fc <_fwalk_reent>

100068a0 <__sinit.part.1>:
100068a0:	defff704 	addi	sp,sp,-36
100068a4:	00c40034 	movhi	r3,4096
100068a8:	dfc00815 	stw	ra,32(sp)
100068ac:	ddc00715 	stw	r23,28(sp)
100068b0:	dd800615 	stw	r22,24(sp)
100068b4:	dd400515 	stw	r21,20(sp)
100068b8:	dd000415 	stw	r20,16(sp)
100068bc:	dcc00315 	stw	r19,12(sp)
100068c0:	dc800215 	stw	r18,8(sp)
100068c4:	dc400115 	stw	r17,4(sp)
100068c8:	dc000015 	stw	r16,0(sp)
100068cc:	18da2504 	addi	r3,r3,26772
100068d0:	24000117 	ldw	r16,4(r4)
100068d4:	20c00f15 	stw	r3,60(r4)
100068d8:	2080bb04 	addi	r2,r4,748
100068dc:	00c000c4 	movi	r3,3
100068e0:	20c0b915 	stw	r3,740(r4)
100068e4:	2080ba15 	stw	r2,744(r4)
100068e8:	2000b815 	stw	zero,736(r4)
100068ec:	05c00204 	movi	r23,8
100068f0:	00800104 	movi	r2,4
100068f4:	2025883a 	mov	r18,r4
100068f8:	b80d883a 	mov	r6,r23
100068fc:	81001704 	addi	r4,r16,92
10006900:	000b883a 	mov	r5,zero
10006904:	80000015 	stw	zero,0(r16)
10006908:	80000115 	stw	zero,4(r16)
1000690c:	80000215 	stw	zero,8(r16)
10006910:	8080030d 	sth	r2,12(r16)
10006914:	80001915 	stw	zero,100(r16)
10006918:	8000038d 	sth	zero,14(r16)
1000691c:	80000415 	stw	zero,16(r16)
10006920:	80000515 	stw	zero,20(r16)
10006924:	80000615 	stw	zero,24(r16)
10006928:	00085480 	call	10008548 <memset>
1000692c:	05840074 	movhi	r22,4097
10006930:	94400217 	ldw	r17,8(r18)
10006934:	05440074 	movhi	r21,4097
10006938:	05040074 	movhi	r20,4097
1000693c:	04c40074 	movhi	r19,4097
10006940:	b5a75504 	addi	r22,r22,-25260
10006944:	ad676c04 	addi	r21,r21,-25168
10006948:	a5278b04 	addi	r20,r20,-25044
1000694c:	9ce7a204 	addi	r19,r19,-24952
10006950:	85800815 	stw	r22,32(r16)
10006954:	85400915 	stw	r21,36(r16)
10006958:	85000a15 	stw	r20,40(r16)
1000695c:	84c00b15 	stw	r19,44(r16)
10006960:	84000715 	stw	r16,28(r16)
10006964:	00800284 	movi	r2,10
10006968:	8880030d 	sth	r2,12(r17)
1000696c:	00800044 	movi	r2,1
10006970:	b80d883a 	mov	r6,r23
10006974:	89001704 	addi	r4,r17,92
10006978:	000b883a 	mov	r5,zero
1000697c:	88000015 	stw	zero,0(r17)
10006980:	88000115 	stw	zero,4(r17)
10006984:	88000215 	stw	zero,8(r17)
10006988:	88001915 	stw	zero,100(r17)
1000698c:	8880038d 	sth	r2,14(r17)
10006990:	88000415 	stw	zero,16(r17)
10006994:	88000515 	stw	zero,20(r17)
10006998:	88000615 	stw	zero,24(r17)
1000699c:	00085480 	call	10008548 <memset>
100069a0:	94000317 	ldw	r16,12(r18)
100069a4:	00800484 	movi	r2,18
100069a8:	8c400715 	stw	r17,28(r17)
100069ac:	8d800815 	stw	r22,32(r17)
100069b0:	8d400915 	stw	r21,36(r17)
100069b4:	8d000a15 	stw	r20,40(r17)
100069b8:	8cc00b15 	stw	r19,44(r17)
100069bc:	8080030d 	sth	r2,12(r16)
100069c0:	00800084 	movi	r2,2
100069c4:	80000015 	stw	zero,0(r16)
100069c8:	80000115 	stw	zero,4(r16)
100069cc:	80000215 	stw	zero,8(r16)
100069d0:	80001915 	stw	zero,100(r16)
100069d4:	8080038d 	sth	r2,14(r16)
100069d8:	80000415 	stw	zero,16(r16)
100069dc:	80000515 	stw	zero,20(r16)
100069e0:	80000615 	stw	zero,24(r16)
100069e4:	b80d883a 	mov	r6,r23
100069e8:	000b883a 	mov	r5,zero
100069ec:	81001704 	addi	r4,r16,92
100069f0:	00085480 	call	10008548 <memset>
100069f4:	00800044 	movi	r2,1
100069f8:	84000715 	stw	r16,28(r16)
100069fc:	85800815 	stw	r22,32(r16)
10006a00:	85400915 	stw	r21,36(r16)
10006a04:	85000a15 	stw	r20,40(r16)
10006a08:	84c00b15 	stw	r19,44(r16)
10006a0c:	90800e15 	stw	r2,56(r18)
10006a10:	dfc00817 	ldw	ra,32(sp)
10006a14:	ddc00717 	ldw	r23,28(sp)
10006a18:	dd800617 	ldw	r22,24(sp)
10006a1c:	dd400517 	ldw	r21,20(sp)
10006a20:	dd000417 	ldw	r20,16(sp)
10006a24:	dcc00317 	ldw	r19,12(sp)
10006a28:	dc800217 	ldw	r18,8(sp)
10006a2c:	dc400117 	ldw	r17,4(sp)
10006a30:	dc000017 	ldw	r16,0(sp)
10006a34:	dec00904 	addi	sp,sp,36
10006a38:	f800283a 	ret

10006a3c <__fp_lock>:
10006a3c:	0005883a 	mov	r2,zero
10006a40:	f800283a 	ret

10006a44 <__sfmoreglue>:
10006a44:	defffc04 	addi	sp,sp,-16
10006a48:	dc800215 	stw	r18,8(sp)
10006a4c:	2825883a 	mov	r18,r5
10006a50:	dc000015 	stw	r16,0(sp)
10006a54:	01401a04 	movi	r5,104
10006a58:	2021883a 	mov	r16,r4
10006a5c:	913fffc4 	addi	r4,r18,-1
10006a60:	dfc00315 	stw	ra,12(sp)
10006a64:	dc400115 	stw	r17,4(sp)
10006a68:	000cc7c0 	call	1000cc7c <__mulsi3>
10006a6c:	8009883a 	mov	r4,r16
10006a70:	11401d04 	addi	r5,r2,116
10006a74:	1023883a 	mov	r17,r2
10006a78:	00079b40 	call	100079b4 <_malloc_r>
10006a7c:	1021883a 	mov	r16,r2
10006a80:	10000726 	beq	r2,zero,10006aa0 <__sfmoreglue+0x5c>
10006a84:	11000304 	addi	r4,r2,12
10006a88:	10000015 	stw	zero,0(r2)
10006a8c:	14800115 	stw	r18,4(r2)
10006a90:	11000215 	stw	r4,8(r2)
10006a94:	89801a04 	addi	r6,r17,104
10006a98:	000b883a 	mov	r5,zero
10006a9c:	00085480 	call	10008548 <memset>
10006aa0:	8005883a 	mov	r2,r16
10006aa4:	dfc00317 	ldw	ra,12(sp)
10006aa8:	dc800217 	ldw	r18,8(sp)
10006aac:	dc400117 	ldw	r17,4(sp)
10006ab0:	dc000017 	ldw	r16,0(sp)
10006ab4:	dec00404 	addi	sp,sp,16
10006ab8:	f800283a 	ret

10006abc <__sfp>:
10006abc:	defffb04 	addi	sp,sp,-20
10006ac0:	dc000015 	stw	r16,0(sp)
10006ac4:	04040074 	movhi	r16,4097
10006ac8:	84113104 	addi	r16,r16,17604
10006acc:	dcc00315 	stw	r19,12(sp)
10006ad0:	2027883a 	mov	r19,r4
10006ad4:	81000017 	ldw	r4,0(r16)
10006ad8:	dfc00415 	stw	ra,16(sp)
10006adc:	dc800215 	stw	r18,8(sp)
10006ae0:	20800e17 	ldw	r2,56(r4)
10006ae4:	dc400115 	stw	r17,4(sp)
10006ae8:	1000021e 	bne	r2,zero,10006af4 <__sfp+0x38>
10006aec:	00068a00 	call	100068a0 <__sinit.part.1>
10006af0:	81000017 	ldw	r4,0(r16)
10006af4:	2480b804 	addi	r18,r4,736
10006af8:	047fffc4 	movi	r17,-1
10006afc:	91000117 	ldw	r4,4(r18)
10006b00:	94000217 	ldw	r16,8(r18)
10006b04:	213fffc4 	addi	r4,r4,-1
10006b08:	20000a16 	blt	r4,zero,10006b34 <__sfp+0x78>
10006b0c:	8080030f 	ldh	r2,12(r16)
10006b10:	10000c26 	beq	r2,zero,10006b44 <__sfp+0x88>
10006b14:	80c01d04 	addi	r3,r16,116
10006b18:	00000206 	br	10006b24 <__sfp+0x68>
10006b1c:	18bfe60f 	ldh	r2,-104(r3)
10006b20:	10000826 	beq	r2,zero,10006b44 <__sfp+0x88>
10006b24:	213fffc4 	addi	r4,r4,-1
10006b28:	1c3ffd04 	addi	r16,r3,-12
10006b2c:	18c01a04 	addi	r3,r3,104
10006b30:	247ffa1e 	bne	r4,r17,10006b1c <__alt_data_end+0xf8006b1c>
10006b34:	90800017 	ldw	r2,0(r18)
10006b38:	10001d26 	beq	r2,zero,10006bb0 <__sfp+0xf4>
10006b3c:	1025883a 	mov	r18,r2
10006b40:	003fee06 	br	10006afc <__alt_data_end+0xf8006afc>
10006b44:	00bfffc4 	movi	r2,-1
10006b48:	8080038d 	sth	r2,14(r16)
10006b4c:	00800044 	movi	r2,1
10006b50:	8080030d 	sth	r2,12(r16)
10006b54:	80001915 	stw	zero,100(r16)
10006b58:	80000015 	stw	zero,0(r16)
10006b5c:	80000215 	stw	zero,8(r16)
10006b60:	80000115 	stw	zero,4(r16)
10006b64:	80000415 	stw	zero,16(r16)
10006b68:	80000515 	stw	zero,20(r16)
10006b6c:	80000615 	stw	zero,24(r16)
10006b70:	01800204 	movi	r6,8
10006b74:	000b883a 	mov	r5,zero
10006b78:	81001704 	addi	r4,r16,92
10006b7c:	00085480 	call	10008548 <memset>
10006b80:	8005883a 	mov	r2,r16
10006b84:	80000c15 	stw	zero,48(r16)
10006b88:	80000d15 	stw	zero,52(r16)
10006b8c:	80001115 	stw	zero,68(r16)
10006b90:	80001215 	stw	zero,72(r16)
10006b94:	dfc00417 	ldw	ra,16(sp)
10006b98:	dcc00317 	ldw	r19,12(sp)
10006b9c:	dc800217 	ldw	r18,8(sp)
10006ba0:	dc400117 	ldw	r17,4(sp)
10006ba4:	dc000017 	ldw	r16,0(sp)
10006ba8:	dec00504 	addi	sp,sp,20
10006bac:	f800283a 	ret
10006bb0:	01400104 	movi	r5,4
10006bb4:	9809883a 	mov	r4,r19
10006bb8:	0006a440 	call	10006a44 <__sfmoreglue>
10006bbc:	90800015 	stw	r2,0(r18)
10006bc0:	103fde1e 	bne	r2,zero,10006b3c <__alt_data_end+0xf8006b3c>
10006bc4:	00800304 	movi	r2,12
10006bc8:	98800015 	stw	r2,0(r19)
10006bcc:	0005883a 	mov	r2,zero
10006bd0:	003ff006 	br	10006b94 <__alt_data_end+0xf8006b94>

10006bd4 <_cleanup>:
10006bd4:	00840074 	movhi	r2,4097
10006bd8:	10913104 	addi	r2,r2,17604
10006bdc:	11000017 	ldw	r4,0(r2)
10006be0:	01440074 	movhi	r5,4097
10006be4:	296dfd04 	addi	r5,r5,-18444
10006be8:	00075fc1 	jmpi	100075fc <_fwalk_reent>

10006bec <__sinit>:
10006bec:	20800e17 	ldw	r2,56(r4)
10006bf0:	10000126 	beq	r2,zero,10006bf8 <__sinit+0xc>
10006bf4:	f800283a 	ret
10006bf8:	00068a01 	jmpi	100068a0 <__sinit.part.1>

10006bfc <__sfp_lock_acquire>:
10006bfc:	f800283a 	ret

10006c00 <__sfp_lock_release>:
10006c00:	f800283a 	ret

10006c04 <__sinit_lock_acquire>:
10006c04:	f800283a 	ret

10006c08 <__sinit_lock_release>:
10006c08:	f800283a 	ret

10006c0c <__fp_lock_all>:
10006c0c:	00840074 	movhi	r2,4097
10006c10:	10913204 	addi	r2,r2,17608
10006c14:	11000017 	ldw	r4,0(r2)
10006c18:	01440034 	movhi	r5,4096
10006c1c:	295a8f04 	addi	r5,r5,27196
10006c20:	00075381 	jmpi	10007538 <_fwalk>

10006c24 <__fp_unlock_all>:
10006c24:	00840074 	movhi	r2,4097
10006c28:	10913204 	addi	r2,r2,17608
10006c2c:	11000017 	ldw	r4,0(r2)
10006c30:	01440034 	movhi	r5,4096
10006c34:	295a2304 	addi	r5,r5,26764
10006c38:	00075381 	jmpi	10007538 <_fwalk>

10006c3c <_malloc_trim_r>:
10006c3c:	defffb04 	addi	sp,sp,-20
10006c40:	dcc00315 	stw	r19,12(sp)
10006c44:	04c40074 	movhi	r19,4097
10006c48:	dc800215 	stw	r18,8(sp)
10006c4c:	dc400115 	stw	r17,4(sp)
10006c50:	dc000015 	stw	r16,0(sp)
10006c54:	dfc00415 	stw	ra,16(sp)
10006c58:	2821883a 	mov	r16,r5
10006c5c:	9ccbad04 	addi	r19,r19,11956
10006c60:	2025883a 	mov	r18,r4
10006c64:	000fcd80 	call	1000fcd8 <__malloc_lock>
10006c68:	98800217 	ldw	r2,8(r19)
10006c6c:	14400117 	ldw	r17,4(r2)
10006c70:	00bfff04 	movi	r2,-4
10006c74:	88a2703a 	and	r17,r17,r2
10006c78:	8c21c83a 	sub	r16,r17,r16
10006c7c:	8403fbc4 	addi	r16,r16,4079
10006c80:	8020d33a 	srli	r16,r16,12
10006c84:	0083ffc4 	movi	r2,4095
10006c88:	843fffc4 	addi	r16,r16,-1
10006c8c:	8020933a 	slli	r16,r16,12
10006c90:	1400060e 	bge	r2,r16,10006cac <_malloc_trim_r+0x70>
10006c94:	000b883a 	mov	r5,zero
10006c98:	9009883a 	mov	r4,r18
10006c9c:	0009d000 	call	10009d00 <_sbrk_r>
10006ca0:	98c00217 	ldw	r3,8(r19)
10006ca4:	1c47883a 	add	r3,r3,r17
10006ca8:	10c00a26 	beq	r2,r3,10006cd4 <_malloc_trim_r+0x98>
10006cac:	9009883a 	mov	r4,r18
10006cb0:	000fcfc0 	call	1000fcfc <__malloc_unlock>
10006cb4:	0005883a 	mov	r2,zero
10006cb8:	dfc00417 	ldw	ra,16(sp)
10006cbc:	dcc00317 	ldw	r19,12(sp)
10006cc0:	dc800217 	ldw	r18,8(sp)
10006cc4:	dc400117 	ldw	r17,4(sp)
10006cc8:	dc000017 	ldw	r16,0(sp)
10006ccc:	dec00504 	addi	sp,sp,20
10006cd0:	f800283a 	ret
10006cd4:	040bc83a 	sub	r5,zero,r16
10006cd8:	9009883a 	mov	r4,r18
10006cdc:	0009d000 	call	10009d00 <_sbrk_r>
10006ce0:	00ffffc4 	movi	r3,-1
10006ce4:	10c00d26 	beq	r2,r3,10006d1c <_malloc_trim_r+0xe0>
10006ce8:	00c40074 	movhi	r3,4097
10006cec:	18d80f04 	addi	r3,r3,24636
10006cf0:	18800017 	ldw	r2,0(r3)
10006cf4:	99000217 	ldw	r4,8(r19)
10006cf8:	8c23c83a 	sub	r17,r17,r16
10006cfc:	8c400054 	ori	r17,r17,1
10006d00:	1421c83a 	sub	r16,r2,r16
10006d04:	24400115 	stw	r17,4(r4)
10006d08:	9009883a 	mov	r4,r18
10006d0c:	1c000015 	stw	r16,0(r3)
10006d10:	000fcfc0 	call	1000fcfc <__malloc_unlock>
10006d14:	00800044 	movi	r2,1
10006d18:	003fe706 	br	10006cb8 <__alt_data_end+0xf8006cb8>
10006d1c:	000b883a 	mov	r5,zero
10006d20:	9009883a 	mov	r4,r18
10006d24:	0009d000 	call	10009d00 <_sbrk_r>
10006d28:	99000217 	ldw	r4,8(r19)
10006d2c:	014003c4 	movi	r5,15
10006d30:	1107c83a 	sub	r3,r2,r4
10006d34:	28ffdd0e 	bge	r5,r3,10006cac <__alt_data_end+0xf8006cac>
10006d38:	01440074 	movhi	r5,4097
10006d3c:	29513404 	addi	r5,r5,17616
10006d40:	29400017 	ldw	r5,0(r5)
10006d44:	18c00054 	ori	r3,r3,1
10006d48:	20c00115 	stw	r3,4(r4)
10006d4c:	00c40074 	movhi	r3,4097
10006d50:	1145c83a 	sub	r2,r2,r5
10006d54:	18d80f04 	addi	r3,r3,24636
10006d58:	18800015 	stw	r2,0(r3)
10006d5c:	003fd306 	br	10006cac <__alt_data_end+0xf8006cac>

10006d60 <_free_r>:
10006d60:	28004126 	beq	r5,zero,10006e68 <_free_r+0x108>
10006d64:	defffd04 	addi	sp,sp,-12
10006d68:	dc400115 	stw	r17,4(sp)
10006d6c:	dc000015 	stw	r16,0(sp)
10006d70:	2023883a 	mov	r17,r4
10006d74:	2821883a 	mov	r16,r5
10006d78:	dfc00215 	stw	ra,8(sp)
10006d7c:	000fcd80 	call	1000fcd8 <__malloc_lock>
10006d80:	81ffff17 	ldw	r7,-4(r16)
10006d84:	00bfff84 	movi	r2,-2
10006d88:	01040074 	movhi	r4,4097
10006d8c:	81bffe04 	addi	r6,r16,-8
10006d90:	3884703a 	and	r2,r7,r2
10006d94:	210bad04 	addi	r4,r4,11956
10006d98:	308b883a 	add	r5,r6,r2
10006d9c:	2a400117 	ldw	r9,4(r5)
10006da0:	22000217 	ldw	r8,8(r4)
10006da4:	00ffff04 	movi	r3,-4
10006da8:	48c6703a 	and	r3,r9,r3
10006dac:	2a005726 	beq	r5,r8,10006f0c <_free_r+0x1ac>
10006db0:	28c00115 	stw	r3,4(r5)
10006db4:	39c0004c 	andi	r7,r7,1
10006db8:	3800091e 	bne	r7,zero,10006de0 <_free_r+0x80>
10006dbc:	823ffe17 	ldw	r8,-8(r16)
10006dc0:	22400204 	addi	r9,r4,8
10006dc4:	320dc83a 	sub	r6,r6,r8
10006dc8:	31c00217 	ldw	r7,8(r6)
10006dcc:	1205883a 	add	r2,r2,r8
10006dd0:	3a406526 	beq	r7,r9,10006f68 <_free_r+0x208>
10006dd4:	32000317 	ldw	r8,12(r6)
10006dd8:	3a000315 	stw	r8,12(r7)
10006ddc:	41c00215 	stw	r7,8(r8)
10006de0:	28cf883a 	add	r7,r5,r3
10006de4:	39c00117 	ldw	r7,4(r7)
10006de8:	39c0004c 	andi	r7,r7,1
10006dec:	38003a26 	beq	r7,zero,10006ed8 <_free_r+0x178>
10006df0:	10c00054 	ori	r3,r2,1
10006df4:	30c00115 	stw	r3,4(r6)
10006df8:	3087883a 	add	r3,r6,r2
10006dfc:	18800015 	stw	r2,0(r3)
10006e00:	00c07fc4 	movi	r3,511
10006e04:	18801936 	bltu	r3,r2,10006e6c <_free_r+0x10c>
10006e08:	1004d0fa 	srli	r2,r2,3
10006e0c:	01c00044 	movi	r7,1
10006e10:	21400117 	ldw	r5,4(r4)
10006e14:	10c00044 	addi	r3,r2,1
10006e18:	18c7883a 	add	r3,r3,r3
10006e1c:	1005d0ba 	srai	r2,r2,2
10006e20:	18c7883a 	add	r3,r3,r3
10006e24:	18c7883a 	add	r3,r3,r3
10006e28:	1907883a 	add	r3,r3,r4
10006e2c:	3884983a 	sll	r2,r7,r2
10006e30:	19c00017 	ldw	r7,0(r3)
10006e34:	1a3ffe04 	addi	r8,r3,-8
10006e38:	1144b03a 	or	r2,r2,r5
10006e3c:	32000315 	stw	r8,12(r6)
10006e40:	31c00215 	stw	r7,8(r6)
10006e44:	20800115 	stw	r2,4(r4)
10006e48:	19800015 	stw	r6,0(r3)
10006e4c:	39800315 	stw	r6,12(r7)
10006e50:	8809883a 	mov	r4,r17
10006e54:	dfc00217 	ldw	ra,8(sp)
10006e58:	dc400117 	ldw	r17,4(sp)
10006e5c:	dc000017 	ldw	r16,0(sp)
10006e60:	dec00304 	addi	sp,sp,12
10006e64:	000fcfc1 	jmpi	1000fcfc <__malloc_unlock>
10006e68:	f800283a 	ret
10006e6c:	100ad27a 	srli	r5,r2,9
10006e70:	00c00104 	movi	r3,4
10006e74:	19404a36 	bltu	r3,r5,10006fa0 <_free_r+0x240>
10006e78:	100ad1ba 	srli	r5,r2,6
10006e7c:	28c00e44 	addi	r3,r5,57
10006e80:	18c7883a 	add	r3,r3,r3
10006e84:	29400e04 	addi	r5,r5,56
10006e88:	18c7883a 	add	r3,r3,r3
10006e8c:	18c7883a 	add	r3,r3,r3
10006e90:	1909883a 	add	r4,r3,r4
10006e94:	20c00017 	ldw	r3,0(r4)
10006e98:	01c40074 	movhi	r7,4097
10006e9c:	213ffe04 	addi	r4,r4,-8
10006ea0:	39cbad04 	addi	r7,r7,11956
10006ea4:	20c04426 	beq	r4,r3,10006fb8 <_free_r+0x258>
10006ea8:	01ffff04 	movi	r7,-4
10006eac:	19400117 	ldw	r5,4(r3)
10006eb0:	29ca703a 	and	r5,r5,r7
10006eb4:	1140022e 	bgeu	r2,r5,10006ec0 <_free_r+0x160>
10006eb8:	18c00217 	ldw	r3,8(r3)
10006ebc:	20fffb1e 	bne	r4,r3,10006eac <__alt_data_end+0xf8006eac>
10006ec0:	19000317 	ldw	r4,12(r3)
10006ec4:	31000315 	stw	r4,12(r6)
10006ec8:	30c00215 	stw	r3,8(r6)
10006ecc:	21800215 	stw	r6,8(r4)
10006ed0:	19800315 	stw	r6,12(r3)
10006ed4:	003fde06 	br	10006e50 <__alt_data_end+0xf8006e50>
10006ed8:	29c00217 	ldw	r7,8(r5)
10006edc:	10c5883a 	add	r2,r2,r3
10006ee0:	00c40074 	movhi	r3,4097
10006ee4:	18cbaf04 	addi	r3,r3,11964
10006ee8:	38c03b26 	beq	r7,r3,10006fd8 <_free_r+0x278>
10006eec:	2a000317 	ldw	r8,12(r5)
10006ef0:	11400054 	ori	r5,r2,1
10006ef4:	3087883a 	add	r3,r6,r2
10006ef8:	3a000315 	stw	r8,12(r7)
10006efc:	41c00215 	stw	r7,8(r8)
10006f00:	31400115 	stw	r5,4(r6)
10006f04:	18800015 	stw	r2,0(r3)
10006f08:	003fbd06 	br	10006e00 <__alt_data_end+0xf8006e00>
10006f0c:	39c0004c 	andi	r7,r7,1
10006f10:	10c5883a 	add	r2,r2,r3
10006f14:	3800071e 	bne	r7,zero,10006f34 <_free_r+0x1d4>
10006f18:	81fffe17 	ldw	r7,-8(r16)
10006f1c:	31cdc83a 	sub	r6,r6,r7
10006f20:	30c00317 	ldw	r3,12(r6)
10006f24:	31400217 	ldw	r5,8(r6)
10006f28:	11c5883a 	add	r2,r2,r7
10006f2c:	28c00315 	stw	r3,12(r5)
10006f30:	19400215 	stw	r5,8(r3)
10006f34:	10c00054 	ori	r3,r2,1
10006f38:	30c00115 	stw	r3,4(r6)
10006f3c:	00c40074 	movhi	r3,4097
10006f40:	18d13504 	addi	r3,r3,17620
10006f44:	18c00017 	ldw	r3,0(r3)
10006f48:	21800215 	stw	r6,8(r4)
10006f4c:	10ffc036 	bltu	r2,r3,10006e50 <__alt_data_end+0xf8006e50>
10006f50:	00840074 	movhi	r2,4097
10006f54:	10980304 	addi	r2,r2,24588
10006f58:	11400017 	ldw	r5,0(r2)
10006f5c:	8809883a 	mov	r4,r17
10006f60:	0006c3c0 	call	10006c3c <_malloc_trim_r>
10006f64:	003fba06 	br	10006e50 <__alt_data_end+0xf8006e50>
10006f68:	28c9883a 	add	r4,r5,r3
10006f6c:	21000117 	ldw	r4,4(r4)
10006f70:	2100004c 	andi	r4,r4,1
10006f74:	2000391e 	bne	r4,zero,1000705c <_free_r+0x2fc>
10006f78:	29c00217 	ldw	r7,8(r5)
10006f7c:	29000317 	ldw	r4,12(r5)
10006f80:	1885883a 	add	r2,r3,r2
10006f84:	10c00054 	ori	r3,r2,1
10006f88:	39000315 	stw	r4,12(r7)
10006f8c:	21c00215 	stw	r7,8(r4)
10006f90:	30c00115 	stw	r3,4(r6)
10006f94:	308d883a 	add	r6,r6,r2
10006f98:	30800015 	stw	r2,0(r6)
10006f9c:	003fac06 	br	10006e50 <__alt_data_end+0xf8006e50>
10006fa0:	00c00504 	movi	r3,20
10006fa4:	19401536 	bltu	r3,r5,10006ffc <_free_r+0x29c>
10006fa8:	28c01704 	addi	r3,r5,92
10006fac:	18c7883a 	add	r3,r3,r3
10006fb0:	294016c4 	addi	r5,r5,91
10006fb4:	003fb406 	br	10006e88 <__alt_data_end+0xf8006e88>
10006fb8:	280bd0ba 	srai	r5,r5,2
10006fbc:	00c00044 	movi	r3,1
10006fc0:	38800117 	ldw	r2,4(r7)
10006fc4:	194a983a 	sll	r5,r3,r5
10006fc8:	2007883a 	mov	r3,r4
10006fcc:	2884b03a 	or	r2,r5,r2
10006fd0:	38800115 	stw	r2,4(r7)
10006fd4:	003fbb06 	br	10006ec4 <__alt_data_end+0xf8006ec4>
10006fd8:	21800515 	stw	r6,20(r4)
10006fdc:	21800415 	stw	r6,16(r4)
10006fe0:	10c00054 	ori	r3,r2,1
10006fe4:	31c00315 	stw	r7,12(r6)
10006fe8:	31c00215 	stw	r7,8(r6)
10006fec:	30c00115 	stw	r3,4(r6)
10006ff0:	308d883a 	add	r6,r6,r2
10006ff4:	30800015 	stw	r2,0(r6)
10006ff8:	003f9506 	br	10006e50 <__alt_data_end+0xf8006e50>
10006ffc:	00c01504 	movi	r3,84
10007000:	19400536 	bltu	r3,r5,10007018 <_free_r+0x2b8>
10007004:	100ad33a 	srli	r5,r2,12
10007008:	28c01bc4 	addi	r3,r5,111
1000700c:	18c7883a 	add	r3,r3,r3
10007010:	29401b84 	addi	r5,r5,110
10007014:	003f9c06 	br	10006e88 <__alt_data_end+0xf8006e88>
10007018:	00c05504 	movi	r3,340
1000701c:	19400536 	bltu	r3,r5,10007034 <_free_r+0x2d4>
10007020:	100ad3fa 	srli	r5,r2,15
10007024:	28c01e04 	addi	r3,r5,120
10007028:	18c7883a 	add	r3,r3,r3
1000702c:	29401dc4 	addi	r5,r5,119
10007030:	003f9506 	br	10006e88 <__alt_data_end+0xf8006e88>
10007034:	00c15504 	movi	r3,1364
10007038:	19400536 	bltu	r3,r5,10007050 <_free_r+0x2f0>
1000703c:	100ad4ba 	srli	r5,r2,18
10007040:	28c01f44 	addi	r3,r5,125
10007044:	18c7883a 	add	r3,r3,r3
10007048:	29401f04 	addi	r5,r5,124
1000704c:	003f8e06 	br	10006e88 <__alt_data_end+0xf8006e88>
10007050:	00c03f84 	movi	r3,254
10007054:	01401f84 	movi	r5,126
10007058:	003f8b06 	br	10006e88 <__alt_data_end+0xf8006e88>
1000705c:	10c00054 	ori	r3,r2,1
10007060:	30c00115 	stw	r3,4(r6)
10007064:	308d883a 	add	r6,r6,r2
10007068:	30800015 	stw	r2,0(r6)
1000706c:	003f7806 	br	10006e50 <__alt_data_end+0xf8006e50>

10007070 <__sfvwrite_r>:
10007070:	30800217 	ldw	r2,8(r6)
10007074:	10006726 	beq	r2,zero,10007214 <__sfvwrite_r+0x1a4>
10007078:	28c0030b 	ldhu	r3,12(r5)
1000707c:	defff404 	addi	sp,sp,-48
10007080:	dd400715 	stw	r21,28(sp)
10007084:	dd000615 	stw	r20,24(sp)
10007088:	dc000215 	stw	r16,8(sp)
1000708c:	dfc00b15 	stw	ra,44(sp)
10007090:	df000a15 	stw	fp,40(sp)
10007094:	ddc00915 	stw	r23,36(sp)
10007098:	dd800815 	stw	r22,32(sp)
1000709c:	dcc00515 	stw	r19,20(sp)
100070a0:	dc800415 	stw	r18,16(sp)
100070a4:	dc400315 	stw	r17,12(sp)
100070a8:	1880020c 	andi	r2,r3,8
100070ac:	2821883a 	mov	r16,r5
100070b0:	202b883a 	mov	r21,r4
100070b4:	3029883a 	mov	r20,r6
100070b8:	10002726 	beq	r2,zero,10007158 <__sfvwrite_r+0xe8>
100070bc:	28800417 	ldw	r2,16(r5)
100070c0:	10002526 	beq	r2,zero,10007158 <__sfvwrite_r+0xe8>
100070c4:	1880008c 	andi	r2,r3,2
100070c8:	a4400017 	ldw	r17,0(r20)
100070cc:	10002a26 	beq	r2,zero,10007178 <__sfvwrite_r+0x108>
100070d0:	05a00034 	movhi	r22,32768
100070d4:	0027883a 	mov	r19,zero
100070d8:	0025883a 	mov	r18,zero
100070dc:	b5bf0004 	addi	r22,r22,-1024
100070e0:	980d883a 	mov	r6,r19
100070e4:	a809883a 	mov	r4,r21
100070e8:	90004626 	beq	r18,zero,10007204 <__sfvwrite_r+0x194>
100070ec:	900f883a 	mov	r7,r18
100070f0:	b480022e 	bgeu	r22,r18,100070fc <__sfvwrite_r+0x8c>
100070f4:	01e00034 	movhi	r7,32768
100070f8:	39ff0004 	addi	r7,r7,-1024
100070fc:	80800917 	ldw	r2,36(r16)
10007100:	81400717 	ldw	r5,28(r16)
10007104:	103ee83a 	callr	r2
10007108:	00805a0e 	bge	zero,r2,10007274 <__sfvwrite_r+0x204>
1000710c:	a0c00217 	ldw	r3,8(r20)
10007110:	98a7883a 	add	r19,r19,r2
10007114:	90a5c83a 	sub	r18,r18,r2
10007118:	1885c83a 	sub	r2,r3,r2
1000711c:	a0800215 	stw	r2,8(r20)
10007120:	103fef1e 	bne	r2,zero,100070e0 <__alt_data_end+0xf80070e0>
10007124:	0005883a 	mov	r2,zero
10007128:	dfc00b17 	ldw	ra,44(sp)
1000712c:	df000a17 	ldw	fp,40(sp)
10007130:	ddc00917 	ldw	r23,36(sp)
10007134:	dd800817 	ldw	r22,32(sp)
10007138:	dd400717 	ldw	r21,28(sp)
1000713c:	dd000617 	ldw	r20,24(sp)
10007140:	dcc00517 	ldw	r19,20(sp)
10007144:	dc800417 	ldw	r18,16(sp)
10007148:	dc400317 	ldw	r17,12(sp)
1000714c:	dc000217 	ldw	r16,8(sp)
10007150:	dec00c04 	addi	sp,sp,48
10007154:	f800283a 	ret
10007158:	800b883a 	mov	r5,r16
1000715c:	a809883a 	mov	r4,r21
10007160:	0004be00 	call	10004be0 <__swsetup_r>
10007164:	1000ee1e 	bne	r2,zero,10007520 <__sfvwrite_r+0x4b0>
10007168:	80c0030b 	ldhu	r3,12(r16)
1000716c:	a4400017 	ldw	r17,0(r20)
10007170:	1880008c 	andi	r2,r3,2
10007174:	103fd61e 	bne	r2,zero,100070d0 <__alt_data_end+0xf80070d0>
10007178:	1880004c 	andi	r2,r3,1
1000717c:	1000421e 	bne	r2,zero,10007288 <__sfvwrite_r+0x218>
10007180:	0039883a 	mov	fp,zero
10007184:	0025883a 	mov	r18,zero
10007188:	90001a26 	beq	r18,zero,100071f4 <__sfvwrite_r+0x184>
1000718c:	1880800c 	andi	r2,r3,512
10007190:	84c00217 	ldw	r19,8(r16)
10007194:	10002126 	beq	r2,zero,1000721c <__sfvwrite_r+0x1ac>
10007198:	982f883a 	mov	r23,r19
1000719c:	94c09636 	bltu	r18,r19,100073f8 <__sfvwrite_r+0x388>
100071a0:	1881200c 	andi	r2,r3,1152
100071a4:	1000a11e 	bne	r2,zero,1000742c <__sfvwrite_r+0x3bc>
100071a8:	81000017 	ldw	r4,0(r16)
100071ac:	b80d883a 	mov	r6,r23
100071b0:	e00b883a 	mov	r5,fp
100071b4:	00083ec0 	call	100083ec <memmove>
100071b8:	80c00217 	ldw	r3,8(r16)
100071bc:	81000017 	ldw	r4,0(r16)
100071c0:	9005883a 	mov	r2,r18
100071c4:	1ce7c83a 	sub	r19,r3,r19
100071c8:	25cf883a 	add	r7,r4,r23
100071cc:	84c00215 	stw	r19,8(r16)
100071d0:	81c00015 	stw	r7,0(r16)
100071d4:	a0c00217 	ldw	r3,8(r20)
100071d8:	e0b9883a 	add	fp,fp,r2
100071dc:	90a5c83a 	sub	r18,r18,r2
100071e0:	18a7c83a 	sub	r19,r3,r2
100071e4:	a4c00215 	stw	r19,8(r20)
100071e8:	983fce26 	beq	r19,zero,10007124 <__alt_data_end+0xf8007124>
100071ec:	80c0030b 	ldhu	r3,12(r16)
100071f0:	903fe61e 	bne	r18,zero,1000718c <__alt_data_end+0xf800718c>
100071f4:	8f000017 	ldw	fp,0(r17)
100071f8:	8c800117 	ldw	r18,4(r17)
100071fc:	8c400204 	addi	r17,r17,8
10007200:	003fe106 	br	10007188 <__alt_data_end+0xf8007188>
10007204:	8cc00017 	ldw	r19,0(r17)
10007208:	8c800117 	ldw	r18,4(r17)
1000720c:	8c400204 	addi	r17,r17,8
10007210:	003fb306 	br	100070e0 <__alt_data_end+0xf80070e0>
10007214:	0005883a 	mov	r2,zero
10007218:	f800283a 	ret
1000721c:	81000017 	ldw	r4,0(r16)
10007220:	80800417 	ldw	r2,16(r16)
10007224:	11005a36 	bltu	r2,r4,10007390 <__sfvwrite_r+0x320>
10007228:	85c00517 	ldw	r23,20(r16)
1000722c:	95c05836 	bltu	r18,r23,10007390 <__sfvwrite_r+0x320>
10007230:	00a00034 	movhi	r2,32768
10007234:	10bfffc4 	addi	r2,r2,-1
10007238:	9009883a 	mov	r4,r18
1000723c:	1480012e 	bgeu	r2,r18,10007244 <__sfvwrite_r+0x1d4>
10007240:	1009883a 	mov	r4,r2
10007244:	b80b883a 	mov	r5,r23
10007248:	00023d40 	call	100023d4 <__divsi3>
1000724c:	b80b883a 	mov	r5,r23
10007250:	1009883a 	mov	r4,r2
10007254:	000cc7c0 	call	1000cc7c <__mulsi3>
10007258:	81400717 	ldw	r5,28(r16)
1000725c:	80c00917 	ldw	r3,36(r16)
10007260:	100f883a 	mov	r7,r2
10007264:	e00d883a 	mov	r6,fp
10007268:	a809883a 	mov	r4,r21
1000726c:	183ee83a 	callr	r3
10007270:	00bfd816 	blt	zero,r2,100071d4 <__alt_data_end+0xf80071d4>
10007274:	8080030b 	ldhu	r2,12(r16)
10007278:	10801014 	ori	r2,r2,64
1000727c:	8080030d 	sth	r2,12(r16)
10007280:	00bfffc4 	movi	r2,-1
10007284:	003fa806 	br	10007128 <__alt_data_end+0xf8007128>
10007288:	0027883a 	mov	r19,zero
1000728c:	0011883a 	mov	r8,zero
10007290:	0039883a 	mov	fp,zero
10007294:	0025883a 	mov	r18,zero
10007298:	90001f26 	beq	r18,zero,10007318 <__sfvwrite_r+0x2a8>
1000729c:	40005a26 	beq	r8,zero,10007408 <__sfvwrite_r+0x398>
100072a0:	982d883a 	mov	r22,r19
100072a4:	94c0012e 	bgeu	r18,r19,100072ac <__sfvwrite_r+0x23c>
100072a8:	902d883a 	mov	r22,r18
100072ac:	81000017 	ldw	r4,0(r16)
100072b0:	80800417 	ldw	r2,16(r16)
100072b4:	b02f883a 	mov	r23,r22
100072b8:	81c00517 	ldw	r7,20(r16)
100072bc:	1100032e 	bgeu	r2,r4,100072cc <__sfvwrite_r+0x25c>
100072c0:	80c00217 	ldw	r3,8(r16)
100072c4:	38c7883a 	add	r3,r7,r3
100072c8:	1d801816 	blt	r3,r22,1000732c <__sfvwrite_r+0x2bc>
100072cc:	b1c03e16 	blt	r22,r7,100073c8 <__sfvwrite_r+0x358>
100072d0:	80800917 	ldw	r2,36(r16)
100072d4:	81400717 	ldw	r5,28(r16)
100072d8:	e00d883a 	mov	r6,fp
100072dc:	da000115 	stw	r8,4(sp)
100072e0:	a809883a 	mov	r4,r21
100072e4:	103ee83a 	callr	r2
100072e8:	102f883a 	mov	r23,r2
100072ec:	da000117 	ldw	r8,4(sp)
100072f0:	00bfe00e 	bge	zero,r2,10007274 <__alt_data_end+0xf8007274>
100072f4:	9de7c83a 	sub	r19,r19,r23
100072f8:	98001f26 	beq	r19,zero,10007378 <__sfvwrite_r+0x308>
100072fc:	a0800217 	ldw	r2,8(r20)
10007300:	e5f9883a 	add	fp,fp,r23
10007304:	95e5c83a 	sub	r18,r18,r23
10007308:	15efc83a 	sub	r23,r2,r23
1000730c:	a5c00215 	stw	r23,8(r20)
10007310:	b83f8426 	beq	r23,zero,10007124 <__alt_data_end+0xf8007124>
10007314:	903fe11e 	bne	r18,zero,1000729c <__alt_data_end+0xf800729c>
10007318:	8f000017 	ldw	fp,0(r17)
1000731c:	8c800117 	ldw	r18,4(r17)
10007320:	0011883a 	mov	r8,zero
10007324:	8c400204 	addi	r17,r17,8
10007328:	003fdb06 	br	10007298 <__alt_data_end+0xf8007298>
1000732c:	180d883a 	mov	r6,r3
10007330:	e00b883a 	mov	r5,fp
10007334:	da000115 	stw	r8,4(sp)
10007338:	d8c00015 	stw	r3,0(sp)
1000733c:	00083ec0 	call	100083ec <memmove>
10007340:	d8c00017 	ldw	r3,0(sp)
10007344:	80800017 	ldw	r2,0(r16)
10007348:	800b883a 	mov	r5,r16
1000734c:	a809883a 	mov	r4,r21
10007350:	10c5883a 	add	r2,r2,r3
10007354:	80800015 	stw	r2,0(r16)
10007358:	d8c00015 	stw	r3,0(sp)
1000735c:	00068000 	call	10006800 <_fflush_r>
10007360:	d8c00017 	ldw	r3,0(sp)
10007364:	da000117 	ldw	r8,4(sp)
10007368:	103fc21e 	bne	r2,zero,10007274 <__alt_data_end+0xf8007274>
1000736c:	182f883a 	mov	r23,r3
10007370:	9de7c83a 	sub	r19,r19,r23
10007374:	983fe11e 	bne	r19,zero,100072fc <__alt_data_end+0xf80072fc>
10007378:	800b883a 	mov	r5,r16
1000737c:	a809883a 	mov	r4,r21
10007380:	00068000 	call	10006800 <_fflush_r>
10007384:	103fbb1e 	bne	r2,zero,10007274 <__alt_data_end+0xf8007274>
10007388:	0011883a 	mov	r8,zero
1000738c:	003fdb06 	br	100072fc <__alt_data_end+0xf80072fc>
10007390:	94c0012e 	bgeu	r18,r19,10007398 <__sfvwrite_r+0x328>
10007394:	9027883a 	mov	r19,r18
10007398:	980d883a 	mov	r6,r19
1000739c:	e00b883a 	mov	r5,fp
100073a0:	00083ec0 	call	100083ec <memmove>
100073a4:	80800217 	ldw	r2,8(r16)
100073a8:	80c00017 	ldw	r3,0(r16)
100073ac:	14c5c83a 	sub	r2,r2,r19
100073b0:	1cc7883a 	add	r3,r3,r19
100073b4:	80800215 	stw	r2,8(r16)
100073b8:	80c00015 	stw	r3,0(r16)
100073bc:	10004326 	beq	r2,zero,100074cc <__sfvwrite_r+0x45c>
100073c0:	9805883a 	mov	r2,r19
100073c4:	003f8306 	br	100071d4 <__alt_data_end+0xf80071d4>
100073c8:	b00d883a 	mov	r6,r22
100073cc:	e00b883a 	mov	r5,fp
100073d0:	da000115 	stw	r8,4(sp)
100073d4:	00083ec0 	call	100083ec <memmove>
100073d8:	80800217 	ldw	r2,8(r16)
100073dc:	80c00017 	ldw	r3,0(r16)
100073e0:	da000117 	ldw	r8,4(sp)
100073e4:	1585c83a 	sub	r2,r2,r22
100073e8:	1dad883a 	add	r22,r3,r22
100073ec:	80800215 	stw	r2,8(r16)
100073f0:	85800015 	stw	r22,0(r16)
100073f4:	003fbf06 	br	100072f4 <__alt_data_end+0xf80072f4>
100073f8:	81000017 	ldw	r4,0(r16)
100073fc:	9027883a 	mov	r19,r18
10007400:	902f883a 	mov	r23,r18
10007404:	003f6906 	br	100071ac <__alt_data_end+0xf80071ac>
10007408:	900d883a 	mov	r6,r18
1000740c:	01400284 	movi	r5,10
10007410:	e009883a 	mov	r4,fp
10007414:	00081c00 	call	100081c0 <memchr>
10007418:	10003e26 	beq	r2,zero,10007514 <__sfvwrite_r+0x4a4>
1000741c:	10800044 	addi	r2,r2,1
10007420:	1727c83a 	sub	r19,r2,fp
10007424:	02000044 	movi	r8,1
10007428:	003f9d06 	br	100072a0 <__alt_data_end+0xf80072a0>
1000742c:	80800517 	ldw	r2,20(r16)
10007430:	81400417 	ldw	r5,16(r16)
10007434:	81c00017 	ldw	r7,0(r16)
10007438:	10a7883a 	add	r19,r2,r2
1000743c:	9885883a 	add	r2,r19,r2
10007440:	1026d7fa 	srli	r19,r2,31
10007444:	396dc83a 	sub	r22,r7,r5
10007448:	b1000044 	addi	r4,r22,1
1000744c:	9885883a 	add	r2,r19,r2
10007450:	1027d07a 	srai	r19,r2,1
10007454:	2485883a 	add	r2,r4,r18
10007458:	980d883a 	mov	r6,r19
1000745c:	9880022e 	bgeu	r19,r2,10007468 <__sfvwrite_r+0x3f8>
10007460:	1027883a 	mov	r19,r2
10007464:	100d883a 	mov	r6,r2
10007468:	18c1000c 	andi	r3,r3,1024
1000746c:	18001c26 	beq	r3,zero,100074e0 <__sfvwrite_r+0x470>
10007470:	300b883a 	mov	r5,r6
10007474:	a809883a 	mov	r4,r21
10007478:	00079b40 	call	100079b4 <_malloc_r>
1000747c:	102f883a 	mov	r23,r2
10007480:	10002926 	beq	r2,zero,10007528 <__sfvwrite_r+0x4b8>
10007484:	81400417 	ldw	r5,16(r16)
10007488:	b00d883a 	mov	r6,r22
1000748c:	1009883a 	mov	r4,r2
10007490:	00082a40 	call	100082a4 <memcpy>
10007494:	8080030b 	ldhu	r2,12(r16)
10007498:	00fedfc4 	movi	r3,-1153
1000749c:	10c4703a 	and	r2,r2,r3
100074a0:	10802014 	ori	r2,r2,128
100074a4:	8080030d 	sth	r2,12(r16)
100074a8:	bd89883a 	add	r4,r23,r22
100074ac:	9d8fc83a 	sub	r7,r19,r22
100074b0:	85c00415 	stw	r23,16(r16)
100074b4:	84c00515 	stw	r19,20(r16)
100074b8:	81000015 	stw	r4,0(r16)
100074bc:	9027883a 	mov	r19,r18
100074c0:	81c00215 	stw	r7,8(r16)
100074c4:	902f883a 	mov	r23,r18
100074c8:	003f3806 	br	100071ac <__alt_data_end+0xf80071ac>
100074cc:	800b883a 	mov	r5,r16
100074d0:	a809883a 	mov	r4,r21
100074d4:	00068000 	call	10006800 <_fflush_r>
100074d8:	103fb926 	beq	r2,zero,100073c0 <__alt_data_end+0xf80073c0>
100074dc:	003f6506 	br	10007274 <__alt_data_end+0xf8007274>
100074e0:	a809883a 	mov	r4,r21
100074e4:	00097280 	call	10009728 <_realloc_r>
100074e8:	102f883a 	mov	r23,r2
100074ec:	103fee1e 	bne	r2,zero,100074a8 <__alt_data_end+0xf80074a8>
100074f0:	81400417 	ldw	r5,16(r16)
100074f4:	a809883a 	mov	r4,r21
100074f8:	0006d600 	call	10006d60 <_free_r>
100074fc:	8080030b 	ldhu	r2,12(r16)
10007500:	00ffdfc4 	movi	r3,-129
10007504:	1884703a 	and	r2,r3,r2
10007508:	00c00304 	movi	r3,12
1000750c:	a8c00015 	stw	r3,0(r21)
10007510:	003f5906 	br	10007278 <__alt_data_end+0xf8007278>
10007514:	94c00044 	addi	r19,r18,1
10007518:	02000044 	movi	r8,1
1000751c:	003f6006 	br	100072a0 <__alt_data_end+0xf80072a0>
10007520:	00bfffc4 	movi	r2,-1
10007524:	003f0006 	br	10007128 <__alt_data_end+0xf8007128>
10007528:	00800304 	movi	r2,12
1000752c:	a8800015 	stw	r2,0(r21)
10007530:	8080030b 	ldhu	r2,12(r16)
10007534:	003f5006 	br	10007278 <__alt_data_end+0xf8007278>

10007538 <_fwalk>:
10007538:	defff704 	addi	sp,sp,-36
1000753c:	dd000415 	stw	r20,16(sp)
10007540:	dfc00815 	stw	ra,32(sp)
10007544:	ddc00715 	stw	r23,28(sp)
10007548:	dd800615 	stw	r22,24(sp)
1000754c:	dd400515 	stw	r21,20(sp)
10007550:	dcc00315 	stw	r19,12(sp)
10007554:	dc800215 	stw	r18,8(sp)
10007558:	dc400115 	stw	r17,4(sp)
1000755c:	dc000015 	stw	r16,0(sp)
10007560:	2500b804 	addi	r20,r4,736
10007564:	a0002326 	beq	r20,zero,100075f4 <_fwalk+0xbc>
10007568:	282b883a 	mov	r21,r5
1000756c:	002f883a 	mov	r23,zero
10007570:	05800044 	movi	r22,1
10007574:	04ffffc4 	movi	r19,-1
10007578:	a4400117 	ldw	r17,4(r20)
1000757c:	a4800217 	ldw	r18,8(r20)
10007580:	8c7fffc4 	addi	r17,r17,-1
10007584:	88000d16 	blt	r17,zero,100075bc <_fwalk+0x84>
10007588:	94000304 	addi	r16,r18,12
1000758c:	94800384 	addi	r18,r18,14
10007590:	8080000b 	ldhu	r2,0(r16)
10007594:	8c7fffc4 	addi	r17,r17,-1
10007598:	813ffd04 	addi	r4,r16,-12
1000759c:	b080042e 	bgeu	r22,r2,100075b0 <_fwalk+0x78>
100075a0:	9080000f 	ldh	r2,0(r18)
100075a4:	14c00226 	beq	r2,r19,100075b0 <_fwalk+0x78>
100075a8:	a83ee83a 	callr	r21
100075ac:	b8aeb03a 	or	r23,r23,r2
100075b0:	84001a04 	addi	r16,r16,104
100075b4:	94801a04 	addi	r18,r18,104
100075b8:	8cfff51e 	bne	r17,r19,10007590 <__alt_data_end+0xf8007590>
100075bc:	a5000017 	ldw	r20,0(r20)
100075c0:	a03fed1e 	bne	r20,zero,10007578 <__alt_data_end+0xf8007578>
100075c4:	b805883a 	mov	r2,r23
100075c8:	dfc00817 	ldw	ra,32(sp)
100075cc:	ddc00717 	ldw	r23,28(sp)
100075d0:	dd800617 	ldw	r22,24(sp)
100075d4:	dd400517 	ldw	r21,20(sp)
100075d8:	dd000417 	ldw	r20,16(sp)
100075dc:	dcc00317 	ldw	r19,12(sp)
100075e0:	dc800217 	ldw	r18,8(sp)
100075e4:	dc400117 	ldw	r17,4(sp)
100075e8:	dc000017 	ldw	r16,0(sp)
100075ec:	dec00904 	addi	sp,sp,36
100075f0:	f800283a 	ret
100075f4:	002f883a 	mov	r23,zero
100075f8:	003ff206 	br	100075c4 <__alt_data_end+0xf80075c4>

100075fc <_fwalk_reent>:
100075fc:	defff704 	addi	sp,sp,-36
10007600:	dd000415 	stw	r20,16(sp)
10007604:	dfc00815 	stw	ra,32(sp)
10007608:	ddc00715 	stw	r23,28(sp)
1000760c:	dd800615 	stw	r22,24(sp)
10007610:	dd400515 	stw	r21,20(sp)
10007614:	dcc00315 	stw	r19,12(sp)
10007618:	dc800215 	stw	r18,8(sp)
1000761c:	dc400115 	stw	r17,4(sp)
10007620:	dc000015 	stw	r16,0(sp)
10007624:	2500b804 	addi	r20,r4,736
10007628:	a0002326 	beq	r20,zero,100076b8 <_fwalk_reent+0xbc>
1000762c:	282b883a 	mov	r21,r5
10007630:	2027883a 	mov	r19,r4
10007634:	002f883a 	mov	r23,zero
10007638:	05800044 	movi	r22,1
1000763c:	04bfffc4 	movi	r18,-1
10007640:	a4400117 	ldw	r17,4(r20)
10007644:	a4000217 	ldw	r16,8(r20)
10007648:	8c7fffc4 	addi	r17,r17,-1
1000764c:	88000c16 	blt	r17,zero,10007680 <_fwalk_reent+0x84>
10007650:	84000304 	addi	r16,r16,12
10007654:	8080000b 	ldhu	r2,0(r16)
10007658:	8c7fffc4 	addi	r17,r17,-1
1000765c:	817ffd04 	addi	r5,r16,-12
10007660:	b080052e 	bgeu	r22,r2,10007678 <_fwalk_reent+0x7c>
10007664:	8080008f 	ldh	r2,2(r16)
10007668:	9809883a 	mov	r4,r19
1000766c:	14800226 	beq	r2,r18,10007678 <_fwalk_reent+0x7c>
10007670:	a83ee83a 	callr	r21
10007674:	b8aeb03a 	or	r23,r23,r2
10007678:	84001a04 	addi	r16,r16,104
1000767c:	8cbff51e 	bne	r17,r18,10007654 <__alt_data_end+0xf8007654>
10007680:	a5000017 	ldw	r20,0(r20)
10007684:	a03fee1e 	bne	r20,zero,10007640 <__alt_data_end+0xf8007640>
10007688:	b805883a 	mov	r2,r23
1000768c:	dfc00817 	ldw	ra,32(sp)
10007690:	ddc00717 	ldw	r23,28(sp)
10007694:	dd800617 	ldw	r22,24(sp)
10007698:	dd400517 	ldw	r21,20(sp)
1000769c:	dd000417 	ldw	r20,16(sp)
100076a0:	dcc00317 	ldw	r19,12(sp)
100076a4:	dc800217 	ldw	r18,8(sp)
100076a8:	dc400117 	ldw	r17,4(sp)
100076ac:	dc000017 	ldw	r16,0(sp)
100076b0:	dec00904 	addi	sp,sp,36
100076b4:	f800283a 	ret
100076b8:	002f883a 	mov	r23,zero
100076bc:	003ff206 	br	10007688 <__alt_data_end+0xf8007688>

100076c0 <_gettimeofday_r>:
100076c0:	defffd04 	addi	sp,sp,-12
100076c4:	2805883a 	mov	r2,r5
100076c8:	dc000015 	stw	r16,0(sp)
100076cc:	04040074 	movhi	r16,4097
100076d0:	dc400115 	stw	r17,4(sp)
100076d4:	8417fd04 	addi	r16,r16,24564
100076d8:	2023883a 	mov	r17,r4
100076dc:	300b883a 	mov	r5,r6
100076e0:	1009883a 	mov	r4,r2
100076e4:	dfc00215 	stw	ra,8(sp)
100076e8:	80000015 	stw	zero,0(r16)
100076ec:	000f77c0 	call	1000f77c <gettimeofday>
100076f0:	00ffffc4 	movi	r3,-1
100076f4:	10c00526 	beq	r2,r3,1000770c <_gettimeofday_r+0x4c>
100076f8:	dfc00217 	ldw	ra,8(sp)
100076fc:	dc400117 	ldw	r17,4(sp)
10007700:	dc000017 	ldw	r16,0(sp)
10007704:	dec00304 	addi	sp,sp,12
10007708:	f800283a 	ret
1000770c:	80c00017 	ldw	r3,0(r16)
10007710:	183ff926 	beq	r3,zero,100076f8 <__alt_data_end+0xf80076f8>
10007714:	88c00015 	stw	r3,0(r17)
10007718:	003ff706 	br	100076f8 <__alt_data_end+0xf80076f8>

1000771c <_setlocale_r>:
1000771c:	30001b26 	beq	r6,zero,1000778c <_setlocale_r+0x70>
10007720:	01440074 	movhi	r5,4097
10007724:	defffe04 	addi	sp,sp,-8
10007728:	2949e504 	addi	r5,r5,10132
1000772c:	3009883a 	mov	r4,r6
10007730:	dc000015 	stw	r16,0(sp)
10007734:	dfc00115 	stw	ra,4(sp)
10007738:	3021883a 	mov	r16,r6
1000773c:	0009e900 	call	10009e90 <strcmp>
10007740:	1000061e 	bne	r2,zero,1000775c <_setlocale_r+0x40>
10007744:	00840074 	movhi	r2,4097
10007748:	1089e404 	addi	r2,r2,10128
1000774c:	dfc00117 	ldw	ra,4(sp)
10007750:	dc000017 	ldw	r16,0(sp)
10007754:	dec00204 	addi	sp,sp,8
10007758:	f800283a 	ret
1000775c:	01440074 	movhi	r5,4097
10007760:	2949e404 	addi	r5,r5,10128
10007764:	8009883a 	mov	r4,r16
10007768:	0009e900 	call	10009e90 <strcmp>
1000776c:	103ff526 	beq	r2,zero,10007744 <__alt_data_end+0xf8007744>
10007770:	01440074 	movhi	r5,4097
10007774:	2949cf04 	addi	r5,r5,10044
10007778:	8009883a 	mov	r4,r16
1000777c:	0009e900 	call	10009e90 <strcmp>
10007780:	103ff026 	beq	r2,zero,10007744 <__alt_data_end+0xf8007744>
10007784:	0005883a 	mov	r2,zero
10007788:	003ff006 	br	1000774c <__alt_data_end+0xf800774c>
1000778c:	00840074 	movhi	r2,4097
10007790:	1089e404 	addi	r2,r2,10128
10007794:	f800283a 	ret

10007798 <__locale_charset>:
10007798:	00840074 	movhi	r2,4097
1000779c:	108b9704 	addi	r2,r2,11868
100077a0:	f800283a 	ret

100077a4 <__locale_mb_cur_max>:
100077a4:	00840074 	movhi	r2,4097
100077a8:	10913304 	addi	r2,r2,17612
100077ac:	10800017 	ldw	r2,0(r2)
100077b0:	f800283a 	ret

100077b4 <__locale_msgcharset>:
100077b4:	00840074 	movhi	r2,4097
100077b8:	108b8f04 	addi	r2,r2,11836
100077bc:	f800283a 	ret

100077c0 <__locale_cjk_lang>:
100077c0:	0005883a 	mov	r2,zero
100077c4:	f800283a 	ret

100077c8 <_localeconv_r>:
100077c8:	00840074 	movhi	r2,4097
100077cc:	108b9f04 	addi	r2,r2,11900
100077d0:	f800283a 	ret

100077d4 <setlocale>:
100077d4:	00840074 	movhi	r2,4097
100077d8:	10913204 	addi	r2,r2,17608
100077dc:	280d883a 	mov	r6,r5
100077e0:	200b883a 	mov	r5,r4
100077e4:	11000017 	ldw	r4,0(r2)
100077e8:	000771c1 	jmpi	1000771c <_setlocale_r>

100077ec <localeconv>:
100077ec:	00840074 	movhi	r2,4097
100077f0:	108b9f04 	addi	r2,r2,11900
100077f4:	f800283a 	ret

100077f8 <__smakebuf_r>:
100077f8:	2880030b 	ldhu	r2,12(r5)
100077fc:	10c0008c 	andi	r3,r2,2
10007800:	1800411e 	bne	r3,zero,10007908 <__smakebuf_r+0x110>
10007804:	deffec04 	addi	sp,sp,-80
10007808:	dc000f15 	stw	r16,60(sp)
1000780c:	2821883a 	mov	r16,r5
10007810:	2940038f 	ldh	r5,14(r5)
10007814:	dc401015 	stw	r17,64(sp)
10007818:	dfc01315 	stw	ra,76(sp)
1000781c:	dcc01215 	stw	r19,72(sp)
10007820:	dc801115 	stw	r18,68(sp)
10007824:	2023883a 	mov	r17,r4
10007828:	28001c16 	blt	r5,zero,1000789c <__smakebuf_r+0xa4>
1000782c:	d80d883a 	mov	r6,sp
10007830:	000bb000 	call	1000bb00 <_fstat_r>
10007834:	10001816 	blt	r2,zero,10007898 <__smakebuf_r+0xa0>
10007838:	d8800117 	ldw	r2,4(sp)
1000783c:	00e00014 	movui	r3,32768
10007840:	10bc000c 	andi	r2,r2,61440
10007844:	14c80020 	cmpeqi	r19,r2,8192
10007848:	10c03726 	beq	r2,r3,10007928 <__smakebuf_r+0x130>
1000784c:	80c0030b 	ldhu	r3,12(r16)
10007850:	18c20014 	ori	r3,r3,2048
10007854:	80c0030d 	sth	r3,12(r16)
10007858:	00c80004 	movi	r3,8192
1000785c:	10c0521e 	bne	r2,r3,100079a8 <__smakebuf_r+0x1b0>
10007860:	8140038f 	ldh	r5,14(r16)
10007864:	8809883a 	mov	r4,r17
10007868:	000bb5c0 	call	1000bb5c <_isatty_r>
1000786c:	10004c26 	beq	r2,zero,100079a0 <__smakebuf_r+0x1a8>
10007870:	8080030b 	ldhu	r2,12(r16)
10007874:	80c010c4 	addi	r3,r16,67
10007878:	80c00015 	stw	r3,0(r16)
1000787c:	10800054 	ori	r2,r2,1
10007880:	8080030d 	sth	r2,12(r16)
10007884:	00800044 	movi	r2,1
10007888:	80c00415 	stw	r3,16(r16)
1000788c:	80800515 	stw	r2,20(r16)
10007890:	04810004 	movi	r18,1024
10007894:	00000706 	br	100078b4 <__smakebuf_r+0xbc>
10007898:	8080030b 	ldhu	r2,12(r16)
1000789c:	10c0200c 	andi	r3,r2,128
100078a0:	18001f1e 	bne	r3,zero,10007920 <__smakebuf_r+0x128>
100078a4:	04810004 	movi	r18,1024
100078a8:	10820014 	ori	r2,r2,2048
100078ac:	8080030d 	sth	r2,12(r16)
100078b0:	0027883a 	mov	r19,zero
100078b4:	900b883a 	mov	r5,r18
100078b8:	8809883a 	mov	r4,r17
100078bc:	00079b40 	call	100079b4 <_malloc_r>
100078c0:	10002c26 	beq	r2,zero,10007974 <__smakebuf_r+0x17c>
100078c4:	80c0030b 	ldhu	r3,12(r16)
100078c8:	01040034 	movhi	r4,4096
100078cc:	211a2504 	addi	r4,r4,26772
100078d0:	89000f15 	stw	r4,60(r17)
100078d4:	18c02014 	ori	r3,r3,128
100078d8:	80c0030d 	sth	r3,12(r16)
100078dc:	80800015 	stw	r2,0(r16)
100078e0:	80800415 	stw	r2,16(r16)
100078e4:	84800515 	stw	r18,20(r16)
100078e8:	98001a1e 	bne	r19,zero,10007954 <__smakebuf_r+0x15c>
100078ec:	dfc01317 	ldw	ra,76(sp)
100078f0:	dcc01217 	ldw	r19,72(sp)
100078f4:	dc801117 	ldw	r18,68(sp)
100078f8:	dc401017 	ldw	r17,64(sp)
100078fc:	dc000f17 	ldw	r16,60(sp)
10007900:	dec01404 	addi	sp,sp,80
10007904:	f800283a 	ret
10007908:	288010c4 	addi	r2,r5,67
1000790c:	28800015 	stw	r2,0(r5)
10007910:	28800415 	stw	r2,16(r5)
10007914:	00800044 	movi	r2,1
10007918:	28800515 	stw	r2,20(r5)
1000791c:	f800283a 	ret
10007920:	04801004 	movi	r18,64
10007924:	003fe006 	br	100078a8 <__alt_data_end+0xf80078a8>
10007928:	81000a17 	ldw	r4,40(r16)
1000792c:	00c40074 	movhi	r3,4097
10007930:	18e78b04 	addi	r3,r3,-25044
10007934:	20ffc51e 	bne	r4,r3,1000784c <__alt_data_end+0xf800784c>
10007938:	8080030b 	ldhu	r2,12(r16)
1000793c:	04810004 	movi	r18,1024
10007940:	84801315 	stw	r18,76(r16)
10007944:	1484b03a 	or	r2,r2,r18
10007948:	8080030d 	sth	r2,12(r16)
1000794c:	0027883a 	mov	r19,zero
10007950:	003fd806 	br	100078b4 <__alt_data_end+0xf80078b4>
10007954:	8140038f 	ldh	r5,14(r16)
10007958:	8809883a 	mov	r4,r17
1000795c:	000bb5c0 	call	1000bb5c <_isatty_r>
10007960:	103fe226 	beq	r2,zero,100078ec <__alt_data_end+0xf80078ec>
10007964:	8080030b 	ldhu	r2,12(r16)
10007968:	10800054 	ori	r2,r2,1
1000796c:	8080030d 	sth	r2,12(r16)
10007970:	003fde06 	br	100078ec <__alt_data_end+0xf80078ec>
10007974:	8080030b 	ldhu	r2,12(r16)
10007978:	10c0800c 	andi	r3,r2,512
1000797c:	183fdb1e 	bne	r3,zero,100078ec <__alt_data_end+0xf80078ec>
10007980:	10800094 	ori	r2,r2,2
10007984:	80c010c4 	addi	r3,r16,67
10007988:	8080030d 	sth	r2,12(r16)
1000798c:	00800044 	movi	r2,1
10007990:	80c00015 	stw	r3,0(r16)
10007994:	80c00415 	stw	r3,16(r16)
10007998:	80800515 	stw	r2,20(r16)
1000799c:	003fd306 	br	100078ec <__alt_data_end+0xf80078ec>
100079a0:	04810004 	movi	r18,1024
100079a4:	003fc306 	br	100078b4 <__alt_data_end+0xf80078b4>
100079a8:	0027883a 	mov	r19,zero
100079ac:	04810004 	movi	r18,1024
100079b0:	003fc006 	br	100078b4 <__alt_data_end+0xf80078b4>

100079b4 <_malloc_r>:
100079b4:	defff504 	addi	sp,sp,-44
100079b8:	dc800315 	stw	r18,12(sp)
100079bc:	dfc00a15 	stw	ra,40(sp)
100079c0:	df000915 	stw	fp,36(sp)
100079c4:	ddc00815 	stw	r23,32(sp)
100079c8:	dd800715 	stw	r22,28(sp)
100079cc:	dd400615 	stw	r21,24(sp)
100079d0:	dd000515 	stw	r20,20(sp)
100079d4:	dcc00415 	stw	r19,16(sp)
100079d8:	dc400215 	stw	r17,8(sp)
100079dc:	dc000115 	stw	r16,4(sp)
100079e0:	288002c4 	addi	r2,r5,11
100079e4:	00c00584 	movi	r3,22
100079e8:	2025883a 	mov	r18,r4
100079ec:	18807f2e 	bgeu	r3,r2,10007bec <_malloc_r+0x238>
100079f0:	047ffe04 	movi	r17,-8
100079f4:	1462703a 	and	r17,r2,r17
100079f8:	8800a316 	blt	r17,zero,10007c88 <_malloc_r+0x2d4>
100079fc:	8940a236 	bltu	r17,r5,10007c88 <_malloc_r+0x2d4>
10007a00:	000fcd80 	call	1000fcd8 <__malloc_lock>
10007a04:	00807dc4 	movi	r2,503
10007a08:	1441e92e 	bgeu	r2,r17,100081b0 <_malloc_r+0x7fc>
10007a0c:	8804d27a 	srli	r2,r17,9
10007a10:	1000a126 	beq	r2,zero,10007c98 <_malloc_r+0x2e4>
10007a14:	00c00104 	movi	r3,4
10007a18:	18811e36 	bltu	r3,r2,10007e94 <_malloc_r+0x4e0>
10007a1c:	8804d1ba 	srli	r2,r17,6
10007a20:	12000e44 	addi	r8,r2,57
10007a24:	11c00e04 	addi	r7,r2,56
10007a28:	4209883a 	add	r4,r8,r8
10007a2c:	04c40074 	movhi	r19,4097
10007a30:	2109883a 	add	r4,r4,r4
10007a34:	9ccbad04 	addi	r19,r19,11956
10007a38:	2109883a 	add	r4,r4,r4
10007a3c:	9909883a 	add	r4,r19,r4
10007a40:	24000117 	ldw	r16,4(r4)
10007a44:	213ffe04 	addi	r4,r4,-8
10007a48:	24009726 	beq	r4,r16,10007ca8 <_malloc_r+0x2f4>
10007a4c:	80800117 	ldw	r2,4(r16)
10007a50:	01bfff04 	movi	r6,-4
10007a54:	014003c4 	movi	r5,15
10007a58:	1184703a 	and	r2,r2,r6
10007a5c:	1447c83a 	sub	r3,r2,r17
10007a60:	28c00716 	blt	r5,r3,10007a80 <_malloc_r+0xcc>
10007a64:	1800920e 	bge	r3,zero,10007cb0 <_malloc_r+0x2fc>
10007a68:	84000317 	ldw	r16,12(r16)
10007a6c:	24008e26 	beq	r4,r16,10007ca8 <_malloc_r+0x2f4>
10007a70:	80800117 	ldw	r2,4(r16)
10007a74:	1184703a 	and	r2,r2,r6
10007a78:	1447c83a 	sub	r3,r2,r17
10007a7c:	28fff90e 	bge	r5,r3,10007a64 <__alt_data_end+0xf8007a64>
10007a80:	3809883a 	mov	r4,r7
10007a84:	01840074 	movhi	r6,4097
10007a88:	9c000417 	ldw	r16,16(r19)
10007a8c:	318bad04 	addi	r6,r6,11956
10007a90:	32000204 	addi	r8,r6,8
10007a94:	82013426 	beq	r16,r8,10007f68 <_malloc_r+0x5b4>
10007a98:	80c00117 	ldw	r3,4(r16)
10007a9c:	00bfff04 	movi	r2,-4
10007aa0:	188e703a 	and	r7,r3,r2
10007aa4:	3c45c83a 	sub	r2,r7,r17
10007aa8:	00c003c4 	movi	r3,15
10007aac:	18811f16 	blt	r3,r2,10007f2c <_malloc_r+0x578>
10007ab0:	32000515 	stw	r8,20(r6)
10007ab4:	32000415 	stw	r8,16(r6)
10007ab8:	10007f0e 	bge	r2,zero,10007cb8 <_malloc_r+0x304>
10007abc:	00807fc4 	movi	r2,511
10007ac0:	11c0fd36 	bltu	r2,r7,10007eb8 <_malloc_r+0x504>
10007ac4:	3806d0fa 	srli	r3,r7,3
10007ac8:	01c00044 	movi	r7,1
10007acc:	30800117 	ldw	r2,4(r6)
10007ad0:	19400044 	addi	r5,r3,1
10007ad4:	294b883a 	add	r5,r5,r5
10007ad8:	1807d0ba 	srai	r3,r3,2
10007adc:	294b883a 	add	r5,r5,r5
10007ae0:	294b883a 	add	r5,r5,r5
10007ae4:	298b883a 	add	r5,r5,r6
10007ae8:	38c6983a 	sll	r3,r7,r3
10007aec:	29c00017 	ldw	r7,0(r5)
10007af0:	2a7ffe04 	addi	r9,r5,-8
10007af4:	1886b03a 	or	r3,r3,r2
10007af8:	82400315 	stw	r9,12(r16)
10007afc:	81c00215 	stw	r7,8(r16)
10007b00:	30c00115 	stw	r3,4(r6)
10007b04:	2c000015 	stw	r16,0(r5)
10007b08:	3c000315 	stw	r16,12(r7)
10007b0c:	2005d0ba 	srai	r2,r4,2
10007b10:	01400044 	movi	r5,1
10007b14:	288a983a 	sll	r5,r5,r2
10007b18:	19406f36 	bltu	r3,r5,10007cd8 <_malloc_r+0x324>
10007b1c:	28c4703a 	and	r2,r5,r3
10007b20:	10000a1e 	bne	r2,zero,10007b4c <_malloc_r+0x198>
10007b24:	00bfff04 	movi	r2,-4
10007b28:	294b883a 	add	r5,r5,r5
10007b2c:	2088703a 	and	r4,r4,r2
10007b30:	28c4703a 	and	r2,r5,r3
10007b34:	21000104 	addi	r4,r4,4
10007b38:	1000041e 	bne	r2,zero,10007b4c <_malloc_r+0x198>
10007b3c:	294b883a 	add	r5,r5,r5
10007b40:	28c4703a 	and	r2,r5,r3
10007b44:	21000104 	addi	r4,r4,4
10007b48:	103ffc26 	beq	r2,zero,10007b3c <__alt_data_end+0xf8007b3c>
10007b4c:	02bfff04 	movi	r10,-4
10007b50:	024003c4 	movi	r9,15
10007b54:	21800044 	addi	r6,r4,1
10007b58:	318d883a 	add	r6,r6,r6
10007b5c:	318d883a 	add	r6,r6,r6
10007b60:	318d883a 	add	r6,r6,r6
10007b64:	998d883a 	add	r6,r19,r6
10007b68:	333ffe04 	addi	r12,r6,-8
10007b6c:	2017883a 	mov	r11,r4
10007b70:	31800104 	addi	r6,r6,4
10007b74:	34000017 	ldw	r16,0(r6)
10007b78:	31fffd04 	addi	r7,r6,-12
10007b7c:	81c0041e 	bne	r16,r7,10007b90 <_malloc_r+0x1dc>
10007b80:	0000fb06 	br	10007f70 <_malloc_r+0x5bc>
10007b84:	1801030e 	bge	r3,zero,10007f94 <_malloc_r+0x5e0>
10007b88:	84000317 	ldw	r16,12(r16)
10007b8c:	81c0f826 	beq	r16,r7,10007f70 <_malloc_r+0x5bc>
10007b90:	80800117 	ldw	r2,4(r16)
10007b94:	1284703a 	and	r2,r2,r10
10007b98:	1447c83a 	sub	r3,r2,r17
10007b9c:	48fff90e 	bge	r9,r3,10007b84 <__alt_data_end+0xf8007b84>
10007ba0:	80800317 	ldw	r2,12(r16)
10007ba4:	81000217 	ldw	r4,8(r16)
10007ba8:	89400054 	ori	r5,r17,1
10007bac:	81400115 	stw	r5,4(r16)
10007bb0:	20800315 	stw	r2,12(r4)
10007bb4:	11000215 	stw	r4,8(r2)
10007bb8:	8463883a 	add	r17,r16,r17
10007bbc:	9c400515 	stw	r17,20(r19)
10007bc0:	9c400415 	stw	r17,16(r19)
10007bc4:	18800054 	ori	r2,r3,1
10007bc8:	88800115 	stw	r2,4(r17)
10007bcc:	8a000315 	stw	r8,12(r17)
10007bd0:	8a000215 	stw	r8,8(r17)
10007bd4:	88e3883a 	add	r17,r17,r3
10007bd8:	88c00015 	stw	r3,0(r17)
10007bdc:	9009883a 	mov	r4,r18
10007be0:	000fcfc0 	call	1000fcfc <__malloc_unlock>
10007be4:	80800204 	addi	r2,r16,8
10007be8:	00001b06 	br	10007c58 <_malloc_r+0x2a4>
10007bec:	04400404 	movi	r17,16
10007bf0:	89402536 	bltu	r17,r5,10007c88 <_malloc_r+0x2d4>
10007bf4:	000fcd80 	call	1000fcd8 <__malloc_lock>
10007bf8:	00800184 	movi	r2,6
10007bfc:	01000084 	movi	r4,2
10007c00:	04c40074 	movhi	r19,4097
10007c04:	1085883a 	add	r2,r2,r2
10007c08:	9ccbad04 	addi	r19,r19,11956
10007c0c:	1085883a 	add	r2,r2,r2
10007c10:	9885883a 	add	r2,r19,r2
10007c14:	14000117 	ldw	r16,4(r2)
10007c18:	10fffe04 	addi	r3,r2,-8
10007c1c:	80c0d926 	beq	r16,r3,10007f84 <_malloc_r+0x5d0>
10007c20:	80c00117 	ldw	r3,4(r16)
10007c24:	81000317 	ldw	r4,12(r16)
10007c28:	00bfff04 	movi	r2,-4
10007c2c:	1884703a 	and	r2,r3,r2
10007c30:	81400217 	ldw	r5,8(r16)
10007c34:	8085883a 	add	r2,r16,r2
10007c38:	10c00117 	ldw	r3,4(r2)
10007c3c:	29000315 	stw	r4,12(r5)
10007c40:	21400215 	stw	r5,8(r4)
10007c44:	18c00054 	ori	r3,r3,1
10007c48:	10c00115 	stw	r3,4(r2)
10007c4c:	9009883a 	mov	r4,r18
10007c50:	000fcfc0 	call	1000fcfc <__malloc_unlock>
10007c54:	80800204 	addi	r2,r16,8
10007c58:	dfc00a17 	ldw	ra,40(sp)
10007c5c:	df000917 	ldw	fp,36(sp)
10007c60:	ddc00817 	ldw	r23,32(sp)
10007c64:	dd800717 	ldw	r22,28(sp)
10007c68:	dd400617 	ldw	r21,24(sp)
10007c6c:	dd000517 	ldw	r20,20(sp)
10007c70:	dcc00417 	ldw	r19,16(sp)
10007c74:	dc800317 	ldw	r18,12(sp)
10007c78:	dc400217 	ldw	r17,8(sp)
10007c7c:	dc000117 	ldw	r16,4(sp)
10007c80:	dec00b04 	addi	sp,sp,44
10007c84:	f800283a 	ret
10007c88:	00800304 	movi	r2,12
10007c8c:	90800015 	stw	r2,0(r18)
10007c90:	0005883a 	mov	r2,zero
10007c94:	003ff006 	br	10007c58 <__alt_data_end+0xf8007c58>
10007c98:	01002004 	movi	r4,128
10007c9c:	02001004 	movi	r8,64
10007ca0:	01c00fc4 	movi	r7,63
10007ca4:	003f6106 	br	10007a2c <__alt_data_end+0xf8007a2c>
10007ca8:	4009883a 	mov	r4,r8
10007cac:	003f7506 	br	10007a84 <__alt_data_end+0xf8007a84>
10007cb0:	81000317 	ldw	r4,12(r16)
10007cb4:	003fde06 	br	10007c30 <__alt_data_end+0xf8007c30>
10007cb8:	81c5883a 	add	r2,r16,r7
10007cbc:	11400117 	ldw	r5,4(r2)
10007cc0:	9009883a 	mov	r4,r18
10007cc4:	29400054 	ori	r5,r5,1
10007cc8:	11400115 	stw	r5,4(r2)
10007ccc:	000fcfc0 	call	1000fcfc <__malloc_unlock>
10007cd0:	80800204 	addi	r2,r16,8
10007cd4:	003fe006 	br	10007c58 <__alt_data_end+0xf8007c58>
10007cd8:	9c000217 	ldw	r16,8(r19)
10007cdc:	00bfff04 	movi	r2,-4
10007ce0:	85800117 	ldw	r22,4(r16)
10007ce4:	b0ac703a 	and	r22,r22,r2
10007ce8:	b4400336 	bltu	r22,r17,10007cf8 <_malloc_r+0x344>
10007cec:	b445c83a 	sub	r2,r22,r17
10007cf0:	00c003c4 	movi	r3,15
10007cf4:	18805d16 	blt	r3,r2,10007e6c <_malloc_r+0x4b8>
10007cf8:	05c40074 	movhi	r23,4097
10007cfc:	00840074 	movhi	r2,4097
10007d00:	10980304 	addi	r2,r2,24588
10007d04:	bdd13404 	addi	r23,r23,17616
10007d08:	15400017 	ldw	r21,0(r2)
10007d0c:	b8c00017 	ldw	r3,0(r23)
10007d10:	00bfffc4 	movi	r2,-1
10007d14:	858d883a 	add	r6,r16,r22
10007d18:	8d6b883a 	add	r21,r17,r21
10007d1c:	1880ea26 	beq	r3,r2,100080c8 <_malloc_r+0x714>
10007d20:	ad4403c4 	addi	r21,r21,4111
10007d24:	00bc0004 	movi	r2,-4096
10007d28:	a8aa703a 	and	r21,r21,r2
10007d2c:	a80b883a 	mov	r5,r21
10007d30:	9009883a 	mov	r4,r18
10007d34:	d9800015 	stw	r6,0(sp)
10007d38:	0009d000 	call	10009d00 <_sbrk_r>
10007d3c:	1029883a 	mov	r20,r2
10007d40:	00bfffc4 	movi	r2,-1
10007d44:	d9800017 	ldw	r6,0(sp)
10007d48:	a080e826 	beq	r20,r2,100080ec <_malloc_r+0x738>
10007d4c:	a180a636 	bltu	r20,r6,10007fe8 <_malloc_r+0x634>
10007d50:	07040074 	movhi	fp,4097
10007d54:	e7180f04 	addi	fp,fp,24636
10007d58:	e0800017 	ldw	r2,0(fp)
10007d5c:	a887883a 	add	r3,r21,r2
10007d60:	e0c00015 	stw	r3,0(fp)
10007d64:	3500e626 	beq	r6,r20,10008100 <_malloc_r+0x74c>
10007d68:	b9000017 	ldw	r4,0(r23)
10007d6c:	00bfffc4 	movi	r2,-1
10007d70:	2080ee26 	beq	r4,r2,1000812c <_malloc_r+0x778>
10007d74:	a185c83a 	sub	r2,r20,r6
10007d78:	10c5883a 	add	r2,r2,r3
10007d7c:	e0800015 	stw	r2,0(fp)
10007d80:	a0c001cc 	andi	r3,r20,7
10007d84:	1800bc26 	beq	r3,zero,10008078 <_malloc_r+0x6c4>
10007d88:	a0e9c83a 	sub	r20,r20,r3
10007d8c:	00840204 	movi	r2,4104
10007d90:	a5000204 	addi	r20,r20,8
10007d94:	10c7c83a 	sub	r3,r2,r3
10007d98:	a545883a 	add	r2,r20,r21
10007d9c:	1083ffcc 	andi	r2,r2,4095
10007da0:	18abc83a 	sub	r21,r3,r2
10007da4:	a80b883a 	mov	r5,r21
10007da8:	9009883a 	mov	r4,r18
10007dac:	0009d000 	call	10009d00 <_sbrk_r>
10007db0:	00ffffc4 	movi	r3,-1
10007db4:	10c0e126 	beq	r2,r3,1000813c <_malloc_r+0x788>
10007db8:	1505c83a 	sub	r2,r2,r20
10007dbc:	1545883a 	add	r2,r2,r21
10007dc0:	10800054 	ori	r2,r2,1
10007dc4:	e0c00017 	ldw	r3,0(fp)
10007dc8:	9d000215 	stw	r20,8(r19)
10007dcc:	a0800115 	stw	r2,4(r20)
10007dd0:	a8c7883a 	add	r3,r21,r3
10007dd4:	e0c00015 	stw	r3,0(fp)
10007dd8:	84c00e26 	beq	r16,r19,10007e14 <_malloc_r+0x460>
10007ddc:	018003c4 	movi	r6,15
10007de0:	3580a72e 	bgeu	r6,r22,10008080 <_malloc_r+0x6cc>
10007de4:	81400117 	ldw	r5,4(r16)
10007de8:	013ffe04 	movi	r4,-8
10007dec:	b0bffd04 	addi	r2,r22,-12
10007df0:	1104703a 	and	r2,r2,r4
10007df4:	2900004c 	andi	r4,r5,1
10007df8:	2088b03a 	or	r4,r4,r2
10007dfc:	81000115 	stw	r4,4(r16)
10007e00:	01400144 	movi	r5,5
10007e04:	8089883a 	add	r4,r16,r2
10007e08:	21400115 	stw	r5,4(r4)
10007e0c:	21400215 	stw	r5,8(r4)
10007e10:	3080cd36 	bltu	r6,r2,10008148 <_malloc_r+0x794>
10007e14:	00840074 	movhi	r2,4097
10007e18:	10980204 	addi	r2,r2,24584
10007e1c:	11000017 	ldw	r4,0(r2)
10007e20:	20c0012e 	bgeu	r4,r3,10007e28 <_malloc_r+0x474>
10007e24:	10c00015 	stw	r3,0(r2)
10007e28:	00840074 	movhi	r2,4097
10007e2c:	10980104 	addi	r2,r2,24580
10007e30:	11000017 	ldw	r4,0(r2)
10007e34:	9c000217 	ldw	r16,8(r19)
10007e38:	20c0012e 	bgeu	r4,r3,10007e40 <_malloc_r+0x48c>
10007e3c:	10c00015 	stw	r3,0(r2)
10007e40:	80c00117 	ldw	r3,4(r16)
10007e44:	00bfff04 	movi	r2,-4
10007e48:	1886703a 	and	r3,r3,r2
10007e4c:	1c45c83a 	sub	r2,r3,r17
10007e50:	1c400236 	bltu	r3,r17,10007e5c <_malloc_r+0x4a8>
10007e54:	00c003c4 	movi	r3,15
10007e58:	18800416 	blt	r3,r2,10007e6c <_malloc_r+0x4b8>
10007e5c:	9009883a 	mov	r4,r18
10007e60:	000fcfc0 	call	1000fcfc <__malloc_unlock>
10007e64:	0005883a 	mov	r2,zero
10007e68:	003f7b06 	br	10007c58 <__alt_data_end+0xf8007c58>
10007e6c:	88c00054 	ori	r3,r17,1
10007e70:	80c00115 	stw	r3,4(r16)
10007e74:	8463883a 	add	r17,r16,r17
10007e78:	10800054 	ori	r2,r2,1
10007e7c:	9c400215 	stw	r17,8(r19)
10007e80:	88800115 	stw	r2,4(r17)
10007e84:	9009883a 	mov	r4,r18
10007e88:	000fcfc0 	call	1000fcfc <__malloc_unlock>
10007e8c:	80800204 	addi	r2,r16,8
10007e90:	003f7106 	br	10007c58 <__alt_data_end+0xf8007c58>
10007e94:	00c00504 	movi	r3,20
10007e98:	18804a2e 	bgeu	r3,r2,10007fc4 <_malloc_r+0x610>
10007e9c:	00c01504 	movi	r3,84
10007ea0:	18806e36 	bltu	r3,r2,1000805c <_malloc_r+0x6a8>
10007ea4:	8804d33a 	srli	r2,r17,12
10007ea8:	12001bc4 	addi	r8,r2,111
10007eac:	11c01b84 	addi	r7,r2,110
10007eb0:	4209883a 	add	r4,r8,r8
10007eb4:	003edd06 	br	10007a2c <__alt_data_end+0xf8007a2c>
10007eb8:	3804d27a 	srli	r2,r7,9
10007ebc:	00c00104 	movi	r3,4
10007ec0:	1880442e 	bgeu	r3,r2,10007fd4 <_malloc_r+0x620>
10007ec4:	00c00504 	movi	r3,20
10007ec8:	18808136 	bltu	r3,r2,100080d0 <_malloc_r+0x71c>
10007ecc:	11401704 	addi	r5,r2,92
10007ed0:	10c016c4 	addi	r3,r2,91
10007ed4:	294b883a 	add	r5,r5,r5
10007ed8:	294b883a 	add	r5,r5,r5
10007edc:	294b883a 	add	r5,r5,r5
10007ee0:	994b883a 	add	r5,r19,r5
10007ee4:	28800017 	ldw	r2,0(r5)
10007ee8:	01840074 	movhi	r6,4097
10007eec:	297ffe04 	addi	r5,r5,-8
10007ef0:	318bad04 	addi	r6,r6,11956
10007ef4:	28806526 	beq	r5,r2,1000808c <_malloc_r+0x6d8>
10007ef8:	01bfff04 	movi	r6,-4
10007efc:	10c00117 	ldw	r3,4(r2)
10007f00:	1986703a 	and	r3,r3,r6
10007f04:	38c0022e 	bgeu	r7,r3,10007f10 <_malloc_r+0x55c>
10007f08:	10800217 	ldw	r2,8(r2)
10007f0c:	28bffb1e 	bne	r5,r2,10007efc <__alt_data_end+0xf8007efc>
10007f10:	11400317 	ldw	r5,12(r2)
10007f14:	98c00117 	ldw	r3,4(r19)
10007f18:	81400315 	stw	r5,12(r16)
10007f1c:	80800215 	stw	r2,8(r16)
10007f20:	2c000215 	stw	r16,8(r5)
10007f24:	14000315 	stw	r16,12(r2)
10007f28:	003ef806 	br	10007b0c <__alt_data_end+0xf8007b0c>
10007f2c:	88c00054 	ori	r3,r17,1
10007f30:	80c00115 	stw	r3,4(r16)
10007f34:	8463883a 	add	r17,r16,r17
10007f38:	34400515 	stw	r17,20(r6)
10007f3c:	34400415 	stw	r17,16(r6)
10007f40:	10c00054 	ori	r3,r2,1
10007f44:	8a000315 	stw	r8,12(r17)
10007f48:	8a000215 	stw	r8,8(r17)
10007f4c:	88c00115 	stw	r3,4(r17)
10007f50:	88a3883a 	add	r17,r17,r2
10007f54:	88800015 	stw	r2,0(r17)
10007f58:	9009883a 	mov	r4,r18
10007f5c:	000fcfc0 	call	1000fcfc <__malloc_unlock>
10007f60:	80800204 	addi	r2,r16,8
10007f64:	003f3c06 	br	10007c58 <__alt_data_end+0xf8007c58>
10007f68:	30c00117 	ldw	r3,4(r6)
10007f6c:	003ee706 	br	10007b0c <__alt_data_end+0xf8007b0c>
10007f70:	5ac00044 	addi	r11,r11,1
10007f74:	588000cc 	andi	r2,r11,3
10007f78:	31800204 	addi	r6,r6,8
10007f7c:	103efd1e 	bne	r2,zero,10007b74 <__alt_data_end+0xf8007b74>
10007f80:	00002406 	br	10008014 <_malloc_r+0x660>
10007f84:	14000317 	ldw	r16,12(r2)
10007f88:	143f251e 	bne	r2,r16,10007c20 <__alt_data_end+0xf8007c20>
10007f8c:	21000084 	addi	r4,r4,2
10007f90:	003ebc06 	br	10007a84 <__alt_data_end+0xf8007a84>
10007f94:	8085883a 	add	r2,r16,r2
10007f98:	10c00117 	ldw	r3,4(r2)
10007f9c:	81000317 	ldw	r4,12(r16)
10007fa0:	81400217 	ldw	r5,8(r16)
10007fa4:	18c00054 	ori	r3,r3,1
10007fa8:	10c00115 	stw	r3,4(r2)
10007fac:	29000315 	stw	r4,12(r5)
10007fb0:	21400215 	stw	r5,8(r4)
10007fb4:	9009883a 	mov	r4,r18
10007fb8:	000fcfc0 	call	1000fcfc <__malloc_unlock>
10007fbc:	80800204 	addi	r2,r16,8
10007fc0:	003f2506 	br	10007c58 <__alt_data_end+0xf8007c58>
10007fc4:	12001704 	addi	r8,r2,92
10007fc8:	11c016c4 	addi	r7,r2,91
10007fcc:	4209883a 	add	r4,r8,r8
10007fd0:	003e9606 	br	10007a2c <__alt_data_end+0xf8007a2c>
10007fd4:	3804d1ba 	srli	r2,r7,6
10007fd8:	11400e44 	addi	r5,r2,57
10007fdc:	10c00e04 	addi	r3,r2,56
10007fe0:	294b883a 	add	r5,r5,r5
10007fe4:	003fbc06 	br	10007ed8 <__alt_data_end+0xf8007ed8>
10007fe8:	84ff5926 	beq	r16,r19,10007d50 <__alt_data_end+0xf8007d50>
10007fec:	00840074 	movhi	r2,4097
10007ff0:	108bad04 	addi	r2,r2,11956
10007ff4:	14000217 	ldw	r16,8(r2)
10007ff8:	00bfff04 	movi	r2,-4
10007ffc:	80c00117 	ldw	r3,4(r16)
10008000:	1886703a 	and	r3,r3,r2
10008004:	003f9106 	br	10007e4c <__alt_data_end+0xf8007e4c>
10008008:	60800217 	ldw	r2,8(r12)
1000800c:	213fffc4 	addi	r4,r4,-1
10008010:	1300651e 	bne	r2,r12,100081a8 <_malloc_r+0x7f4>
10008014:	208000cc 	andi	r2,r4,3
10008018:	633ffe04 	addi	r12,r12,-8
1000801c:	103ffa1e 	bne	r2,zero,10008008 <__alt_data_end+0xf8008008>
10008020:	98800117 	ldw	r2,4(r19)
10008024:	0146303a 	nor	r3,zero,r5
10008028:	1884703a 	and	r2,r3,r2
1000802c:	98800115 	stw	r2,4(r19)
10008030:	294b883a 	add	r5,r5,r5
10008034:	117f2836 	bltu	r2,r5,10007cd8 <__alt_data_end+0xf8007cd8>
10008038:	283f2726 	beq	r5,zero,10007cd8 <__alt_data_end+0xf8007cd8>
1000803c:	2886703a 	and	r3,r5,r2
10008040:	5809883a 	mov	r4,r11
10008044:	183ec31e 	bne	r3,zero,10007b54 <__alt_data_end+0xf8007b54>
10008048:	294b883a 	add	r5,r5,r5
1000804c:	2886703a 	and	r3,r5,r2
10008050:	21000104 	addi	r4,r4,4
10008054:	183ffc26 	beq	r3,zero,10008048 <__alt_data_end+0xf8008048>
10008058:	003ebe06 	br	10007b54 <__alt_data_end+0xf8007b54>
1000805c:	00c05504 	movi	r3,340
10008060:	18801236 	bltu	r3,r2,100080ac <_malloc_r+0x6f8>
10008064:	8804d3fa 	srli	r2,r17,15
10008068:	12001e04 	addi	r8,r2,120
1000806c:	11c01dc4 	addi	r7,r2,119
10008070:	4209883a 	add	r4,r8,r8
10008074:	003e6d06 	br	10007a2c <__alt_data_end+0xf8007a2c>
10008078:	00c40004 	movi	r3,4096
1000807c:	003f4606 	br	10007d98 <__alt_data_end+0xf8007d98>
10008080:	00800044 	movi	r2,1
10008084:	a0800115 	stw	r2,4(r20)
10008088:	003f7406 	br	10007e5c <__alt_data_end+0xf8007e5c>
1000808c:	1805d0ba 	srai	r2,r3,2
10008090:	01c00044 	movi	r7,1
10008094:	30c00117 	ldw	r3,4(r6)
10008098:	388e983a 	sll	r7,r7,r2
1000809c:	2805883a 	mov	r2,r5
100080a0:	38c6b03a 	or	r3,r7,r3
100080a4:	30c00115 	stw	r3,4(r6)
100080a8:	003f9b06 	br	10007f18 <__alt_data_end+0xf8007f18>
100080ac:	00c15504 	movi	r3,1364
100080b0:	18801a36 	bltu	r3,r2,1000811c <_malloc_r+0x768>
100080b4:	8804d4ba 	srli	r2,r17,18
100080b8:	12001f44 	addi	r8,r2,125
100080bc:	11c01f04 	addi	r7,r2,124
100080c0:	4209883a 	add	r4,r8,r8
100080c4:	003e5906 	br	10007a2c <__alt_data_end+0xf8007a2c>
100080c8:	ad400404 	addi	r21,r21,16
100080cc:	003f1706 	br	10007d2c <__alt_data_end+0xf8007d2c>
100080d0:	00c01504 	movi	r3,84
100080d4:	18802336 	bltu	r3,r2,10008164 <_malloc_r+0x7b0>
100080d8:	3804d33a 	srli	r2,r7,12
100080dc:	11401bc4 	addi	r5,r2,111
100080e0:	10c01b84 	addi	r3,r2,110
100080e4:	294b883a 	add	r5,r5,r5
100080e8:	003f7b06 	br	10007ed8 <__alt_data_end+0xf8007ed8>
100080ec:	9c000217 	ldw	r16,8(r19)
100080f0:	00bfff04 	movi	r2,-4
100080f4:	80c00117 	ldw	r3,4(r16)
100080f8:	1886703a 	and	r3,r3,r2
100080fc:	003f5306 	br	10007e4c <__alt_data_end+0xf8007e4c>
10008100:	3083ffcc 	andi	r2,r6,4095
10008104:	103f181e 	bne	r2,zero,10007d68 <__alt_data_end+0xf8007d68>
10008108:	99000217 	ldw	r4,8(r19)
1000810c:	b545883a 	add	r2,r22,r21
10008110:	10800054 	ori	r2,r2,1
10008114:	20800115 	stw	r2,4(r4)
10008118:	003f3e06 	br	10007e14 <__alt_data_end+0xf8007e14>
1000811c:	01003f84 	movi	r4,254
10008120:	02001fc4 	movi	r8,127
10008124:	01c01f84 	movi	r7,126
10008128:	003e4006 	br	10007a2c <__alt_data_end+0xf8007a2c>
1000812c:	00840074 	movhi	r2,4097
10008130:	10913404 	addi	r2,r2,17616
10008134:	15000015 	stw	r20,0(r2)
10008138:	003f1106 	br	10007d80 <__alt_data_end+0xf8007d80>
1000813c:	00800044 	movi	r2,1
10008140:	002b883a 	mov	r21,zero
10008144:	003f1f06 	br	10007dc4 <__alt_data_end+0xf8007dc4>
10008148:	81400204 	addi	r5,r16,8
1000814c:	9009883a 	mov	r4,r18
10008150:	0006d600 	call	10006d60 <_free_r>
10008154:	00840074 	movhi	r2,4097
10008158:	10980f04 	addi	r2,r2,24636
1000815c:	10c00017 	ldw	r3,0(r2)
10008160:	003f2c06 	br	10007e14 <__alt_data_end+0xf8007e14>
10008164:	00c05504 	movi	r3,340
10008168:	18800536 	bltu	r3,r2,10008180 <_malloc_r+0x7cc>
1000816c:	3804d3fa 	srli	r2,r7,15
10008170:	11401e04 	addi	r5,r2,120
10008174:	10c01dc4 	addi	r3,r2,119
10008178:	294b883a 	add	r5,r5,r5
1000817c:	003f5606 	br	10007ed8 <__alt_data_end+0xf8007ed8>
10008180:	00c15504 	movi	r3,1364
10008184:	18800536 	bltu	r3,r2,1000819c <_malloc_r+0x7e8>
10008188:	3804d4ba 	srli	r2,r7,18
1000818c:	11401f44 	addi	r5,r2,125
10008190:	10c01f04 	addi	r3,r2,124
10008194:	294b883a 	add	r5,r5,r5
10008198:	003f4f06 	br	10007ed8 <__alt_data_end+0xf8007ed8>
1000819c:	01403f84 	movi	r5,254
100081a0:	00c01f84 	movi	r3,126
100081a4:	003f4c06 	br	10007ed8 <__alt_data_end+0xf8007ed8>
100081a8:	98800117 	ldw	r2,4(r19)
100081ac:	003fa006 	br	10008030 <__alt_data_end+0xf8008030>
100081b0:	8808d0fa 	srli	r4,r17,3
100081b4:	20800044 	addi	r2,r4,1
100081b8:	1085883a 	add	r2,r2,r2
100081bc:	003e9006 	br	10007c00 <__alt_data_end+0xf8007c00>

100081c0 <memchr>:
100081c0:	208000cc 	andi	r2,r4,3
100081c4:	280f883a 	mov	r7,r5
100081c8:	10003426 	beq	r2,zero,1000829c <memchr+0xdc>
100081cc:	30bfffc4 	addi	r2,r6,-1
100081d0:	30001a26 	beq	r6,zero,1000823c <memchr+0x7c>
100081d4:	20c00003 	ldbu	r3,0(r4)
100081d8:	29803fcc 	andi	r6,r5,255
100081dc:	30c0051e 	bne	r6,r3,100081f4 <memchr+0x34>
100081e0:	00001806 	br	10008244 <memchr+0x84>
100081e4:	10001526 	beq	r2,zero,1000823c <memchr+0x7c>
100081e8:	20c00003 	ldbu	r3,0(r4)
100081ec:	10bfffc4 	addi	r2,r2,-1
100081f0:	30c01426 	beq	r6,r3,10008244 <memchr+0x84>
100081f4:	21000044 	addi	r4,r4,1
100081f8:	20c000cc 	andi	r3,r4,3
100081fc:	183ff91e 	bne	r3,zero,100081e4 <__alt_data_end+0xf80081e4>
10008200:	020000c4 	movi	r8,3
10008204:	40801136 	bltu	r8,r2,1000824c <memchr+0x8c>
10008208:	10000c26 	beq	r2,zero,1000823c <memchr+0x7c>
1000820c:	20c00003 	ldbu	r3,0(r4)
10008210:	29403fcc 	andi	r5,r5,255
10008214:	28c00b26 	beq	r5,r3,10008244 <memchr+0x84>
10008218:	20c00044 	addi	r3,r4,1
1000821c:	39803fcc 	andi	r6,r7,255
10008220:	2089883a 	add	r4,r4,r2
10008224:	00000306 	br	10008234 <memchr+0x74>
10008228:	18c00044 	addi	r3,r3,1
1000822c:	197fffc3 	ldbu	r5,-1(r3)
10008230:	31400526 	beq	r6,r5,10008248 <memchr+0x88>
10008234:	1805883a 	mov	r2,r3
10008238:	20fffb1e 	bne	r4,r3,10008228 <__alt_data_end+0xf8008228>
1000823c:	0005883a 	mov	r2,zero
10008240:	f800283a 	ret
10008244:	2005883a 	mov	r2,r4
10008248:	f800283a 	ret
1000824c:	28c03fcc 	andi	r3,r5,255
10008250:	1812923a 	slli	r9,r3,8
10008254:	02ffbff4 	movhi	r11,65279
10008258:	02a02074 	movhi	r10,32897
1000825c:	48d2b03a 	or	r9,r9,r3
10008260:	4806943a 	slli	r3,r9,16
10008264:	5affbfc4 	addi	r11,r11,-257
10008268:	52a02004 	addi	r10,r10,-32640
1000826c:	48d2b03a 	or	r9,r9,r3
10008270:	20c00017 	ldw	r3,0(r4)
10008274:	48c6f03a 	xor	r3,r9,r3
10008278:	1acd883a 	add	r6,r3,r11
1000827c:	00c6303a 	nor	r3,zero,r3
10008280:	30c6703a 	and	r3,r6,r3
10008284:	1a86703a 	and	r3,r3,r10
10008288:	183fe01e 	bne	r3,zero,1000820c <__alt_data_end+0xf800820c>
1000828c:	10bfff04 	addi	r2,r2,-4
10008290:	21000104 	addi	r4,r4,4
10008294:	40bff636 	bltu	r8,r2,10008270 <__alt_data_end+0xf8008270>
10008298:	003fdb06 	br	10008208 <__alt_data_end+0xf8008208>
1000829c:	3005883a 	mov	r2,r6
100082a0:	003fd706 	br	10008200 <__alt_data_end+0xf8008200>

100082a4 <memcpy>:
100082a4:	defffd04 	addi	sp,sp,-12
100082a8:	dfc00215 	stw	ra,8(sp)
100082ac:	dc400115 	stw	r17,4(sp)
100082b0:	dc000015 	stw	r16,0(sp)
100082b4:	00c003c4 	movi	r3,15
100082b8:	2005883a 	mov	r2,r4
100082bc:	1980452e 	bgeu	r3,r6,100083d4 <memcpy+0x130>
100082c0:	2906b03a 	or	r3,r5,r4
100082c4:	18c000cc 	andi	r3,r3,3
100082c8:	1800441e 	bne	r3,zero,100083dc <memcpy+0x138>
100082cc:	347ffc04 	addi	r17,r6,-16
100082d0:	8822d13a 	srli	r17,r17,4
100082d4:	28c00104 	addi	r3,r5,4
100082d8:	23400104 	addi	r13,r4,4
100082dc:	8820913a 	slli	r16,r17,4
100082e0:	2b000204 	addi	r12,r5,8
100082e4:	22c00204 	addi	r11,r4,8
100082e8:	84000504 	addi	r16,r16,20
100082ec:	2a800304 	addi	r10,r5,12
100082f0:	22400304 	addi	r9,r4,12
100082f4:	2c21883a 	add	r16,r5,r16
100082f8:	2811883a 	mov	r8,r5
100082fc:	200f883a 	mov	r7,r4
10008300:	41000017 	ldw	r4,0(r8)
10008304:	1fc00017 	ldw	ra,0(r3)
10008308:	63c00017 	ldw	r15,0(r12)
1000830c:	39000015 	stw	r4,0(r7)
10008310:	53800017 	ldw	r14,0(r10)
10008314:	6fc00015 	stw	ra,0(r13)
10008318:	5bc00015 	stw	r15,0(r11)
1000831c:	4b800015 	stw	r14,0(r9)
10008320:	18c00404 	addi	r3,r3,16
10008324:	39c00404 	addi	r7,r7,16
10008328:	42000404 	addi	r8,r8,16
1000832c:	6b400404 	addi	r13,r13,16
10008330:	63000404 	addi	r12,r12,16
10008334:	5ac00404 	addi	r11,r11,16
10008338:	52800404 	addi	r10,r10,16
1000833c:	4a400404 	addi	r9,r9,16
10008340:	1c3fef1e 	bne	r3,r16,10008300 <__alt_data_end+0xf8008300>
10008344:	89c00044 	addi	r7,r17,1
10008348:	380e913a 	slli	r7,r7,4
1000834c:	310003cc 	andi	r4,r6,15
10008350:	02c000c4 	movi	r11,3
10008354:	11c7883a 	add	r3,r2,r7
10008358:	29cb883a 	add	r5,r5,r7
1000835c:	5900212e 	bgeu	r11,r4,100083e4 <memcpy+0x140>
10008360:	1813883a 	mov	r9,r3
10008364:	2811883a 	mov	r8,r5
10008368:	200f883a 	mov	r7,r4
1000836c:	42800017 	ldw	r10,0(r8)
10008370:	4a400104 	addi	r9,r9,4
10008374:	39ffff04 	addi	r7,r7,-4
10008378:	4abfff15 	stw	r10,-4(r9)
1000837c:	42000104 	addi	r8,r8,4
10008380:	59fffa36 	bltu	r11,r7,1000836c <__alt_data_end+0xf800836c>
10008384:	213fff04 	addi	r4,r4,-4
10008388:	2008d0ba 	srli	r4,r4,2
1000838c:	318000cc 	andi	r6,r6,3
10008390:	21000044 	addi	r4,r4,1
10008394:	2109883a 	add	r4,r4,r4
10008398:	2109883a 	add	r4,r4,r4
1000839c:	1907883a 	add	r3,r3,r4
100083a0:	290b883a 	add	r5,r5,r4
100083a4:	30000626 	beq	r6,zero,100083c0 <memcpy+0x11c>
100083a8:	198d883a 	add	r6,r3,r6
100083ac:	29c00003 	ldbu	r7,0(r5)
100083b0:	18c00044 	addi	r3,r3,1
100083b4:	29400044 	addi	r5,r5,1
100083b8:	19ffffc5 	stb	r7,-1(r3)
100083bc:	19bffb1e 	bne	r3,r6,100083ac <__alt_data_end+0xf80083ac>
100083c0:	dfc00217 	ldw	ra,8(sp)
100083c4:	dc400117 	ldw	r17,4(sp)
100083c8:	dc000017 	ldw	r16,0(sp)
100083cc:	dec00304 	addi	sp,sp,12
100083d0:	f800283a 	ret
100083d4:	2007883a 	mov	r3,r4
100083d8:	003ff206 	br	100083a4 <__alt_data_end+0xf80083a4>
100083dc:	2007883a 	mov	r3,r4
100083e0:	003ff106 	br	100083a8 <__alt_data_end+0xf80083a8>
100083e4:	200d883a 	mov	r6,r4
100083e8:	003fee06 	br	100083a4 <__alt_data_end+0xf80083a4>

100083ec <memmove>:
100083ec:	2005883a 	mov	r2,r4
100083f0:	29000b2e 	bgeu	r5,r4,10008420 <memmove+0x34>
100083f4:	298f883a 	add	r7,r5,r6
100083f8:	21c0092e 	bgeu	r4,r7,10008420 <memmove+0x34>
100083fc:	2187883a 	add	r3,r4,r6
10008400:	198bc83a 	sub	r5,r3,r6
10008404:	30004826 	beq	r6,zero,10008528 <memmove+0x13c>
10008408:	39ffffc4 	addi	r7,r7,-1
1000840c:	39000003 	ldbu	r4,0(r7)
10008410:	18ffffc4 	addi	r3,r3,-1
10008414:	19000005 	stb	r4,0(r3)
10008418:	28fffb1e 	bne	r5,r3,10008408 <__alt_data_end+0xf8008408>
1000841c:	f800283a 	ret
10008420:	00c003c4 	movi	r3,15
10008424:	1980412e 	bgeu	r3,r6,1000852c <memmove+0x140>
10008428:	2886b03a 	or	r3,r5,r2
1000842c:	18c000cc 	andi	r3,r3,3
10008430:	1800401e 	bne	r3,zero,10008534 <memmove+0x148>
10008434:	33fffc04 	addi	r15,r6,-16
10008438:	781ed13a 	srli	r15,r15,4
1000843c:	28c00104 	addi	r3,r5,4
10008440:	13400104 	addi	r13,r2,4
10008444:	781c913a 	slli	r14,r15,4
10008448:	2b000204 	addi	r12,r5,8
1000844c:	12c00204 	addi	r11,r2,8
10008450:	73800504 	addi	r14,r14,20
10008454:	2a800304 	addi	r10,r5,12
10008458:	12400304 	addi	r9,r2,12
1000845c:	2b9d883a 	add	r14,r5,r14
10008460:	2811883a 	mov	r8,r5
10008464:	100f883a 	mov	r7,r2
10008468:	41000017 	ldw	r4,0(r8)
1000846c:	39c00404 	addi	r7,r7,16
10008470:	18c00404 	addi	r3,r3,16
10008474:	393ffc15 	stw	r4,-16(r7)
10008478:	193ffc17 	ldw	r4,-16(r3)
1000847c:	6b400404 	addi	r13,r13,16
10008480:	5ac00404 	addi	r11,r11,16
10008484:	693ffc15 	stw	r4,-16(r13)
10008488:	61000017 	ldw	r4,0(r12)
1000848c:	4a400404 	addi	r9,r9,16
10008490:	42000404 	addi	r8,r8,16
10008494:	593ffc15 	stw	r4,-16(r11)
10008498:	51000017 	ldw	r4,0(r10)
1000849c:	63000404 	addi	r12,r12,16
100084a0:	52800404 	addi	r10,r10,16
100084a4:	493ffc15 	stw	r4,-16(r9)
100084a8:	1bbfef1e 	bne	r3,r14,10008468 <__alt_data_end+0xf8008468>
100084ac:	79000044 	addi	r4,r15,1
100084b0:	2008913a 	slli	r4,r4,4
100084b4:	328003cc 	andi	r10,r6,15
100084b8:	02c000c4 	movi	r11,3
100084bc:	1107883a 	add	r3,r2,r4
100084c0:	290b883a 	add	r5,r5,r4
100084c4:	5a801e2e 	bgeu	r11,r10,10008540 <memmove+0x154>
100084c8:	1813883a 	mov	r9,r3
100084cc:	2811883a 	mov	r8,r5
100084d0:	500f883a 	mov	r7,r10
100084d4:	41000017 	ldw	r4,0(r8)
100084d8:	4a400104 	addi	r9,r9,4
100084dc:	39ffff04 	addi	r7,r7,-4
100084e0:	493fff15 	stw	r4,-4(r9)
100084e4:	42000104 	addi	r8,r8,4
100084e8:	59fffa36 	bltu	r11,r7,100084d4 <__alt_data_end+0xf80084d4>
100084ec:	513fff04 	addi	r4,r10,-4
100084f0:	2008d0ba 	srli	r4,r4,2
100084f4:	318000cc 	andi	r6,r6,3
100084f8:	21000044 	addi	r4,r4,1
100084fc:	2109883a 	add	r4,r4,r4
10008500:	2109883a 	add	r4,r4,r4
10008504:	1907883a 	add	r3,r3,r4
10008508:	290b883a 	add	r5,r5,r4
1000850c:	30000b26 	beq	r6,zero,1000853c <memmove+0x150>
10008510:	198d883a 	add	r6,r3,r6
10008514:	29c00003 	ldbu	r7,0(r5)
10008518:	18c00044 	addi	r3,r3,1
1000851c:	29400044 	addi	r5,r5,1
10008520:	19ffffc5 	stb	r7,-1(r3)
10008524:	19bffb1e 	bne	r3,r6,10008514 <__alt_data_end+0xf8008514>
10008528:	f800283a 	ret
1000852c:	1007883a 	mov	r3,r2
10008530:	003ff606 	br	1000850c <__alt_data_end+0xf800850c>
10008534:	1007883a 	mov	r3,r2
10008538:	003ff506 	br	10008510 <__alt_data_end+0xf8008510>
1000853c:	f800283a 	ret
10008540:	500d883a 	mov	r6,r10
10008544:	003ff106 	br	1000850c <__alt_data_end+0xf800850c>

10008548 <memset>:
10008548:	20c000cc 	andi	r3,r4,3
1000854c:	2005883a 	mov	r2,r4
10008550:	18004426 	beq	r3,zero,10008664 <memset+0x11c>
10008554:	31ffffc4 	addi	r7,r6,-1
10008558:	30004026 	beq	r6,zero,1000865c <memset+0x114>
1000855c:	2813883a 	mov	r9,r5
10008560:	200d883a 	mov	r6,r4
10008564:	2007883a 	mov	r3,r4
10008568:	00000406 	br	1000857c <memset+0x34>
1000856c:	3a3fffc4 	addi	r8,r7,-1
10008570:	31800044 	addi	r6,r6,1
10008574:	38003926 	beq	r7,zero,1000865c <memset+0x114>
10008578:	400f883a 	mov	r7,r8
1000857c:	18c00044 	addi	r3,r3,1
10008580:	32400005 	stb	r9,0(r6)
10008584:	1a0000cc 	andi	r8,r3,3
10008588:	403ff81e 	bne	r8,zero,1000856c <__alt_data_end+0xf800856c>
1000858c:	010000c4 	movi	r4,3
10008590:	21c02d2e 	bgeu	r4,r7,10008648 <memset+0x100>
10008594:	29003fcc 	andi	r4,r5,255
10008598:	200c923a 	slli	r6,r4,8
1000859c:	3108b03a 	or	r4,r6,r4
100085a0:	200c943a 	slli	r6,r4,16
100085a4:	218cb03a 	or	r6,r4,r6
100085a8:	010003c4 	movi	r4,15
100085ac:	21c0182e 	bgeu	r4,r7,10008610 <memset+0xc8>
100085b0:	3b3ffc04 	addi	r12,r7,-16
100085b4:	6018d13a 	srli	r12,r12,4
100085b8:	1a000104 	addi	r8,r3,4
100085bc:	1ac00204 	addi	r11,r3,8
100085c0:	6008913a 	slli	r4,r12,4
100085c4:	1a800304 	addi	r10,r3,12
100085c8:	1813883a 	mov	r9,r3
100085cc:	21000504 	addi	r4,r4,20
100085d0:	1909883a 	add	r4,r3,r4
100085d4:	49800015 	stw	r6,0(r9)
100085d8:	41800015 	stw	r6,0(r8)
100085dc:	59800015 	stw	r6,0(r11)
100085e0:	51800015 	stw	r6,0(r10)
100085e4:	42000404 	addi	r8,r8,16
100085e8:	4a400404 	addi	r9,r9,16
100085ec:	5ac00404 	addi	r11,r11,16
100085f0:	52800404 	addi	r10,r10,16
100085f4:	413ff71e 	bne	r8,r4,100085d4 <__alt_data_end+0xf80085d4>
100085f8:	63000044 	addi	r12,r12,1
100085fc:	6018913a 	slli	r12,r12,4
10008600:	39c003cc 	andi	r7,r7,15
10008604:	010000c4 	movi	r4,3
10008608:	1b07883a 	add	r3,r3,r12
1000860c:	21c00e2e 	bgeu	r4,r7,10008648 <memset+0x100>
10008610:	1813883a 	mov	r9,r3
10008614:	3811883a 	mov	r8,r7
10008618:	010000c4 	movi	r4,3
1000861c:	49800015 	stw	r6,0(r9)
10008620:	423fff04 	addi	r8,r8,-4
10008624:	4a400104 	addi	r9,r9,4
10008628:	223ffc36 	bltu	r4,r8,1000861c <__alt_data_end+0xf800861c>
1000862c:	393fff04 	addi	r4,r7,-4
10008630:	2008d0ba 	srli	r4,r4,2
10008634:	39c000cc 	andi	r7,r7,3
10008638:	21000044 	addi	r4,r4,1
1000863c:	2109883a 	add	r4,r4,r4
10008640:	2109883a 	add	r4,r4,r4
10008644:	1907883a 	add	r3,r3,r4
10008648:	38000526 	beq	r7,zero,10008660 <memset+0x118>
1000864c:	19cf883a 	add	r7,r3,r7
10008650:	19400005 	stb	r5,0(r3)
10008654:	18c00044 	addi	r3,r3,1
10008658:	38fffd1e 	bne	r7,r3,10008650 <__alt_data_end+0xf8008650>
1000865c:	f800283a 	ret
10008660:	f800283a 	ret
10008664:	2007883a 	mov	r3,r4
10008668:	300f883a 	mov	r7,r6
1000866c:	003fc706 	br	1000858c <__alt_data_end+0xf800858c>

10008670 <_Balloc>:
10008670:	20801317 	ldw	r2,76(r4)
10008674:	defffc04 	addi	sp,sp,-16
10008678:	dc400115 	stw	r17,4(sp)
1000867c:	dc000015 	stw	r16,0(sp)
10008680:	dfc00315 	stw	ra,12(sp)
10008684:	dc800215 	stw	r18,8(sp)
10008688:	2023883a 	mov	r17,r4
1000868c:	2821883a 	mov	r16,r5
10008690:	10000f26 	beq	r2,zero,100086d0 <_Balloc+0x60>
10008694:	8407883a 	add	r3,r16,r16
10008698:	18c7883a 	add	r3,r3,r3
1000869c:	10c7883a 	add	r3,r2,r3
100086a0:	18800017 	ldw	r2,0(r3)
100086a4:	10001126 	beq	r2,zero,100086ec <_Balloc+0x7c>
100086a8:	11000017 	ldw	r4,0(r2)
100086ac:	19000015 	stw	r4,0(r3)
100086b0:	10000415 	stw	zero,16(r2)
100086b4:	10000315 	stw	zero,12(r2)
100086b8:	dfc00317 	ldw	ra,12(sp)
100086bc:	dc800217 	ldw	r18,8(sp)
100086c0:	dc400117 	ldw	r17,4(sp)
100086c4:	dc000017 	ldw	r16,0(sp)
100086c8:	dec00404 	addi	sp,sp,16
100086cc:	f800283a 	ret
100086d0:	01800844 	movi	r6,33
100086d4:	01400104 	movi	r5,4
100086d8:	000b7180 	call	1000b718 <_calloc_r>
100086dc:	88801315 	stw	r2,76(r17)
100086e0:	103fec1e 	bne	r2,zero,10008694 <__alt_data_end+0xf8008694>
100086e4:	0005883a 	mov	r2,zero
100086e8:	003ff306 	br	100086b8 <__alt_data_end+0xf80086b8>
100086ec:	01400044 	movi	r5,1
100086f0:	2c24983a 	sll	r18,r5,r16
100086f4:	8809883a 	mov	r4,r17
100086f8:	91800144 	addi	r6,r18,5
100086fc:	318d883a 	add	r6,r6,r6
10008700:	318d883a 	add	r6,r6,r6
10008704:	000b7180 	call	1000b718 <_calloc_r>
10008708:	103ff626 	beq	r2,zero,100086e4 <__alt_data_end+0xf80086e4>
1000870c:	14000115 	stw	r16,4(r2)
10008710:	14800215 	stw	r18,8(r2)
10008714:	003fe606 	br	100086b0 <__alt_data_end+0xf80086b0>

10008718 <_Bfree>:
10008718:	28000826 	beq	r5,zero,1000873c <_Bfree+0x24>
1000871c:	28c00117 	ldw	r3,4(r5)
10008720:	20801317 	ldw	r2,76(r4)
10008724:	18c7883a 	add	r3,r3,r3
10008728:	18c7883a 	add	r3,r3,r3
1000872c:	10c5883a 	add	r2,r2,r3
10008730:	10c00017 	ldw	r3,0(r2)
10008734:	28c00015 	stw	r3,0(r5)
10008738:	11400015 	stw	r5,0(r2)
1000873c:	f800283a 	ret

10008740 <__multadd>:
10008740:	defff704 	addi	sp,sp,-36
10008744:	dc800215 	stw	r18,8(sp)
10008748:	2c800417 	ldw	r18,16(r5)
1000874c:	dd800615 	stw	r22,24(sp)
10008750:	dd400515 	stw	r21,20(sp)
10008754:	dd000415 	stw	r20,16(sp)
10008758:	dcc00315 	stw	r19,12(sp)
1000875c:	dc400115 	stw	r17,4(sp)
10008760:	dc000015 	stw	r16,0(sp)
10008764:	dfc00815 	stw	ra,32(sp)
10008768:	ddc00715 	stw	r23,28(sp)
1000876c:	2827883a 	mov	r19,r5
10008770:	2029883a 	mov	r20,r4
10008774:	3023883a 	mov	r17,r6
10008778:	3821883a 	mov	r16,r7
1000877c:	2d400504 	addi	r21,r5,20
10008780:	002d883a 	mov	r22,zero
10008784:	adc00017 	ldw	r23,0(r21)
10008788:	880b883a 	mov	r5,r17
1000878c:	ad400104 	addi	r21,r21,4
10008790:	b93fffcc 	andi	r4,r23,65535
10008794:	000cc7c0 	call	1000cc7c <__mulsi3>
10008798:	b808d43a 	srli	r4,r23,16
1000879c:	880b883a 	mov	r5,r17
100087a0:	1421883a 	add	r16,r2,r16
100087a4:	000cc7c0 	call	1000cc7c <__mulsi3>
100087a8:	800ed43a 	srli	r7,r16,16
100087ac:	80ffffcc 	andi	r3,r16,65535
100087b0:	b5800044 	addi	r22,r22,1
100087b4:	11c5883a 	add	r2,r2,r7
100087b8:	100e943a 	slli	r7,r2,16
100087bc:	1020d43a 	srli	r16,r2,16
100087c0:	38c7883a 	add	r3,r7,r3
100087c4:	a8ffff15 	stw	r3,-4(r21)
100087c8:	b4bfee16 	blt	r22,r18,10008784 <__alt_data_end+0xf8008784>
100087cc:	80000926 	beq	r16,zero,100087f4 <__multadd+0xb4>
100087d0:	98800217 	ldw	r2,8(r19)
100087d4:	9080130e 	bge	r18,r2,10008824 <__multadd+0xe4>
100087d8:	90800144 	addi	r2,r18,5
100087dc:	1085883a 	add	r2,r2,r2
100087e0:	1085883a 	add	r2,r2,r2
100087e4:	9885883a 	add	r2,r19,r2
100087e8:	14000015 	stw	r16,0(r2)
100087ec:	94800044 	addi	r18,r18,1
100087f0:	9c800415 	stw	r18,16(r19)
100087f4:	9805883a 	mov	r2,r19
100087f8:	dfc00817 	ldw	ra,32(sp)
100087fc:	ddc00717 	ldw	r23,28(sp)
10008800:	dd800617 	ldw	r22,24(sp)
10008804:	dd400517 	ldw	r21,20(sp)
10008808:	dd000417 	ldw	r20,16(sp)
1000880c:	dcc00317 	ldw	r19,12(sp)
10008810:	dc800217 	ldw	r18,8(sp)
10008814:	dc400117 	ldw	r17,4(sp)
10008818:	dc000017 	ldw	r16,0(sp)
1000881c:	dec00904 	addi	sp,sp,36
10008820:	f800283a 	ret
10008824:	99400117 	ldw	r5,4(r19)
10008828:	a009883a 	mov	r4,r20
1000882c:	29400044 	addi	r5,r5,1
10008830:	00086700 	call	10008670 <_Balloc>
10008834:	99800417 	ldw	r6,16(r19)
10008838:	99400304 	addi	r5,r19,12
1000883c:	11000304 	addi	r4,r2,12
10008840:	31800084 	addi	r6,r6,2
10008844:	318d883a 	add	r6,r6,r6
10008848:	318d883a 	add	r6,r6,r6
1000884c:	1023883a 	mov	r17,r2
10008850:	00082a40 	call	100082a4 <memcpy>
10008854:	98000a26 	beq	r19,zero,10008880 <__multadd+0x140>
10008858:	98c00117 	ldw	r3,4(r19)
1000885c:	a0801317 	ldw	r2,76(r20)
10008860:	18c7883a 	add	r3,r3,r3
10008864:	18c7883a 	add	r3,r3,r3
10008868:	10c5883a 	add	r2,r2,r3
1000886c:	10c00017 	ldw	r3,0(r2)
10008870:	98c00015 	stw	r3,0(r19)
10008874:	14c00015 	stw	r19,0(r2)
10008878:	8827883a 	mov	r19,r17
1000887c:	003fd606 	br	100087d8 <__alt_data_end+0xf80087d8>
10008880:	8827883a 	mov	r19,r17
10008884:	003fd406 	br	100087d8 <__alt_data_end+0xf80087d8>

10008888 <__s2b>:
10008888:	defff904 	addi	sp,sp,-28
1000888c:	dc400115 	stw	r17,4(sp)
10008890:	dc000015 	stw	r16,0(sp)
10008894:	2023883a 	mov	r17,r4
10008898:	2821883a 	mov	r16,r5
1000889c:	39000204 	addi	r4,r7,8
100088a0:	01400244 	movi	r5,9
100088a4:	dcc00315 	stw	r19,12(sp)
100088a8:	dc800215 	stw	r18,8(sp)
100088ac:	dfc00615 	stw	ra,24(sp)
100088b0:	dd400515 	stw	r21,20(sp)
100088b4:	dd000415 	stw	r20,16(sp)
100088b8:	3825883a 	mov	r18,r7
100088bc:	3027883a 	mov	r19,r6
100088c0:	00023d40 	call	100023d4 <__divsi3>
100088c4:	00c00044 	movi	r3,1
100088c8:	000b883a 	mov	r5,zero
100088cc:	1880030e 	bge	r3,r2,100088dc <__s2b+0x54>
100088d0:	18c7883a 	add	r3,r3,r3
100088d4:	29400044 	addi	r5,r5,1
100088d8:	18bffd16 	blt	r3,r2,100088d0 <__alt_data_end+0xf80088d0>
100088dc:	8809883a 	mov	r4,r17
100088e0:	00086700 	call	10008670 <_Balloc>
100088e4:	d8c00717 	ldw	r3,28(sp)
100088e8:	10c00515 	stw	r3,20(r2)
100088ec:	00c00044 	movi	r3,1
100088f0:	10c00415 	stw	r3,16(r2)
100088f4:	00c00244 	movi	r3,9
100088f8:	1cc0210e 	bge	r3,r19,10008980 <__s2b+0xf8>
100088fc:	80eb883a 	add	r21,r16,r3
10008900:	a829883a 	mov	r20,r21
10008904:	84e1883a 	add	r16,r16,r19
10008908:	a1c00007 	ldb	r7,0(r20)
1000890c:	01800284 	movi	r6,10
10008910:	a5000044 	addi	r20,r20,1
10008914:	100b883a 	mov	r5,r2
10008918:	39fff404 	addi	r7,r7,-48
1000891c:	8809883a 	mov	r4,r17
10008920:	00087400 	call	10008740 <__multadd>
10008924:	a43ff81e 	bne	r20,r16,10008908 <__alt_data_end+0xf8008908>
10008928:	ace1883a 	add	r16,r21,r19
1000892c:	843ffe04 	addi	r16,r16,-8
10008930:	9c800a0e 	bge	r19,r18,1000895c <__s2b+0xd4>
10008934:	94e5c83a 	sub	r18,r18,r19
10008938:	84a5883a 	add	r18,r16,r18
1000893c:	81c00007 	ldb	r7,0(r16)
10008940:	01800284 	movi	r6,10
10008944:	84000044 	addi	r16,r16,1
10008948:	100b883a 	mov	r5,r2
1000894c:	39fff404 	addi	r7,r7,-48
10008950:	8809883a 	mov	r4,r17
10008954:	00087400 	call	10008740 <__multadd>
10008958:	84bff81e 	bne	r16,r18,1000893c <__alt_data_end+0xf800893c>
1000895c:	dfc00617 	ldw	ra,24(sp)
10008960:	dd400517 	ldw	r21,20(sp)
10008964:	dd000417 	ldw	r20,16(sp)
10008968:	dcc00317 	ldw	r19,12(sp)
1000896c:	dc800217 	ldw	r18,8(sp)
10008970:	dc400117 	ldw	r17,4(sp)
10008974:	dc000017 	ldw	r16,0(sp)
10008978:	dec00704 	addi	sp,sp,28
1000897c:	f800283a 	ret
10008980:	84000284 	addi	r16,r16,10
10008984:	1827883a 	mov	r19,r3
10008988:	003fe906 	br	10008930 <__alt_data_end+0xf8008930>

1000898c <__hi0bits>:
1000898c:	20bfffec 	andhi	r2,r4,65535
10008990:	1000141e 	bne	r2,zero,100089e4 <__hi0bits+0x58>
10008994:	2008943a 	slli	r4,r4,16
10008998:	00800404 	movi	r2,16
1000899c:	20ffc02c 	andhi	r3,r4,65280
100089a0:	1800021e 	bne	r3,zero,100089ac <__hi0bits+0x20>
100089a4:	2008923a 	slli	r4,r4,8
100089a8:	10800204 	addi	r2,r2,8
100089ac:	20fc002c 	andhi	r3,r4,61440
100089b0:	1800021e 	bne	r3,zero,100089bc <__hi0bits+0x30>
100089b4:	2008913a 	slli	r4,r4,4
100089b8:	10800104 	addi	r2,r2,4
100089bc:	20f0002c 	andhi	r3,r4,49152
100089c0:	1800031e 	bne	r3,zero,100089d0 <__hi0bits+0x44>
100089c4:	2109883a 	add	r4,r4,r4
100089c8:	10800084 	addi	r2,r2,2
100089cc:	2109883a 	add	r4,r4,r4
100089d0:	20000316 	blt	r4,zero,100089e0 <__hi0bits+0x54>
100089d4:	2110002c 	andhi	r4,r4,16384
100089d8:	2000041e 	bne	r4,zero,100089ec <__hi0bits+0x60>
100089dc:	00800804 	movi	r2,32
100089e0:	f800283a 	ret
100089e4:	0005883a 	mov	r2,zero
100089e8:	003fec06 	br	1000899c <__alt_data_end+0xf800899c>
100089ec:	10800044 	addi	r2,r2,1
100089f0:	f800283a 	ret

100089f4 <__lo0bits>:
100089f4:	20c00017 	ldw	r3,0(r4)
100089f8:	188001cc 	andi	r2,r3,7
100089fc:	10000826 	beq	r2,zero,10008a20 <__lo0bits+0x2c>
10008a00:	1880004c 	andi	r2,r3,1
10008a04:	1000211e 	bne	r2,zero,10008a8c <__lo0bits+0x98>
10008a08:	1880008c 	andi	r2,r3,2
10008a0c:	1000211e 	bne	r2,zero,10008a94 <__lo0bits+0xa0>
10008a10:	1806d0ba 	srli	r3,r3,2
10008a14:	00800084 	movi	r2,2
10008a18:	20c00015 	stw	r3,0(r4)
10008a1c:	f800283a 	ret
10008a20:	18bfffcc 	andi	r2,r3,65535
10008a24:	10001326 	beq	r2,zero,10008a74 <__lo0bits+0x80>
10008a28:	0005883a 	mov	r2,zero
10008a2c:	19403fcc 	andi	r5,r3,255
10008a30:	2800021e 	bne	r5,zero,10008a3c <__lo0bits+0x48>
10008a34:	1806d23a 	srli	r3,r3,8
10008a38:	10800204 	addi	r2,r2,8
10008a3c:	194003cc 	andi	r5,r3,15
10008a40:	2800021e 	bne	r5,zero,10008a4c <__lo0bits+0x58>
10008a44:	1806d13a 	srli	r3,r3,4
10008a48:	10800104 	addi	r2,r2,4
10008a4c:	194000cc 	andi	r5,r3,3
10008a50:	2800021e 	bne	r5,zero,10008a5c <__lo0bits+0x68>
10008a54:	1806d0ba 	srli	r3,r3,2
10008a58:	10800084 	addi	r2,r2,2
10008a5c:	1940004c 	andi	r5,r3,1
10008a60:	2800081e 	bne	r5,zero,10008a84 <__lo0bits+0x90>
10008a64:	1806d07a 	srli	r3,r3,1
10008a68:	1800051e 	bne	r3,zero,10008a80 <__lo0bits+0x8c>
10008a6c:	00800804 	movi	r2,32
10008a70:	f800283a 	ret
10008a74:	1806d43a 	srli	r3,r3,16
10008a78:	00800404 	movi	r2,16
10008a7c:	003feb06 	br	10008a2c <__alt_data_end+0xf8008a2c>
10008a80:	10800044 	addi	r2,r2,1
10008a84:	20c00015 	stw	r3,0(r4)
10008a88:	f800283a 	ret
10008a8c:	0005883a 	mov	r2,zero
10008a90:	f800283a 	ret
10008a94:	1806d07a 	srli	r3,r3,1
10008a98:	00800044 	movi	r2,1
10008a9c:	20c00015 	stw	r3,0(r4)
10008aa0:	f800283a 	ret

10008aa4 <__i2b>:
10008aa4:	defffd04 	addi	sp,sp,-12
10008aa8:	dc000015 	stw	r16,0(sp)
10008aac:	04000044 	movi	r16,1
10008ab0:	dc400115 	stw	r17,4(sp)
10008ab4:	2823883a 	mov	r17,r5
10008ab8:	800b883a 	mov	r5,r16
10008abc:	dfc00215 	stw	ra,8(sp)
10008ac0:	00086700 	call	10008670 <_Balloc>
10008ac4:	14400515 	stw	r17,20(r2)
10008ac8:	14000415 	stw	r16,16(r2)
10008acc:	dfc00217 	ldw	ra,8(sp)
10008ad0:	dc400117 	ldw	r17,4(sp)
10008ad4:	dc000017 	ldw	r16,0(sp)
10008ad8:	dec00304 	addi	sp,sp,12
10008adc:	f800283a 	ret

10008ae0 <__multiply>:
10008ae0:	deffef04 	addi	sp,sp,-68
10008ae4:	dc400815 	stw	r17,32(sp)
10008ae8:	dc000715 	stw	r16,28(sp)
10008aec:	34400417 	ldw	r17,16(r6)
10008af0:	2c000417 	ldw	r16,16(r5)
10008af4:	dd800d15 	stw	r22,52(sp)
10008af8:	dc800915 	stw	r18,36(sp)
10008afc:	dfc01015 	stw	ra,64(sp)
10008b00:	df000f15 	stw	fp,60(sp)
10008b04:	ddc00e15 	stw	r23,56(sp)
10008b08:	dd400c15 	stw	r21,48(sp)
10008b0c:	dd000b15 	stw	r20,44(sp)
10008b10:	dcc00a15 	stw	r19,40(sp)
10008b14:	2825883a 	mov	r18,r5
10008b18:	302d883a 	mov	r22,r6
10008b1c:	8440050e 	bge	r16,r17,10008b34 <__multiply+0x54>
10008b20:	8007883a 	mov	r3,r16
10008b24:	3025883a 	mov	r18,r6
10008b28:	8821883a 	mov	r16,r17
10008b2c:	282d883a 	mov	r22,r5
10008b30:	1823883a 	mov	r17,r3
10008b34:	90800217 	ldw	r2,8(r18)
10008b38:	8447883a 	add	r3,r16,r17
10008b3c:	d8c00215 	stw	r3,8(sp)
10008b40:	91400117 	ldw	r5,4(r18)
10008b44:	10c0010e 	bge	r2,r3,10008b4c <__multiply+0x6c>
10008b48:	29400044 	addi	r5,r5,1
10008b4c:	00086700 	call	10008670 <_Balloc>
10008b50:	d8c00217 	ldw	r3,8(sp)
10008b54:	d8800615 	stw	r2,24(sp)
10008b58:	18eb883a 	add	r21,r3,r3
10008b5c:	ad6b883a 	add	r21,r21,r21
10008b60:	10c00504 	addi	r3,r2,20
10008b64:	1d6b883a 	add	r21,r3,r21
10008b68:	d8c00115 	stw	r3,4(sp)
10008b6c:	dd400315 	stw	r21,12(sp)
10008b70:	1805883a 	mov	r2,r3
10008b74:	1d40042e 	bgeu	r3,r21,10008b88 <__multiply+0xa8>
10008b78:	d8c00317 	ldw	r3,12(sp)
10008b7c:	10000015 	stw	zero,0(r2)
10008b80:	10800104 	addi	r2,r2,4
10008b84:	10fffc36 	bltu	r2,r3,10008b78 <__alt_data_end+0xf8008b78>
10008b88:	8c63883a 	add	r17,r17,r17
10008b8c:	b5800504 	addi	r22,r22,20
10008b90:	8c63883a 	add	r17,r17,r17
10008b94:	94800504 	addi	r18,r18,20
10008b98:	8421883a 	add	r16,r16,r16
10008b9c:	b463883a 	add	r17,r22,r17
10008ba0:	8421883a 	add	r16,r16,r16
10008ba4:	dd800015 	stw	r22,0(sp)
10008ba8:	dc800415 	stw	r18,16(sp)
10008bac:	dc400515 	stw	r17,20(sp)
10008bb0:	9429883a 	add	r20,r18,r16
10008bb4:	b4404f2e 	bgeu	r22,r17,10008cf4 <__multiply+0x214>
10008bb8:	d8c00017 	ldw	r3,0(sp)
10008bbc:	1c800017 	ldw	r18,0(r3)
10008bc0:	947fffcc 	andi	r17,r18,65535
10008bc4:	88001e26 	beq	r17,zero,10008c40 <__multiply+0x160>
10008bc8:	dd800117 	ldw	r22,4(sp)
10008bcc:	dd400417 	ldw	r21,16(sp)
10008bd0:	0027883a 	mov	r19,zero
10008bd4:	ac800017 	ldw	r18,0(r21)
10008bd8:	b4000017 	ldw	r16,0(r22)
10008bdc:	880b883a 	mov	r5,r17
10008be0:	913fffcc 	andi	r4,r18,65535
10008be4:	000cc7c0 	call	1000cc7c <__mulsi3>
10008be8:	9008d43a 	srli	r4,r18,16
10008bec:	84bfffcc 	andi	r18,r16,65535
10008bf0:	1485883a 	add	r2,r2,r18
10008bf4:	14e5883a 	add	r18,r2,r19
10008bf8:	8020d43a 	srli	r16,r16,16
10008bfc:	9026d43a 	srli	r19,r18,16
10008c00:	880b883a 	mov	r5,r17
10008c04:	000cc7c0 	call	1000cc7c <__mulsi3>
10008c08:	1405883a 	add	r2,r2,r16
10008c0c:	14e1883a 	add	r16,r2,r19
10008c10:	90ffffcc 	andi	r3,r18,65535
10008c14:	8024943a 	slli	r18,r16,16
10008c18:	ad400104 	addi	r21,r21,4
10008c1c:	b005883a 	mov	r2,r22
10008c20:	90c6b03a 	or	r3,r18,r3
10008c24:	b0c00015 	stw	r3,0(r22)
10008c28:	8026d43a 	srli	r19,r16,16
10008c2c:	b5800104 	addi	r22,r22,4
10008c30:	ad3fe836 	bltu	r21,r20,10008bd4 <__alt_data_end+0xf8008bd4>
10008c34:	d8c00017 	ldw	r3,0(sp)
10008c38:	14c00115 	stw	r19,4(r2)
10008c3c:	1c800017 	ldw	r18,0(r3)
10008c40:	9024d43a 	srli	r18,r18,16
10008c44:	90002226 	beq	r18,zero,10008cd0 <__multiply+0x1f0>
10008c48:	d8c00117 	ldw	r3,4(sp)
10008c4c:	dd800417 	ldw	r22,16(sp)
10008c50:	002f883a 	mov	r23,zero
10008c54:	1f000017 	ldw	fp,0(r3)
10008c58:	1823883a 	mov	r17,r3
10008c5c:	182b883a 	mov	r21,r3
10008c60:	e021883a 	mov	r16,fp
10008c64:	00000106 	br	10008c6c <__multiply+0x18c>
10008c68:	982b883a 	mov	r21,r19
10008c6c:	b100000b 	ldhu	r4,0(r22)
10008c70:	8020d43a 	srli	r16,r16,16
10008c74:	900b883a 	mov	r5,r18
10008c78:	000cc7c0 	call	1000cc7c <__mulsi3>
10008c7c:	1405883a 	add	r2,r2,r16
10008c80:	15ef883a 	add	r23,r2,r23
10008c84:	b804943a 	slli	r2,r23,16
10008c88:	e0ffffcc 	andi	r3,fp,65535
10008c8c:	8c400104 	addi	r17,r17,4
10008c90:	10c6b03a 	or	r3,r2,r3
10008c94:	88ffff15 	stw	r3,-4(r17)
10008c98:	b5800104 	addi	r22,r22,4
10008c9c:	b13fff17 	ldw	r4,-4(r22)
10008ca0:	acc00104 	addi	r19,r21,4
10008ca4:	900b883a 	mov	r5,r18
10008ca8:	2008d43a 	srli	r4,r4,16
10008cac:	9c000017 	ldw	r16,0(r19)
10008cb0:	000cc7c0 	call	1000cc7c <__mulsi3>
10008cb4:	b806d43a 	srli	r3,r23,16
10008cb8:	813fffcc 	andi	r4,r16,65535
10008cbc:	1105883a 	add	r2,r2,r4
10008cc0:	10f9883a 	add	fp,r2,r3
10008cc4:	e02ed43a 	srli	r23,fp,16
10008cc8:	b53fe736 	bltu	r22,r20,10008c68 <__alt_data_end+0xf8008c68>
10008ccc:	af000115 	stw	fp,4(r21)
10008cd0:	d8c00017 	ldw	r3,0(sp)
10008cd4:	d9000517 	ldw	r4,20(sp)
10008cd8:	18c00104 	addi	r3,r3,4
10008cdc:	d8c00015 	stw	r3,0(sp)
10008ce0:	d8c00117 	ldw	r3,4(sp)
10008ce4:	18c00104 	addi	r3,r3,4
10008ce8:	d8c00115 	stw	r3,4(sp)
10008cec:	d8c00017 	ldw	r3,0(sp)
10008cf0:	193fb136 	bltu	r3,r4,10008bb8 <__alt_data_end+0xf8008bb8>
10008cf4:	d8c00217 	ldw	r3,8(sp)
10008cf8:	00c00c0e 	bge	zero,r3,10008d2c <__multiply+0x24c>
10008cfc:	d8c00317 	ldw	r3,12(sp)
10008d00:	18bfff17 	ldw	r2,-4(r3)
10008d04:	1d7fff04 	addi	r21,r3,-4
10008d08:	10000326 	beq	r2,zero,10008d18 <__multiply+0x238>
10008d0c:	00000706 	br	10008d2c <__multiply+0x24c>
10008d10:	a8800017 	ldw	r2,0(r21)
10008d14:	1000051e 	bne	r2,zero,10008d2c <__multiply+0x24c>
10008d18:	d8c00217 	ldw	r3,8(sp)
10008d1c:	ad7fff04 	addi	r21,r21,-4
10008d20:	18ffffc4 	addi	r3,r3,-1
10008d24:	d8c00215 	stw	r3,8(sp)
10008d28:	183ff91e 	bne	r3,zero,10008d10 <__alt_data_end+0xf8008d10>
10008d2c:	d8c00617 	ldw	r3,24(sp)
10008d30:	d9000217 	ldw	r4,8(sp)
10008d34:	1805883a 	mov	r2,r3
10008d38:	19000415 	stw	r4,16(r3)
10008d3c:	dfc01017 	ldw	ra,64(sp)
10008d40:	df000f17 	ldw	fp,60(sp)
10008d44:	ddc00e17 	ldw	r23,56(sp)
10008d48:	dd800d17 	ldw	r22,52(sp)
10008d4c:	dd400c17 	ldw	r21,48(sp)
10008d50:	dd000b17 	ldw	r20,44(sp)
10008d54:	dcc00a17 	ldw	r19,40(sp)
10008d58:	dc800917 	ldw	r18,36(sp)
10008d5c:	dc400817 	ldw	r17,32(sp)
10008d60:	dc000717 	ldw	r16,28(sp)
10008d64:	dec01104 	addi	sp,sp,68
10008d68:	f800283a 	ret

10008d6c <__pow5mult>:
10008d6c:	defffa04 	addi	sp,sp,-24
10008d70:	dcc00315 	stw	r19,12(sp)
10008d74:	dc000015 	stw	r16,0(sp)
10008d78:	dfc00515 	stw	ra,20(sp)
10008d7c:	dd000415 	stw	r20,16(sp)
10008d80:	dc800215 	stw	r18,8(sp)
10008d84:	dc400115 	stw	r17,4(sp)
10008d88:	308000cc 	andi	r2,r6,3
10008d8c:	3021883a 	mov	r16,r6
10008d90:	2027883a 	mov	r19,r4
10008d94:	10002f1e 	bne	r2,zero,10008e54 <__pow5mult+0xe8>
10008d98:	2825883a 	mov	r18,r5
10008d9c:	8021d0ba 	srai	r16,r16,2
10008da0:	80001a26 	beq	r16,zero,10008e0c <__pow5mult+0xa0>
10008da4:	9c401217 	ldw	r17,72(r19)
10008da8:	8800061e 	bne	r17,zero,10008dc4 <__pow5mult+0x58>
10008dac:	00003406 	br	10008e80 <__pow5mult+0x114>
10008db0:	8021d07a 	srai	r16,r16,1
10008db4:	80001526 	beq	r16,zero,10008e0c <__pow5mult+0xa0>
10008db8:	88800017 	ldw	r2,0(r17)
10008dbc:	10001c26 	beq	r2,zero,10008e30 <__pow5mult+0xc4>
10008dc0:	1023883a 	mov	r17,r2
10008dc4:	8080004c 	andi	r2,r16,1
10008dc8:	103ff926 	beq	r2,zero,10008db0 <__alt_data_end+0xf8008db0>
10008dcc:	880d883a 	mov	r6,r17
10008dd0:	900b883a 	mov	r5,r18
10008dd4:	9809883a 	mov	r4,r19
10008dd8:	0008ae00 	call	10008ae0 <__multiply>
10008ddc:	90001b26 	beq	r18,zero,10008e4c <__pow5mult+0xe0>
10008de0:	91000117 	ldw	r4,4(r18)
10008de4:	98c01317 	ldw	r3,76(r19)
10008de8:	8021d07a 	srai	r16,r16,1
10008dec:	2109883a 	add	r4,r4,r4
10008df0:	2109883a 	add	r4,r4,r4
10008df4:	1907883a 	add	r3,r3,r4
10008df8:	19000017 	ldw	r4,0(r3)
10008dfc:	91000015 	stw	r4,0(r18)
10008e00:	1c800015 	stw	r18,0(r3)
10008e04:	1025883a 	mov	r18,r2
10008e08:	803feb1e 	bne	r16,zero,10008db8 <__alt_data_end+0xf8008db8>
10008e0c:	9005883a 	mov	r2,r18
10008e10:	dfc00517 	ldw	ra,20(sp)
10008e14:	dd000417 	ldw	r20,16(sp)
10008e18:	dcc00317 	ldw	r19,12(sp)
10008e1c:	dc800217 	ldw	r18,8(sp)
10008e20:	dc400117 	ldw	r17,4(sp)
10008e24:	dc000017 	ldw	r16,0(sp)
10008e28:	dec00604 	addi	sp,sp,24
10008e2c:	f800283a 	ret
10008e30:	880d883a 	mov	r6,r17
10008e34:	880b883a 	mov	r5,r17
10008e38:	9809883a 	mov	r4,r19
10008e3c:	0008ae00 	call	10008ae0 <__multiply>
10008e40:	88800015 	stw	r2,0(r17)
10008e44:	10000015 	stw	zero,0(r2)
10008e48:	003fdd06 	br	10008dc0 <__alt_data_end+0xf8008dc0>
10008e4c:	1025883a 	mov	r18,r2
10008e50:	003fd706 	br	10008db0 <__alt_data_end+0xf8008db0>
10008e54:	10bfffc4 	addi	r2,r2,-1
10008e58:	1085883a 	add	r2,r2,r2
10008e5c:	00c40074 	movhi	r3,4097
10008e60:	18c9e804 	addi	r3,r3,10144
10008e64:	1085883a 	add	r2,r2,r2
10008e68:	1885883a 	add	r2,r3,r2
10008e6c:	11800017 	ldw	r6,0(r2)
10008e70:	000f883a 	mov	r7,zero
10008e74:	00087400 	call	10008740 <__multadd>
10008e78:	1025883a 	mov	r18,r2
10008e7c:	003fc706 	br	10008d9c <__alt_data_end+0xf8008d9c>
10008e80:	05000044 	movi	r20,1
10008e84:	a00b883a 	mov	r5,r20
10008e88:	9809883a 	mov	r4,r19
10008e8c:	00086700 	call	10008670 <_Balloc>
10008e90:	1023883a 	mov	r17,r2
10008e94:	00809c44 	movi	r2,625
10008e98:	88800515 	stw	r2,20(r17)
10008e9c:	8d000415 	stw	r20,16(r17)
10008ea0:	9c401215 	stw	r17,72(r19)
10008ea4:	88000015 	stw	zero,0(r17)
10008ea8:	003fc606 	br	10008dc4 <__alt_data_end+0xf8008dc4>

10008eac <__lshift>:
10008eac:	defff904 	addi	sp,sp,-28
10008eb0:	dd400515 	stw	r21,20(sp)
10008eb4:	dcc00315 	stw	r19,12(sp)
10008eb8:	302bd17a 	srai	r21,r6,5
10008ebc:	2cc00417 	ldw	r19,16(r5)
10008ec0:	28800217 	ldw	r2,8(r5)
10008ec4:	dd000415 	stw	r20,16(sp)
10008ec8:	ace7883a 	add	r19,r21,r19
10008ecc:	dc800215 	stw	r18,8(sp)
10008ed0:	dc400115 	stw	r17,4(sp)
10008ed4:	dc000015 	stw	r16,0(sp)
10008ed8:	dfc00615 	stw	ra,24(sp)
10008edc:	9c000044 	addi	r16,r19,1
10008ee0:	2823883a 	mov	r17,r5
10008ee4:	3029883a 	mov	r20,r6
10008ee8:	2025883a 	mov	r18,r4
10008eec:	29400117 	ldw	r5,4(r5)
10008ef0:	1400030e 	bge	r2,r16,10008f00 <__lshift+0x54>
10008ef4:	1085883a 	add	r2,r2,r2
10008ef8:	29400044 	addi	r5,r5,1
10008efc:	143ffd16 	blt	r2,r16,10008ef4 <__alt_data_end+0xf8008ef4>
10008f00:	9009883a 	mov	r4,r18
10008f04:	00086700 	call	10008670 <_Balloc>
10008f08:	10c00504 	addi	r3,r2,20
10008f0c:	0540070e 	bge	zero,r21,10008f2c <__lshift+0x80>
10008f10:	ad6b883a 	add	r21,r21,r21
10008f14:	ad6b883a 	add	r21,r21,r21
10008f18:	1809883a 	mov	r4,r3
10008f1c:	1d47883a 	add	r3,r3,r21
10008f20:	20000015 	stw	zero,0(r4)
10008f24:	21000104 	addi	r4,r4,4
10008f28:	193ffd1e 	bne	r3,r4,10008f20 <__alt_data_end+0xf8008f20>
10008f2c:	8a000417 	ldw	r8,16(r17)
10008f30:	89000504 	addi	r4,r17,20
10008f34:	a18007cc 	andi	r6,r20,31
10008f38:	4211883a 	add	r8,r8,r8
10008f3c:	4211883a 	add	r8,r8,r8
10008f40:	2211883a 	add	r8,r4,r8
10008f44:	30002326 	beq	r6,zero,10008fd4 <__lshift+0x128>
10008f48:	02400804 	movi	r9,32
10008f4c:	4993c83a 	sub	r9,r9,r6
10008f50:	000b883a 	mov	r5,zero
10008f54:	21c00017 	ldw	r7,0(r4)
10008f58:	1815883a 	mov	r10,r3
10008f5c:	18c00104 	addi	r3,r3,4
10008f60:	398e983a 	sll	r7,r7,r6
10008f64:	21000104 	addi	r4,r4,4
10008f68:	394ab03a 	or	r5,r7,r5
10008f6c:	197fff15 	stw	r5,-4(r3)
10008f70:	217fff17 	ldw	r5,-4(r4)
10008f74:	2a4ad83a 	srl	r5,r5,r9
10008f78:	223ff636 	bltu	r4,r8,10008f54 <__alt_data_end+0xf8008f54>
10008f7c:	51400115 	stw	r5,4(r10)
10008f80:	28001a1e 	bne	r5,zero,10008fec <__lshift+0x140>
10008f84:	843fffc4 	addi	r16,r16,-1
10008f88:	14000415 	stw	r16,16(r2)
10008f8c:	88000826 	beq	r17,zero,10008fb0 <__lshift+0x104>
10008f90:	89000117 	ldw	r4,4(r17)
10008f94:	90c01317 	ldw	r3,76(r18)
10008f98:	2109883a 	add	r4,r4,r4
10008f9c:	2109883a 	add	r4,r4,r4
10008fa0:	1907883a 	add	r3,r3,r4
10008fa4:	19000017 	ldw	r4,0(r3)
10008fa8:	89000015 	stw	r4,0(r17)
10008fac:	1c400015 	stw	r17,0(r3)
10008fb0:	dfc00617 	ldw	ra,24(sp)
10008fb4:	dd400517 	ldw	r21,20(sp)
10008fb8:	dd000417 	ldw	r20,16(sp)
10008fbc:	dcc00317 	ldw	r19,12(sp)
10008fc0:	dc800217 	ldw	r18,8(sp)
10008fc4:	dc400117 	ldw	r17,4(sp)
10008fc8:	dc000017 	ldw	r16,0(sp)
10008fcc:	dec00704 	addi	sp,sp,28
10008fd0:	f800283a 	ret
10008fd4:	21400017 	ldw	r5,0(r4)
10008fd8:	18c00104 	addi	r3,r3,4
10008fdc:	21000104 	addi	r4,r4,4
10008fe0:	197fff15 	stw	r5,-4(r3)
10008fe4:	223ffb36 	bltu	r4,r8,10008fd4 <__alt_data_end+0xf8008fd4>
10008fe8:	003fe606 	br	10008f84 <__alt_data_end+0xf8008f84>
10008fec:	9c000084 	addi	r16,r19,2
10008ff0:	003fe406 	br	10008f84 <__alt_data_end+0xf8008f84>

10008ff4 <__mcmp>:
10008ff4:	20800417 	ldw	r2,16(r4)
10008ff8:	28c00417 	ldw	r3,16(r5)
10008ffc:	10c5c83a 	sub	r2,r2,r3
10009000:	1000111e 	bne	r2,zero,10009048 <__mcmp+0x54>
10009004:	18c7883a 	add	r3,r3,r3
10009008:	18c7883a 	add	r3,r3,r3
1000900c:	21000504 	addi	r4,r4,20
10009010:	29400504 	addi	r5,r5,20
10009014:	20c5883a 	add	r2,r4,r3
10009018:	28cb883a 	add	r5,r5,r3
1000901c:	00000106 	br	10009024 <__mcmp+0x30>
10009020:	20800a2e 	bgeu	r4,r2,1000904c <__mcmp+0x58>
10009024:	10bfff04 	addi	r2,r2,-4
10009028:	297fff04 	addi	r5,r5,-4
1000902c:	11800017 	ldw	r6,0(r2)
10009030:	28c00017 	ldw	r3,0(r5)
10009034:	30fffa26 	beq	r6,r3,10009020 <__alt_data_end+0xf8009020>
10009038:	30c00236 	bltu	r6,r3,10009044 <__mcmp+0x50>
1000903c:	00800044 	movi	r2,1
10009040:	f800283a 	ret
10009044:	00bfffc4 	movi	r2,-1
10009048:	f800283a 	ret
1000904c:	0005883a 	mov	r2,zero
10009050:	f800283a 	ret

10009054 <__mdiff>:
10009054:	28c00417 	ldw	r3,16(r5)
10009058:	30800417 	ldw	r2,16(r6)
1000905c:	defffa04 	addi	sp,sp,-24
10009060:	dcc00315 	stw	r19,12(sp)
10009064:	dc800215 	stw	r18,8(sp)
10009068:	dfc00515 	stw	ra,20(sp)
1000906c:	dd000415 	stw	r20,16(sp)
10009070:	dc400115 	stw	r17,4(sp)
10009074:	dc000015 	stw	r16,0(sp)
10009078:	1887c83a 	sub	r3,r3,r2
1000907c:	2825883a 	mov	r18,r5
10009080:	3027883a 	mov	r19,r6
10009084:	1800141e 	bne	r3,zero,100090d8 <__mdiff+0x84>
10009088:	1085883a 	add	r2,r2,r2
1000908c:	1085883a 	add	r2,r2,r2
10009090:	2a000504 	addi	r8,r5,20
10009094:	34000504 	addi	r16,r6,20
10009098:	4087883a 	add	r3,r8,r2
1000909c:	8085883a 	add	r2,r16,r2
100090a0:	00000106 	br	100090a8 <__mdiff+0x54>
100090a4:	40c0592e 	bgeu	r8,r3,1000920c <__mdiff+0x1b8>
100090a8:	18ffff04 	addi	r3,r3,-4
100090ac:	10bfff04 	addi	r2,r2,-4
100090b0:	19c00017 	ldw	r7,0(r3)
100090b4:	11400017 	ldw	r5,0(r2)
100090b8:	397ffa26 	beq	r7,r5,100090a4 <__alt_data_end+0xf80090a4>
100090bc:	3940592e 	bgeu	r7,r5,10009224 <__mdiff+0x1d0>
100090c0:	9005883a 	mov	r2,r18
100090c4:	4023883a 	mov	r17,r8
100090c8:	9825883a 	mov	r18,r19
100090cc:	05000044 	movi	r20,1
100090d0:	1027883a 	mov	r19,r2
100090d4:	00000406 	br	100090e8 <__mdiff+0x94>
100090d8:	18005616 	blt	r3,zero,10009234 <__mdiff+0x1e0>
100090dc:	34400504 	addi	r17,r6,20
100090e0:	2c000504 	addi	r16,r5,20
100090e4:	0029883a 	mov	r20,zero
100090e8:	91400117 	ldw	r5,4(r18)
100090ec:	00086700 	call	10008670 <_Balloc>
100090f0:	92400417 	ldw	r9,16(r18)
100090f4:	9b000417 	ldw	r12,16(r19)
100090f8:	12c00504 	addi	r11,r2,20
100090fc:	4a51883a 	add	r8,r9,r9
10009100:	6319883a 	add	r12,r12,r12
10009104:	4211883a 	add	r8,r8,r8
10009108:	6319883a 	add	r12,r12,r12
1000910c:	15000315 	stw	r20,12(r2)
10009110:	8211883a 	add	r8,r16,r8
10009114:	8b19883a 	add	r12,r17,r12
10009118:	0007883a 	mov	r3,zero
1000911c:	81400017 	ldw	r5,0(r16)
10009120:	89c00017 	ldw	r7,0(r17)
10009124:	59800104 	addi	r6,r11,4
10009128:	293fffcc 	andi	r4,r5,65535
1000912c:	20c7883a 	add	r3,r4,r3
10009130:	393fffcc 	andi	r4,r7,65535
10009134:	1909c83a 	sub	r4,r3,r4
10009138:	280ad43a 	srli	r5,r5,16
1000913c:	380ed43a 	srli	r7,r7,16
10009140:	2007d43a 	srai	r3,r4,16
10009144:	213fffcc 	andi	r4,r4,65535
10009148:	29cbc83a 	sub	r5,r5,r7
1000914c:	28c7883a 	add	r3,r5,r3
10009150:	180a943a 	slli	r5,r3,16
10009154:	8c400104 	addi	r17,r17,4
10009158:	84000104 	addi	r16,r16,4
1000915c:	2908b03a 	or	r4,r5,r4
10009160:	59000015 	stw	r4,0(r11)
10009164:	1807d43a 	srai	r3,r3,16
10009168:	3015883a 	mov	r10,r6
1000916c:	3017883a 	mov	r11,r6
10009170:	8b3fea36 	bltu	r17,r12,1000911c <__alt_data_end+0xf800911c>
10009174:	8200162e 	bgeu	r16,r8,100091d0 <__mdiff+0x17c>
10009178:	8017883a 	mov	r11,r16
1000917c:	59400017 	ldw	r5,0(r11)
10009180:	31800104 	addi	r6,r6,4
10009184:	5ac00104 	addi	r11,r11,4
10009188:	293fffcc 	andi	r4,r5,65535
1000918c:	20c7883a 	add	r3,r4,r3
10009190:	280ed43a 	srli	r7,r5,16
10009194:	180bd43a 	srai	r5,r3,16
10009198:	193fffcc 	andi	r4,r3,65535
1000919c:	3947883a 	add	r3,r7,r5
100091a0:	180a943a 	slli	r5,r3,16
100091a4:	1807d43a 	srai	r3,r3,16
100091a8:	2908b03a 	or	r4,r5,r4
100091ac:	313fff15 	stw	r4,-4(r6)
100091b0:	5a3ff236 	bltu	r11,r8,1000917c <__alt_data_end+0xf800917c>
100091b4:	0406303a 	nor	r3,zero,r16
100091b8:	1a07883a 	add	r3,r3,r8
100091bc:	1806d0ba 	srli	r3,r3,2
100091c0:	18c00044 	addi	r3,r3,1
100091c4:	18c7883a 	add	r3,r3,r3
100091c8:	18c7883a 	add	r3,r3,r3
100091cc:	50d5883a 	add	r10,r10,r3
100091d0:	50ffff04 	addi	r3,r10,-4
100091d4:	2000041e 	bne	r4,zero,100091e8 <__mdiff+0x194>
100091d8:	18ffff04 	addi	r3,r3,-4
100091dc:	19000017 	ldw	r4,0(r3)
100091e0:	4a7fffc4 	addi	r9,r9,-1
100091e4:	203ffc26 	beq	r4,zero,100091d8 <__alt_data_end+0xf80091d8>
100091e8:	12400415 	stw	r9,16(r2)
100091ec:	dfc00517 	ldw	ra,20(sp)
100091f0:	dd000417 	ldw	r20,16(sp)
100091f4:	dcc00317 	ldw	r19,12(sp)
100091f8:	dc800217 	ldw	r18,8(sp)
100091fc:	dc400117 	ldw	r17,4(sp)
10009200:	dc000017 	ldw	r16,0(sp)
10009204:	dec00604 	addi	sp,sp,24
10009208:	f800283a 	ret
1000920c:	000b883a 	mov	r5,zero
10009210:	00086700 	call	10008670 <_Balloc>
10009214:	00c00044 	movi	r3,1
10009218:	10c00415 	stw	r3,16(r2)
1000921c:	10000515 	stw	zero,20(r2)
10009220:	003ff206 	br	100091ec <__alt_data_end+0xf80091ec>
10009224:	8023883a 	mov	r17,r16
10009228:	0029883a 	mov	r20,zero
1000922c:	4021883a 	mov	r16,r8
10009230:	003fad06 	br	100090e8 <__alt_data_end+0xf80090e8>
10009234:	9005883a 	mov	r2,r18
10009238:	94400504 	addi	r17,r18,20
1000923c:	9c000504 	addi	r16,r19,20
10009240:	9825883a 	mov	r18,r19
10009244:	05000044 	movi	r20,1
10009248:	1027883a 	mov	r19,r2
1000924c:	003fa606 	br	100090e8 <__alt_data_end+0xf80090e8>

10009250 <__ulp>:
10009250:	295ffc2c 	andhi	r5,r5,32752
10009254:	00bf3034 	movhi	r2,64704
10009258:	2887883a 	add	r3,r5,r2
1000925c:	00c0020e 	bge	zero,r3,10009268 <__ulp+0x18>
10009260:	0005883a 	mov	r2,zero
10009264:	f800283a 	ret
10009268:	00c7c83a 	sub	r3,zero,r3
1000926c:	1807d53a 	srai	r3,r3,20
10009270:	008004c4 	movi	r2,19
10009274:	10c00b0e 	bge	r2,r3,100092a4 <__ulp+0x54>
10009278:	18bffb04 	addi	r2,r3,-20
1000927c:	01000784 	movi	r4,30
10009280:	0007883a 	mov	r3,zero
10009284:	20800516 	blt	r4,r2,1000929c <__ulp+0x4c>
10009288:	010007c4 	movi	r4,31
1000928c:	2089c83a 	sub	r4,r4,r2
10009290:	00800044 	movi	r2,1
10009294:	1104983a 	sll	r2,r2,r4
10009298:	f800283a 	ret
1000929c:	00800044 	movi	r2,1
100092a0:	f800283a 	ret
100092a4:	01400234 	movhi	r5,8
100092a8:	28c7d83a 	sra	r3,r5,r3
100092ac:	0005883a 	mov	r2,zero
100092b0:	f800283a 	ret

100092b4 <__b2d>:
100092b4:	defffa04 	addi	sp,sp,-24
100092b8:	dc000015 	stw	r16,0(sp)
100092bc:	24000417 	ldw	r16,16(r4)
100092c0:	dc400115 	stw	r17,4(sp)
100092c4:	24400504 	addi	r17,r4,20
100092c8:	8421883a 	add	r16,r16,r16
100092cc:	8421883a 	add	r16,r16,r16
100092d0:	8c21883a 	add	r16,r17,r16
100092d4:	dc800215 	stw	r18,8(sp)
100092d8:	84bfff17 	ldw	r18,-4(r16)
100092dc:	dd000415 	stw	r20,16(sp)
100092e0:	dcc00315 	stw	r19,12(sp)
100092e4:	9009883a 	mov	r4,r18
100092e8:	2829883a 	mov	r20,r5
100092ec:	dfc00515 	stw	ra,20(sp)
100092f0:	000898c0 	call	1000898c <__hi0bits>
100092f4:	00c00804 	movi	r3,32
100092f8:	1889c83a 	sub	r4,r3,r2
100092fc:	a1000015 	stw	r4,0(r20)
10009300:	01000284 	movi	r4,10
10009304:	84ffff04 	addi	r19,r16,-4
10009308:	20801216 	blt	r4,r2,10009354 <__b2d+0xa0>
1000930c:	018002c4 	movi	r6,11
10009310:	308dc83a 	sub	r6,r6,r2
10009314:	9186d83a 	srl	r3,r18,r6
10009318:	18cffc34 	orhi	r3,r3,16368
1000931c:	8cc0212e 	bgeu	r17,r19,100093a4 <__b2d+0xf0>
10009320:	813ffe17 	ldw	r4,-8(r16)
10009324:	218cd83a 	srl	r6,r4,r6
10009328:	10800544 	addi	r2,r2,21
1000932c:	9084983a 	sll	r2,r18,r2
10009330:	1184b03a 	or	r2,r2,r6
10009334:	dfc00517 	ldw	ra,20(sp)
10009338:	dd000417 	ldw	r20,16(sp)
1000933c:	dcc00317 	ldw	r19,12(sp)
10009340:	dc800217 	ldw	r18,8(sp)
10009344:	dc400117 	ldw	r17,4(sp)
10009348:	dc000017 	ldw	r16,0(sp)
1000934c:	dec00604 	addi	sp,sp,24
10009350:	f800283a 	ret
10009354:	8cc00f2e 	bgeu	r17,r19,10009394 <__b2d+0xe0>
10009358:	117ffd44 	addi	r5,r2,-11
1000935c:	80bffe17 	ldw	r2,-8(r16)
10009360:	28000e26 	beq	r5,zero,1000939c <__b2d+0xe8>
10009364:	1949c83a 	sub	r4,r3,r5
10009368:	9164983a 	sll	r18,r18,r5
1000936c:	1106d83a 	srl	r3,r2,r4
10009370:	81bffe04 	addi	r6,r16,-8
10009374:	948ffc34 	orhi	r18,r18,16368
10009378:	90c6b03a 	or	r3,r18,r3
1000937c:	89800e2e 	bgeu	r17,r6,100093b8 <__b2d+0x104>
10009380:	81bffd17 	ldw	r6,-12(r16)
10009384:	1144983a 	sll	r2,r2,r5
10009388:	310ad83a 	srl	r5,r6,r4
1000938c:	2884b03a 	or	r2,r5,r2
10009390:	003fe806 	br	10009334 <__alt_data_end+0xf8009334>
10009394:	10bffd44 	addi	r2,r2,-11
10009398:	1000041e 	bne	r2,zero,100093ac <__b2d+0xf8>
1000939c:	90cffc34 	orhi	r3,r18,16368
100093a0:	003fe406 	br	10009334 <__alt_data_end+0xf8009334>
100093a4:	000d883a 	mov	r6,zero
100093a8:	003fdf06 	br	10009328 <__alt_data_end+0xf8009328>
100093ac:	90a4983a 	sll	r18,r18,r2
100093b0:	0005883a 	mov	r2,zero
100093b4:	003ff906 	br	1000939c <__alt_data_end+0xf800939c>
100093b8:	1144983a 	sll	r2,r2,r5
100093bc:	003fdd06 	br	10009334 <__alt_data_end+0xf8009334>

100093c0 <__d2b>:
100093c0:	defff804 	addi	sp,sp,-32
100093c4:	dc000215 	stw	r16,8(sp)
100093c8:	3021883a 	mov	r16,r6
100093cc:	dc400315 	stw	r17,12(sp)
100093d0:	8022907a 	slli	r17,r16,1
100093d4:	dd000615 	stw	r20,24(sp)
100093d8:	2829883a 	mov	r20,r5
100093dc:	01400044 	movi	r5,1
100093e0:	dcc00515 	stw	r19,20(sp)
100093e4:	dc800415 	stw	r18,16(sp)
100093e8:	dfc00715 	stw	ra,28(sp)
100093ec:	3825883a 	mov	r18,r7
100093f0:	8822d57a 	srli	r17,r17,21
100093f4:	00086700 	call	10008670 <_Balloc>
100093f8:	1027883a 	mov	r19,r2
100093fc:	00800434 	movhi	r2,16
10009400:	10bfffc4 	addi	r2,r2,-1
10009404:	808c703a 	and	r6,r16,r2
10009408:	88000126 	beq	r17,zero,10009410 <__d2b+0x50>
1000940c:	31800434 	orhi	r6,r6,16
10009410:	d9800015 	stw	r6,0(sp)
10009414:	a0002426 	beq	r20,zero,100094a8 <__d2b+0xe8>
10009418:	d9000104 	addi	r4,sp,4
1000941c:	dd000115 	stw	r20,4(sp)
10009420:	00089f40 	call	100089f4 <__lo0bits>
10009424:	d8c00017 	ldw	r3,0(sp)
10009428:	10002f1e 	bne	r2,zero,100094e8 <__d2b+0x128>
1000942c:	d9000117 	ldw	r4,4(sp)
10009430:	99000515 	stw	r4,20(r19)
10009434:	1821003a 	cmpeq	r16,r3,zero
10009438:	01000084 	movi	r4,2
1000943c:	2421c83a 	sub	r16,r4,r16
10009440:	98c00615 	stw	r3,24(r19)
10009444:	9c000415 	stw	r16,16(r19)
10009448:	88001f1e 	bne	r17,zero,100094c8 <__d2b+0x108>
1000944c:	10bef384 	addi	r2,r2,-1074
10009450:	90800015 	stw	r2,0(r18)
10009454:	00900034 	movhi	r2,16384
10009458:	10bfffc4 	addi	r2,r2,-1
1000945c:	8085883a 	add	r2,r16,r2
10009460:	1085883a 	add	r2,r2,r2
10009464:	1085883a 	add	r2,r2,r2
10009468:	9885883a 	add	r2,r19,r2
1000946c:	11000517 	ldw	r4,20(r2)
10009470:	8020917a 	slli	r16,r16,5
10009474:	000898c0 	call	1000898c <__hi0bits>
10009478:	d8c00817 	ldw	r3,32(sp)
1000947c:	8085c83a 	sub	r2,r16,r2
10009480:	18800015 	stw	r2,0(r3)
10009484:	9805883a 	mov	r2,r19
10009488:	dfc00717 	ldw	ra,28(sp)
1000948c:	dd000617 	ldw	r20,24(sp)
10009490:	dcc00517 	ldw	r19,20(sp)
10009494:	dc800417 	ldw	r18,16(sp)
10009498:	dc400317 	ldw	r17,12(sp)
1000949c:	dc000217 	ldw	r16,8(sp)
100094a0:	dec00804 	addi	sp,sp,32
100094a4:	f800283a 	ret
100094a8:	d809883a 	mov	r4,sp
100094ac:	00089f40 	call	100089f4 <__lo0bits>
100094b0:	d8c00017 	ldw	r3,0(sp)
100094b4:	04000044 	movi	r16,1
100094b8:	9c000415 	stw	r16,16(r19)
100094bc:	98c00515 	stw	r3,20(r19)
100094c0:	10800804 	addi	r2,r2,32
100094c4:	883fe126 	beq	r17,zero,1000944c <__alt_data_end+0xf800944c>
100094c8:	00c00d44 	movi	r3,53
100094cc:	8c7ef344 	addi	r17,r17,-1075
100094d0:	88a3883a 	add	r17,r17,r2
100094d4:	1885c83a 	sub	r2,r3,r2
100094d8:	d8c00817 	ldw	r3,32(sp)
100094dc:	94400015 	stw	r17,0(r18)
100094e0:	18800015 	stw	r2,0(r3)
100094e4:	003fe706 	br	10009484 <__alt_data_end+0xf8009484>
100094e8:	01000804 	movi	r4,32
100094ec:	2089c83a 	sub	r4,r4,r2
100094f0:	1908983a 	sll	r4,r3,r4
100094f4:	d9400117 	ldw	r5,4(sp)
100094f8:	1886d83a 	srl	r3,r3,r2
100094fc:	2148b03a 	or	r4,r4,r5
10009500:	99000515 	stw	r4,20(r19)
10009504:	d8c00015 	stw	r3,0(sp)
10009508:	003fca06 	br	10009434 <__alt_data_end+0xf8009434>

1000950c <__ratio>:
1000950c:	defff904 	addi	sp,sp,-28
10009510:	dc400315 	stw	r17,12(sp)
10009514:	2823883a 	mov	r17,r5
10009518:	d9400104 	addi	r5,sp,4
1000951c:	dfc00615 	stw	ra,24(sp)
10009520:	dcc00515 	stw	r19,20(sp)
10009524:	dc800415 	stw	r18,16(sp)
10009528:	2027883a 	mov	r19,r4
1000952c:	dc000215 	stw	r16,8(sp)
10009530:	00092b40 	call	100092b4 <__b2d>
10009534:	d80b883a 	mov	r5,sp
10009538:	8809883a 	mov	r4,r17
1000953c:	1025883a 	mov	r18,r2
10009540:	1821883a 	mov	r16,r3
10009544:	00092b40 	call	100092b4 <__b2d>
10009548:	8a000417 	ldw	r8,16(r17)
1000954c:	99000417 	ldw	r4,16(r19)
10009550:	d9400117 	ldw	r5,4(sp)
10009554:	2209c83a 	sub	r4,r4,r8
10009558:	2010917a 	slli	r8,r4,5
1000955c:	d9000017 	ldw	r4,0(sp)
10009560:	2909c83a 	sub	r4,r5,r4
10009564:	4109883a 	add	r4,r8,r4
10009568:	01000e0e 	bge	zero,r4,100095a4 <__ratio+0x98>
1000956c:	2008953a 	slli	r4,r4,20
10009570:	2421883a 	add	r16,r4,r16
10009574:	100d883a 	mov	r6,r2
10009578:	180f883a 	mov	r7,r3
1000957c:	9009883a 	mov	r4,r18
10009580:	800b883a 	mov	r5,r16
10009584:	000d5500 	call	1000d550 <__divdf3>
10009588:	dfc00617 	ldw	ra,24(sp)
1000958c:	dcc00517 	ldw	r19,20(sp)
10009590:	dc800417 	ldw	r18,16(sp)
10009594:	dc400317 	ldw	r17,12(sp)
10009598:	dc000217 	ldw	r16,8(sp)
1000959c:	dec00704 	addi	sp,sp,28
100095a0:	f800283a 	ret
100095a4:	2008953a 	slli	r4,r4,20
100095a8:	1907c83a 	sub	r3,r3,r4
100095ac:	003ff106 	br	10009574 <__alt_data_end+0xf8009574>

100095b0 <_mprec_log10>:
100095b0:	defffe04 	addi	sp,sp,-8
100095b4:	dc000015 	stw	r16,0(sp)
100095b8:	dfc00115 	stw	ra,4(sp)
100095bc:	008005c4 	movi	r2,23
100095c0:	2021883a 	mov	r16,r4
100095c4:	11000d0e 	bge	r2,r4,100095fc <_mprec_log10+0x4c>
100095c8:	0005883a 	mov	r2,zero
100095cc:	00cffc34 	movhi	r3,16368
100095d0:	843fffc4 	addi	r16,r16,-1
100095d4:	000d883a 	mov	r6,zero
100095d8:	01d00934 	movhi	r7,16420
100095dc:	1009883a 	mov	r4,r2
100095e0:	180b883a 	mov	r5,r3
100095e4:	000e1780 	call	1000e178 <__muldf3>
100095e8:	803ff91e 	bne	r16,zero,100095d0 <__alt_data_end+0xf80095d0>
100095ec:	dfc00117 	ldw	ra,4(sp)
100095f0:	dc000017 	ldw	r16,0(sp)
100095f4:	dec00204 	addi	sp,sp,8
100095f8:	f800283a 	ret
100095fc:	202090fa 	slli	r16,r4,3
10009600:	00840074 	movhi	r2,4097
10009604:	1089ff04 	addi	r2,r2,10236
10009608:	1421883a 	add	r16,r2,r16
1000960c:	80800017 	ldw	r2,0(r16)
10009610:	80c00117 	ldw	r3,4(r16)
10009614:	dfc00117 	ldw	ra,4(sp)
10009618:	dc000017 	ldw	r16,0(sp)
1000961c:	dec00204 	addi	sp,sp,8
10009620:	f800283a 	ret

10009624 <__copybits>:
10009624:	297fffc4 	addi	r5,r5,-1
10009628:	280fd17a 	srai	r7,r5,5
1000962c:	30c00417 	ldw	r3,16(r6)
10009630:	30800504 	addi	r2,r6,20
10009634:	39c00044 	addi	r7,r7,1
10009638:	18c7883a 	add	r3,r3,r3
1000963c:	39cf883a 	add	r7,r7,r7
10009640:	18c7883a 	add	r3,r3,r3
10009644:	39cf883a 	add	r7,r7,r7
10009648:	10c7883a 	add	r3,r2,r3
1000964c:	21cf883a 	add	r7,r4,r7
10009650:	10c00d2e 	bgeu	r2,r3,10009688 <__copybits+0x64>
10009654:	200b883a 	mov	r5,r4
10009658:	12000017 	ldw	r8,0(r2)
1000965c:	29400104 	addi	r5,r5,4
10009660:	10800104 	addi	r2,r2,4
10009664:	2a3fff15 	stw	r8,-4(r5)
10009668:	10fffb36 	bltu	r2,r3,10009658 <__alt_data_end+0xf8009658>
1000966c:	1985c83a 	sub	r2,r3,r6
10009670:	10bffac4 	addi	r2,r2,-21
10009674:	1004d0ba 	srli	r2,r2,2
10009678:	10800044 	addi	r2,r2,1
1000967c:	1085883a 	add	r2,r2,r2
10009680:	1085883a 	add	r2,r2,r2
10009684:	2089883a 	add	r4,r4,r2
10009688:	21c0032e 	bgeu	r4,r7,10009698 <__copybits+0x74>
1000968c:	20000015 	stw	zero,0(r4)
10009690:	21000104 	addi	r4,r4,4
10009694:	21fffd36 	bltu	r4,r7,1000968c <__alt_data_end+0xf800968c>
10009698:	f800283a 	ret

1000969c <__any_on>:
1000969c:	20c00417 	ldw	r3,16(r4)
100096a0:	2805d17a 	srai	r2,r5,5
100096a4:	21000504 	addi	r4,r4,20
100096a8:	18800d0e 	bge	r3,r2,100096e0 <__any_on+0x44>
100096ac:	18c7883a 	add	r3,r3,r3
100096b0:	18c7883a 	add	r3,r3,r3
100096b4:	20c7883a 	add	r3,r4,r3
100096b8:	20c0192e 	bgeu	r4,r3,10009720 <__any_on+0x84>
100096bc:	18bfff17 	ldw	r2,-4(r3)
100096c0:	18ffff04 	addi	r3,r3,-4
100096c4:	1000041e 	bne	r2,zero,100096d8 <__any_on+0x3c>
100096c8:	20c0142e 	bgeu	r4,r3,1000971c <__any_on+0x80>
100096cc:	18ffff04 	addi	r3,r3,-4
100096d0:	19400017 	ldw	r5,0(r3)
100096d4:	283ffc26 	beq	r5,zero,100096c8 <__alt_data_end+0xf80096c8>
100096d8:	00800044 	movi	r2,1
100096dc:	f800283a 	ret
100096e0:	10c00a0e 	bge	r2,r3,1000970c <__any_on+0x70>
100096e4:	1085883a 	add	r2,r2,r2
100096e8:	1085883a 	add	r2,r2,r2
100096ec:	294007cc 	andi	r5,r5,31
100096f0:	2087883a 	add	r3,r4,r2
100096f4:	283ff026 	beq	r5,zero,100096b8 <__alt_data_end+0xf80096b8>
100096f8:	19800017 	ldw	r6,0(r3)
100096fc:	3144d83a 	srl	r2,r6,r5
10009700:	114a983a 	sll	r5,r2,r5
10009704:	317ff41e 	bne	r6,r5,100096d8 <__alt_data_end+0xf80096d8>
10009708:	003feb06 	br	100096b8 <__alt_data_end+0xf80096b8>
1000970c:	1085883a 	add	r2,r2,r2
10009710:	1085883a 	add	r2,r2,r2
10009714:	2087883a 	add	r3,r4,r2
10009718:	003fe706 	br	100096b8 <__alt_data_end+0xf80096b8>
1000971c:	f800283a 	ret
10009720:	0005883a 	mov	r2,zero
10009724:	f800283a 	ret

10009728 <_realloc_r>:
10009728:	defff604 	addi	sp,sp,-40
1000972c:	dc800215 	stw	r18,8(sp)
10009730:	dfc00915 	stw	ra,36(sp)
10009734:	df000815 	stw	fp,32(sp)
10009738:	ddc00715 	stw	r23,28(sp)
1000973c:	dd800615 	stw	r22,24(sp)
10009740:	dd400515 	stw	r21,20(sp)
10009744:	dd000415 	stw	r20,16(sp)
10009748:	dcc00315 	stw	r19,12(sp)
1000974c:	dc400115 	stw	r17,4(sp)
10009750:	dc000015 	stw	r16,0(sp)
10009754:	3025883a 	mov	r18,r6
10009758:	2800b726 	beq	r5,zero,10009a38 <_realloc_r+0x310>
1000975c:	282b883a 	mov	r21,r5
10009760:	2029883a 	mov	r20,r4
10009764:	000fcd80 	call	1000fcd8 <__malloc_lock>
10009768:	a8bfff17 	ldw	r2,-4(r21)
1000976c:	043fff04 	movi	r16,-4
10009770:	90c002c4 	addi	r3,r18,11
10009774:	01000584 	movi	r4,22
10009778:	acfffe04 	addi	r19,r21,-8
1000977c:	1420703a 	and	r16,r2,r16
10009780:	20c0332e 	bgeu	r4,r3,10009850 <_realloc_r+0x128>
10009784:	047ffe04 	movi	r17,-8
10009788:	1c62703a 	and	r17,r3,r17
1000978c:	8807883a 	mov	r3,r17
10009790:	88005816 	blt	r17,zero,100098f4 <_realloc_r+0x1cc>
10009794:	8c805736 	bltu	r17,r18,100098f4 <_realloc_r+0x1cc>
10009798:	80c0300e 	bge	r16,r3,1000985c <_realloc_r+0x134>
1000979c:	07040074 	movhi	fp,4097
100097a0:	e70bad04 	addi	fp,fp,11956
100097a4:	e1c00217 	ldw	r7,8(fp)
100097a8:	9c09883a 	add	r4,r19,r16
100097ac:	22000117 	ldw	r8,4(r4)
100097b0:	21c06326 	beq	r4,r7,10009940 <_realloc_r+0x218>
100097b4:	017fff84 	movi	r5,-2
100097b8:	414a703a 	and	r5,r8,r5
100097bc:	214b883a 	add	r5,r4,r5
100097c0:	29800117 	ldw	r6,4(r5)
100097c4:	3180004c 	andi	r6,r6,1
100097c8:	30003f26 	beq	r6,zero,100098c8 <_realloc_r+0x1a0>
100097cc:	1080004c 	andi	r2,r2,1
100097d0:	10008326 	beq	r2,zero,100099e0 <_realloc_r+0x2b8>
100097d4:	900b883a 	mov	r5,r18
100097d8:	a009883a 	mov	r4,r20
100097dc:	00079b40 	call	100079b4 <_malloc_r>
100097e0:	1025883a 	mov	r18,r2
100097e4:	10011e26 	beq	r2,zero,10009c60 <_realloc_r+0x538>
100097e8:	a93fff17 	ldw	r4,-4(r21)
100097ec:	10fffe04 	addi	r3,r2,-8
100097f0:	00bfff84 	movi	r2,-2
100097f4:	2084703a 	and	r2,r4,r2
100097f8:	9885883a 	add	r2,r19,r2
100097fc:	1880ee26 	beq	r3,r2,10009bb8 <_realloc_r+0x490>
10009800:	81bfff04 	addi	r6,r16,-4
10009804:	00800904 	movi	r2,36
10009808:	1180b836 	bltu	r2,r6,10009aec <_realloc_r+0x3c4>
1000980c:	00c004c4 	movi	r3,19
10009810:	19809636 	bltu	r3,r6,10009a6c <_realloc_r+0x344>
10009814:	9005883a 	mov	r2,r18
10009818:	a807883a 	mov	r3,r21
1000981c:	19000017 	ldw	r4,0(r3)
10009820:	11000015 	stw	r4,0(r2)
10009824:	19000117 	ldw	r4,4(r3)
10009828:	11000115 	stw	r4,4(r2)
1000982c:	18c00217 	ldw	r3,8(r3)
10009830:	10c00215 	stw	r3,8(r2)
10009834:	a80b883a 	mov	r5,r21
10009838:	a009883a 	mov	r4,r20
1000983c:	0006d600 	call	10006d60 <_free_r>
10009840:	a009883a 	mov	r4,r20
10009844:	000fcfc0 	call	1000fcfc <__malloc_unlock>
10009848:	9005883a 	mov	r2,r18
1000984c:	00001206 	br	10009898 <_realloc_r+0x170>
10009850:	00c00404 	movi	r3,16
10009854:	1823883a 	mov	r17,r3
10009858:	003fce06 	br	10009794 <__alt_data_end+0xf8009794>
1000985c:	a825883a 	mov	r18,r21
10009860:	8445c83a 	sub	r2,r16,r17
10009864:	00c003c4 	movi	r3,15
10009868:	18802636 	bltu	r3,r2,10009904 <_realloc_r+0x1dc>
1000986c:	99800117 	ldw	r6,4(r19)
10009870:	9c07883a 	add	r3,r19,r16
10009874:	3180004c 	andi	r6,r6,1
10009878:	3420b03a 	or	r16,r6,r16
1000987c:	9c000115 	stw	r16,4(r19)
10009880:	18800117 	ldw	r2,4(r3)
10009884:	10800054 	ori	r2,r2,1
10009888:	18800115 	stw	r2,4(r3)
1000988c:	a009883a 	mov	r4,r20
10009890:	000fcfc0 	call	1000fcfc <__malloc_unlock>
10009894:	9005883a 	mov	r2,r18
10009898:	dfc00917 	ldw	ra,36(sp)
1000989c:	df000817 	ldw	fp,32(sp)
100098a0:	ddc00717 	ldw	r23,28(sp)
100098a4:	dd800617 	ldw	r22,24(sp)
100098a8:	dd400517 	ldw	r21,20(sp)
100098ac:	dd000417 	ldw	r20,16(sp)
100098b0:	dcc00317 	ldw	r19,12(sp)
100098b4:	dc800217 	ldw	r18,8(sp)
100098b8:	dc400117 	ldw	r17,4(sp)
100098bc:	dc000017 	ldw	r16,0(sp)
100098c0:	dec00a04 	addi	sp,sp,40
100098c4:	f800283a 	ret
100098c8:	017fff04 	movi	r5,-4
100098cc:	414a703a 	and	r5,r8,r5
100098d0:	814d883a 	add	r6,r16,r5
100098d4:	30c01f16 	blt	r6,r3,10009954 <_realloc_r+0x22c>
100098d8:	20800317 	ldw	r2,12(r4)
100098dc:	20c00217 	ldw	r3,8(r4)
100098e0:	a825883a 	mov	r18,r21
100098e4:	3021883a 	mov	r16,r6
100098e8:	18800315 	stw	r2,12(r3)
100098ec:	10c00215 	stw	r3,8(r2)
100098f0:	003fdb06 	br	10009860 <__alt_data_end+0xf8009860>
100098f4:	00800304 	movi	r2,12
100098f8:	a0800015 	stw	r2,0(r20)
100098fc:	0005883a 	mov	r2,zero
10009900:	003fe506 	br	10009898 <__alt_data_end+0xf8009898>
10009904:	98c00117 	ldw	r3,4(r19)
10009908:	9c4b883a 	add	r5,r19,r17
1000990c:	11000054 	ori	r4,r2,1
10009910:	18c0004c 	andi	r3,r3,1
10009914:	1c62b03a 	or	r17,r3,r17
10009918:	9c400115 	stw	r17,4(r19)
1000991c:	29000115 	stw	r4,4(r5)
10009920:	2885883a 	add	r2,r5,r2
10009924:	10c00117 	ldw	r3,4(r2)
10009928:	29400204 	addi	r5,r5,8
1000992c:	a009883a 	mov	r4,r20
10009930:	18c00054 	ori	r3,r3,1
10009934:	10c00115 	stw	r3,4(r2)
10009938:	0006d600 	call	10006d60 <_free_r>
1000993c:	003fd306 	br	1000988c <__alt_data_end+0xf800988c>
10009940:	017fff04 	movi	r5,-4
10009944:	414a703a 	and	r5,r8,r5
10009948:	89800404 	addi	r6,r17,16
1000994c:	8151883a 	add	r8,r16,r5
10009950:	4180590e 	bge	r8,r6,10009ab8 <_realloc_r+0x390>
10009954:	1080004c 	andi	r2,r2,1
10009958:	103f9e1e 	bne	r2,zero,100097d4 <__alt_data_end+0xf80097d4>
1000995c:	adbffe17 	ldw	r22,-8(r21)
10009960:	00bfff04 	movi	r2,-4
10009964:	9dadc83a 	sub	r22,r19,r22
10009968:	b1800117 	ldw	r6,4(r22)
1000996c:	3084703a 	and	r2,r6,r2
10009970:	20002026 	beq	r4,zero,100099f4 <_realloc_r+0x2cc>
10009974:	80af883a 	add	r23,r16,r2
10009978:	b96f883a 	add	r23,r23,r5
1000997c:	21c05f26 	beq	r4,r7,10009afc <_realloc_r+0x3d4>
10009980:	b8c01c16 	blt	r23,r3,100099f4 <_realloc_r+0x2cc>
10009984:	20800317 	ldw	r2,12(r4)
10009988:	20c00217 	ldw	r3,8(r4)
1000998c:	81bfff04 	addi	r6,r16,-4
10009990:	01000904 	movi	r4,36
10009994:	18800315 	stw	r2,12(r3)
10009998:	10c00215 	stw	r3,8(r2)
1000999c:	b0c00217 	ldw	r3,8(r22)
100099a0:	b0800317 	ldw	r2,12(r22)
100099a4:	b4800204 	addi	r18,r22,8
100099a8:	18800315 	stw	r2,12(r3)
100099ac:	10c00215 	stw	r3,8(r2)
100099b0:	21801b36 	bltu	r4,r6,10009a20 <_realloc_r+0x2f8>
100099b4:	008004c4 	movi	r2,19
100099b8:	1180352e 	bgeu	r2,r6,10009a90 <_realloc_r+0x368>
100099bc:	a8800017 	ldw	r2,0(r21)
100099c0:	b0800215 	stw	r2,8(r22)
100099c4:	a8800117 	ldw	r2,4(r21)
100099c8:	b0800315 	stw	r2,12(r22)
100099cc:	008006c4 	movi	r2,27
100099d0:	11807f36 	bltu	r2,r6,10009bd0 <_realloc_r+0x4a8>
100099d4:	b0800404 	addi	r2,r22,16
100099d8:	ad400204 	addi	r21,r21,8
100099dc:	00002d06 	br	10009a94 <_realloc_r+0x36c>
100099e0:	adbffe17 	ldw	r22,-8(r21)
100099e4:	00bfff04 	movi	r2,-4
100099e8:	9dadc83a 	sub	r22,r19,r22
100099ec:	b1000117 	ldw	r4,4(r22)
100099f0:	2084703a 	and	r2,r4,r2
100099f4:	b03f7726 	beq	r22,zero,100097d4 <__alt_data_end+0xf80097d4>
100099f8:	80af883a 	add	r23,r16,r2
100099fc:	b8ff7516 	blt	r23,r3,100097d4 <__alt_data_end+0xf80097d4>
10009a00:	b0800317 	ldw	r2,12(r22)
10009a04:	b0c00217 	ldw	r3,8(r22)
10009a08:	81bfff04 	addi	r6,r16,-4
10009a0c:	01000904 	movi	r4,36
10009a10:	18800315 	stw	r2,12(r3)
10009a14:	10c00215 	stw	r3,8(r2)
10009a18:	b4800204 	addi	r18,r22,8
10009a1c:	21bfe52e 	bgeu	r4,r6,100099b4 <__alt_data_end+0xf80099b4>
10009a20:	a80b883a 	mov	r5,r21
10009a24:	9009883a 	mov	r4,r18
10009a28:	00083ec0 	call	100083ec <memmove>
10009a2c:	b821883a 	mov	r16,r23
10009a30:	b027883a 	mov	r19,r22
10009a34:	003f8a06 	br	10009860 <__alt_data_end+0xf8009860>
10009a38:	300b883a 	mov	r5,r6
10009a3c:	dfc00917 	ldw	ra,36(sp)
10009a40:	df000817 	ldw	fp,32(sp)
10009a44:	ddc00717 	ldw	r23,28(sp)
10009a48:	dd800617 	ldw	r22,24(sp)
10009a4c:	dd400517 	ldw	r21,20(sp)
10009a50:	dd000417 	ldw	r20,16(sp)
10009a54:	dcc00317 	ldw	r19,12(sp)
10009a58:	dc800217 	ldw	r18,8(sp)
10009a5c:	dc400117 	ldw	r17,4(sp)
10009a60:	dc000017 	ldw	r16,0(sp)
10009a64:	dec00a04 	addi	sp,sp,40
10009a68:	00079b41 	jmpi	100079b4 <_malloc_r>
10009a6c:	a8c00017 	ldw	r3,0(r21)
10009a70:	90c00015 	stw	r3,0(r18)
10009a74:	a8c00117 	ldw	r3,4(r21)
10009a78:	90c00115 	stw	r3,4(r18)
10009a7c:	00c006c4 	movi	r3,27
10009a80:	19804536 	bltu	r3,r6,10009b98 <_realloc_r+0x470>
10009a84:	90800204 	addi	r2,r18,8
10009a88:	a8c00204 	addi	r3,r21,8
10009a8c:	003f6306 	br	1000981c <__alt_data_end+0xf800981c>
10009a90:	9005883a 	mov	r2,r18
10009a94:	a8c00017 	ldw	r3,0(r21)
10009a98:	b821883a 	mov	r16,r23
10009a9c:	b027883a 	mov	r19,r22
10009aa0:	10c00015 	stw	r3,0(r2)
10009aa4:	a8c00117 	ldw	r3,4(r21)
10009aa8:	10c00115 	stw	r3,4(r2)
10009aac:	a8c00217 	ldw	r3,8(r21)
10009ab0:	10c00215 	stw	r3,8(r2)
10009ab4:	003f6a06 	br	10009860 <__alt_data_end+0xf8009860>
10009ab8:	9c67883a 	add	r19,r19,r17
10009abc:	4445c83a 	sub	r2,r8,r17
10009ac0:	e4c00215 	stw	r19,8(fp)
10009ac4:	10800054 	ori	r2,r2,1
10009ac8:	98800115 	stw	r2,4(r19)
10009acc:	a8bfff17 	ldw	r2,-4(r21)
10009ad0:	a009883a 	mov	r4,r20
10009ad4:	1080004c 	andi	r2,r2,1
10009ad8:	1462b03a 	or	r17,r2,r17
10009adc:	ac7fff15 	stw	r17,-4(r21)
10009ae0:	000fcfc0 	call	1000fcfc <__malloc_unlock>
10009ae4:	a805883a 	mov	r2,r21
10009ae8:	003f6b06 	br	10009898 <__alt_data_end+0xf8009898>
10009aec:	a80b883a 	mov	r5,r21
10009af0:	9009883a 	mov	r4,r18
10009af4:	00083ec0 	call	100083ec <memmove>
10009af8:	003f4e06 	br	10009834 <__alt_data_end+0xf8009834>
10009afc:	89000404 	addi	r4,r17,16
10009b00:	b93fbc16 	blt	r23,r4,100099f4 <__alt_data_end+0xf80099f4>
10009b04:	b0800317 	ldw	r2,12(r22)
10009b08:	b0c00217 	ldw	r3,8(r22)
10009b0c:	81bfff04 	addi	r6,r16,-4
10009b10:	01000904 	movi	r4,36
10009b14:	18800315 	stw	r2,12(r3)
10009b18:	10c00215 	stw	r3,8(r2)
10009b1c:	b4800204 	addi	r18,r22,8
10009b20:	21804336 	bltu	r4,r6,10009c30 <_realloc_r+0x508>
10009b24:	008004c4 	movi	r2,19
10009b28:	11803f2e 	bgeu	r2,r6,10009c28 <_realloc_r+0x500>
10009b2c:	a8800017 	ldw	r2,0(r21)
10009b30:	b0800215 	stw	r2,8(r22)
10009b34:	a8800117 	ldw	r2,4(r21)
10009b38:	b0800315 	stw	r2,12(r22)
10009b3c:	008006c4 	movi	r2,27
10009b40:	11803f36 	bltu	r2,r6,10009c40 <_realloc_r+0x518>
10009b44:	b0800404 	addi	r2,r22,16
10009b48:	ad400204 	addi	r21,r21,8
10009b4c:	a8c00017 	ldw	r3,0(r21)
10009b50:	10c00015 	stw	r3,0(r2)
10009b54:	a8c00117 	ldw	r3,4(r21)
10009b58:	10c00115 	stw	r3,4(r2)
10009b5c:	a8c00217 	ldw	r3,8(r21)
10009b60:	10c00215 	stw	r3,8(r2)
10009b64:	b447883a 	add	r3,r22,r17
10009b68:	bc45c83a 	sub	r2,r23,r17
10009b6c:	e0c00215 	stw	r3,8(fp)
10009b70:	10800054 	ori	r2,r2,1
10009b74:	18800115 	stw	r2,4(r3)
10009b78:	b0800117 	ldw	r2,4(r22)
10009b7c:	a009883a 	mov	r4,r20
10009b80:	1080004c 	andi	r2,r2,1
10009b84:	1462b03a 	or	r17,r2,r17
10009b88:	b4400115 	stw	r17,4(r22)
10009b8c:	000fcfc0 	call	1000fcfc <__malloc_unlock>
10009b90:	9005883a 	mov	r2,r18
10009b94:	003f4006 	br	10009898 <__alt_data_end+0xf8009898>
10009b98:	a8c00217 	ldw	r3,8(r21)
10009b9c:	90c00215 	stw	r3,8(r18)
10009ba0:	a8c00317 	ldw	r3,12(r21)
10009ba4:	90c00315 	stw	r3,12(r18)
10009ba8:	30801126 	beq	r6,r2,10009bf0 <_realloc_r+0x4c8>
10009bac:	90800404 	addi	r2,r18,16
10009bb0:	a8c00404 	addi	r3,r21,16
10009bb4:	003f1906 	br	1000981c <__alt_data_end+0xf800981c>
10009bb8:	90ffff17 	ldw	r3,-4(r18)
10009bbc:	00bfff04 	movi	r2,-4
10009bc0:	a825883a 	mov	r18,r21
10009bc4:	1884703a 	and	r2,r3,r2
10009bc8:	80a1883a 	add	r16,r16,r2
10009bcc:	003f2406 	br	10009860 <__alt_data_end+0xf8009860>
10009bd0:	a8800217 	ldw	r2,8(r21)
10009bd4:	b0800415 	stw	r2,16(r22)
10009bd8:	a8800317 	ldw	r2,12(r21)
10009bdc:	b0800515 	stw	r2,20(r22)
10009be0:	31000a26 	beq	r6,r4,10009c0c <_realloc_r+0x4e4>
10009be4:	b0800604 	addi	r2,r22,24
10009be8:	ad400404 	addi	r21,r21,16
10009bec:	003fa906 	br	10009a94 <__alt_data_end+0xf8009a94>
10009bf0:	a9000417 	ldw	r4,16(r21)
10009bf4:	90800604 	addi	r2,r18,24
10009bf8:	a8c00604 	addi	r3,r21,24
10009bfc:	91000415 	stw	r4,16(r18)
10009c00:	a9000517 	ldw	r4,20(r21)
10009c04:	91000515 	stw	r4,20(r18)
10009c08:	003f0406 	br	1000981c <__alt_data_end+0xf800981c>
10009c0c:	a8c00417 	ldw	r3,16(r21)
10009c10:	ad400604 	addi	r21,r21,24
10009c14:	b0800804 	addi	r2,r22,32
10009c18:	b0c00615 	stw	r3,24(r22)
10009c1c:	a8ffff17 	ldw	r3,-4(r21)
10009c20:	b0c00715 	stw	r3,28(r22)
10009c24:	003f9b06 	br	10009a94 <__alt_data_end+0xf8009a94>
10009c28:	9005883a 	mov	r2,r18
10009c2c:	003fc706 	br	10009b4c <__alt_data_end+0xf8009b4c>
10009c30:	a80b883a 	mov	r5,r21
10009c34:	9009883a 	mov	r4,r18
10009c38:	00083ec0 	call	100083ec <memmove>
10009c3c:	003fc906 	br	10009b64 <__alt_data_end+0xf8009b64>
10009c40:	a8800217 	ldw	r2,8(r21)
10009c44:	b0800415 	stw	r2,16(r22)
10009c48:	a8800317 	ldw	r2,12(r21)
10009c4c:	b0800515 	stw	r2,20(r22)
10009c50:	31000726 	beq	r6,r4,10009c70 <_realloc_r+0x548>
10009c54:	b0800604 	addi	r2,r22,24
10009c58:	ad400404 	addi	r21,r21,16
10009c5c:	003fbb06 	br	10009b4c <__alt_data_end+0xf8009b4c>
10009c60:	a009883a 	mov	r4,r20
10009c64:	000fcfc0 	call	1000fcfc <__malloc_unlock>
10009c68:	0005883a 	mov	r2,zero
10009c6c:	003f0a06 	br	10009898 <__alt_data_end+0xf8009898>
10009c70:	a8c00417 	ldw	r3,16(r21)
10009c74:	ad400604 	addi	r21,r21,24
10009c78:	b0800804 	addi	r2,r22,32
10009c7c:	b0c00615 	stw	r3,24(r22)
10009c80:	a8ffff17 	ldw	r3,-4(r21)
10009c84:	b0c00715 	stw	r3,28(r22)
10009c88:	003fb006 	br	10009b4c <__alt_data_end+0xf8009b4c>

10009c8c <__fpclassifyd>:
10009c8c:	00a00034 	movhi	r2,32768
10009c90:	10bfffc4 	addi	r2,r2,-1
10009c94:	2884703a 	and	r2,r5,r2
10009c98:	10000726 	beq	r2,zero,10009cb8 <__fpclassifyd+0x2c>
10009c9c:	00fffc34 	movhi	r3,65520
10009ca0:	019ff834 	movhi	r6,32736
10009ca4:	28c7883a 	add	r3,r5,r3
10009ca8:	31bfffc4 	addi	r6,r6,-1
10009cac:	30c00536 	bltu	r6,r3,10009cc4 <__fpclassifyd+0x38>
10009cb0:	00800104 	movi	r2,4
10009cb4:	f800283a 	ret
10009cb8:	2000021e 	bne	r4,zero,10009cc4 <__fpclassifyd+0x38>
10009cbc:	00800084 	movi	r2,2
10009cc0:	f800283a 	ret
10009cc4:	00dffc34 	movhi	r3,32752
10009cc8:	019ff834 	movhi	r6,32736
10009ccc:	28cb883a 	add	r5,r5,r3
10009cd0:	31bfffc4 	addi	r6,r6,-1
10009cd4:	317ff62e 	bgeu	r6,r5,10009cb0 <__alt_data_end+0xf8009cb0>
10009cd8:	01400434 	movhi	r5,16
10009cdc:	297fffc4 	addi	r5,r5,-1
10009ce0:	28800236 	bltu	r5,r2,10009cec <__fpclassifyd+0x60>
10009ce4:	008000c4 	movi	r2,3
10009ce8:	f800283a 	ret
10009cec:	10c00226 	beq	r2,r3,10009cf8 <__fpclassifyd+0x6c>
10009cf0:	0005883a 	mov	r2,zero
10009cf4:	f800283a 	ret
10009cf8:	2005003a 	cmpeq	r2,r4,zero
10009cfc:	f800283a 	ret

10009d00 <_sbrk_r>:
10009d00:	defffd04 	addi	sp,sp,-12
10009d04:	dc000015 	stw	r16,0(sp)
10009d08:	04040074 	movhi	r16,4097
10009d0c:	dc400115 	stw	r17,4(sp)
10009d10:	8417fd04 	addi	r16,r16,24564
10009d14:	2023883a 	mov	r17,r4
10009d18:	2809883a 	mov	r4,r5
10009d1c:	dfc00215 	stw	ra,8(sp)
10009d20:	80000015 	stw	zero,0(r16)
10009d24:	000fee40 	call	1000fee4 <sbrk>
10009d28:	00ffffc4 	movi	r3,-1
10009d2c:	10c00526 	beq	r2,r3,10009d44 <_sbrk_r+0x44>
10009d30:	dfc00217 	ldw	ra,8(sp)
10009d34:	dc400117 	ldw	r17,4(sp)
10009d38:	dc000017 	ldw	r16,0(sp)
10009d3c:	dec00304 	addi	sp,sp,12
10009d40:	f800283a 	ret
10009d44:	80c00017 	ldw	r3,0(r16)
10009d48:	183ff926 	beq	r3,zero,10009d30 <__alt_data_end+0xf8009d30>
10009d4c:	88c00015 	stw	r3,0(r17)
10009d50:	003ff706 	br	10009d30 <__alt_data_end+0xf8009d30>

10009d54 <__sread>:
10009d54:	defffe04 	addi	sp,sp,-8
10009d58:	dc000015 	stw	r16,0(sp)
10009d5c:	2821883a 	mov	r16,r5
10009d60:	2940038f 	ldh	r5,14(r5)
10009d64:	dfc00115 	stw	ra,4(sp)
10009d68:	000bc100 	call	1000bc10 <_read_r>
10009d6c:	10000716 	blt	r2,zero,10009d8c <__sread+0x38>
10009d70:	80c01417 	ldw	r3,80(r16)
10009d74:	1887883a 	add	r3,r3,r2
10009d78:	80c01415 	stw	r3,80(r16)
10009d7c:	dfc00117 	ldw	ra,4(sp)
10009d80:	dc000017 	ldw	r16,0(sp)
10009d84:	dec00204 	addi	sp,sp,8
10009d88:	f800283a 	ret
10009d8c:	80c0030b 	ldhu	r3,12(r16)
10009d90:	18fbffcc 	andi	r3,r3,61439
10009d94:	80c0030d 	sth	r3,12(r16)
10009d98:	dfc00117 	ldw	ra,4(sp)
10009d9c:	dc000017 	ldw	r16,0(sp)
10009da0:	dec00204 	addi	sp,sp,8
10009da4:	f800283a 	ret

10009da8 <__seofread>:
10009da8:	0005883a 	mov	r2,zero
10009dac:	f800283a 	ret

10009db0 <__swrite>:
10009db0:	2880030b 	ldhu	r2,12(r5)
10009db4:	defffb04 	addi	sp,sp,-20
10009db8:	dcc00315 	stw	r19,12(sp)
10009dbc:	dc800215 	stw	r18,8(sp)
10009dc0:	dc400115 	stw	r17,4(sp)
10009dc4:	dc000015 	stw	r16,0(sp)
10009dc8:	dfc00415 	stw	ra,16(sp)
10009dcc:	10c0400c 	andi	r3,r2,256
10009dd0:	2821883a 	mov	r16,r5
10009dd4:	2023883a 	mov	r17,r4
10009dd8:	3025883a 	mov	r18,r6
10009ddc:	3827883a 	mov	r19,r7
10009de0:	18000526 	beq	r3,zero,10009df8 <__swrite+0x48>
10009de4:	2940038f 	ldh	r5,14(r5)
10009de8:	01c00084 	movi	r7,2
10009dec:	000d883a 	mov	r6,zero
10009df0:	000bbb00 	call	1000bbb0 <_lseek_r>
10009df4:	8080030b 	ldhu	r2,12(r16)
10009df8:	8140038f 	ldh	r5,14(r16)
10009dfc:	10bbffcc 	andi	r2,r2,61439
10009e00:	980f883a 	mov	r7,r19
10009e04:	900d883a 	mov	r6,r18
10009e08:	8809883a 	mov	r4,r17
10009e0c:	8080030d 	sth	r2,12(r16)
10009e10:	dfc00417 	ldw	ra,16(sp)
10009e14:	dcc00317 	ldw	r19,12(sp)
10009e18:	dc800217 	ldw	r18,8(sp)
10009e1c:	dc400117 	ldw	r17,4(sp)
10009e20:	dc000017 	ldw	r16,0(sp)
10009e24:	dec00504 	addi	sp,sp,20
10009e28:	000b6641 	jmpi	1000b664 <_write_r>

10009e2c <__sseek>:
10009e2c:	defffe04 	addi	sp,sp,-8
10009e30:	dc000015 	stw	r16,0(sp)
10009e34:	2821883a 	mov	r16,r5
10009e38:	2940038f 	ldh	r5,14(r5)
10009e3c:	dfc00115 	stw	ra,4(sp)
10009e40:	000bbb00 	call	1000bbb0 <_lseek_r>
10009e44:	00ffffc4 	movi	r3,-1
10009e48:	10c00826 	beq	r2,r3,10009e6c <__sseek+0x40>
10009e4c:	80c0030b 	ldhu	r3,12(r16)
10009e50:	80801415 	stw	r2,80(r16)
10009e54:	18c40014 	ori	r3,r3,4096
10009e58:	80c0030d 	sth	r3,12(r16)
10009e5c:	dfc00117 	ldw	ra,4(sp)
10009e60:	dc000017 	ldw	r16,0(sp)
10009e64:	dec00204 	addi	sp,sp,8
10009e68:	f800283a 	ret
10009e6c:	80c0030b 	ldhu	r3,12(r16)
10009e70:	18fbffcc 	andi	r3,r3,61439
10009e74:	80c0030d 	sth	r3,12(r16)
10009e78:	dfc00117 	ldw	ra,4(sp)
10009e7c:	dc000017 	ldw	r16,0(sp)
10009e80:	dec00204 	addi	sp,sp,8
10009e84:	f800283a 	ret

10009e88 <__sclose>:
10009e88:	2940038f 	ldh	r5,14(r5)
10009e8c:	000b6c41 	jmpi	1000b6c4 <_close_r>

10009e90 <strcmp>:
10009e90:	2144b03a 	or	r2,r4,r5
10009e94:	108000cc 	andi	r2,r2,3
10009e98:	1000171e 	bne	r2,zero,10009ef8 <strcmp+0x68>
10009e9c:	20800017 	ldw	r2,0(r4)
10009ea0:	28c00017 	ldw	r3,0(r5)
10009ea4:	10c0141e 	bne	r2,r3,10009ef8 <strcmp+0x68>
10009ea8:	027fbff4 	movhi	r9,65279
10009eac:	4a7fbfc4 	addi	r9,r9,-257
10009eb0:	0086303a 	nor	r3,zero,r2
10009eb4:	02202074 	movhi	r8,32897
10009eb8:	1245883a 	add	r2,r2,r9
10009ebc:	42202004 	addi	r8,r8,-32640
10009ec0:	10c4703a 	and	r2,r2,r3
10009ec4:	1204703a 	and	r2,r2,r8
10009ec8:	10000226 	beq	r2,zero,10009ed4 <strcmp+0x44>
10009ecc:	00002306 	br	10009f5c <strcmp+0xcc>
10009ed0:	1000221e 	bne	r2,zero,10009f5c <strcmp+0xcc>
10009ed4:	21000104 	addi	r4,r4,4
10009ed8:	20c00017 	ldw	r3,0(r4)
10009edc:	29400104 	addi	r5,r5,4
10009ee0:	29800017 	ldw	r6,0(r5)
10009ee4:	1a4f883a 	add	r7,r3,r9
10009ee8:	00c4303a 	nor	r2,zero,r3
10009eec:	3884703a 	and	r2,r7,r2
10009ef0:	1204703a 	and	r2,r2,r8
10009ef4:	19bff626 	beq	r3,r6,10009ed0 <__alt_data_end+0xf8009ed0>
10009ef8:	20800003 	ldbu	r2,0(r4)
10009efc:	10c03fcc 	andi	r3,r2,255
10009f00:	18c0201c 	xori	r3,r3,128
10009f04:	18ffe004 	addi	r3,r3,-128
10009f08:	18000c26 	beq	r3,zero,10009f3c <strcmp+0xac>
10009f0c:	29800007 	ldb	r6,0(r5)
10009f10:	19800326 	beq	r3,r6,10009f20 <strcmp+0x90>
10009f14:	00001306 	br	10009f64 <strcmp+0xd4>
10009f18:	29800007 	ldb	r6,0(r5)
10009f1c:	11800b1e 	bne	r2,r6,10009f4c <strcmp+0xbc>
10009f20:	21000044 	addi	r4,r4,1
10009f24:	20c00003 	ldbu	r3,0(r4)
10009f28:	29400044 	addi	r5,r5,1
10009f2c:	18803fcc 	andi	r2,r3,255
10009f30:	1080201c 	xori	r2,r2,128
10009f34:	10bfe004 	addi	r2,r2,-128
10009f38:	103ff71e 	bne	r2,zero,10009f18 <__alt_data_end+0xf8009f18>
10009f3c:	0007883a 	mov	r3,zero
10009f40:	28800003 	ldbu	r2,0(r5)
10009f44:	1885c83a 	sub	r2,r3,r2
10009f48:	f800283a 	ret
10009f4c:	28800003 	ldbu	r2,0(r5)
10009f50:	18c03fcc 	andi	r3,r3,255
10009f54:	1885c83a 	sub	r2,r3,r2
10009f58:	f800283a 	ret
10009f5c:	0005883a 	mov	r2,zero
10009f60:	f800283a 	ret
10009f64:	10c03fcc 	andi	r3,r2,255
10009f68:	003ff506 	br	10009f40 <__alt_data_end+0xf8009f40>

10009f6c <__sprint_r.part.0>:
10009f6c:	28801917 	ldw	r2,100(r5)
10009f70:	defff604 	addi	sp,sp,-40
10009f74:	dd400515 	stw	r21,20(sp)
10009f78:	dfc00915 	stw	ra,36(sp)
10009f7c:	df000815 	stw	fp,32(sp)
10009f80:	ddc00715 	stw	r23,28(sp)
10009f84:	dd800615 	stw	r22,24(sp)
10009f88:	dd000415 	stw	r20,16(sp)
10009f8c:	dcc00315 	stw	r19,12(sp)
10009f90:	dc800215 	stw	r18,8(sp)
10009f94:	dc400115 	stw	r17,4(sp)
10009f98:	dc000015 	stw	r16,0(sp)
10009f9c:	1088000c 	andi	r2,r2,8192
10009fa0:	302b883a 	mov	r21,r6
10009fa4:	10002e26 	beq	r2,zero,1000a060 <__sprint_r.part.0+0xf4>
10009fa8:	30800217 	ldw	r2,8(r6)
10009fac:	35800017 	ldw	r22,0(r6)
10009fb0:	10002926 	beq	r2,zero,1000a058 <__sprint_r.part.0+0xec>
10009fb4:	2827883a 	mov	r19,r5
10009fb8:	2029883a 	mov	r20,r4
10009fbc:	b5c00104 	addi	r23,r22,4
10009fc0:	04bfffc4 	movi	r18,-1
10009fc4:	bc400017 	ldw	r17,0(r23)
10009fc8:	b4000017 	ldw	r16,0(r22)
10009fcc:	0039883a 	mov	fp,zero
10009fd0:	8822d0ba 	srli	r17,r17,2
10009fd4:	8800031e 	bne	r17,zero,10009fe4 <__sprint_r.part.0+0x78>
10009fd8:	00001806 	br	1000a03c <__sprint_r.part.0+0xd0>
10009fdc:	84000104 	addi	r16,r16,4
10009fe0:	8f001526 	beq	r17,fp,1000a038 <__sprint_r.part.0+0xcc>
10009fe4:	81400017 	ldw	r5,0(r16)
10009fe8:	980d883a 	mov	r6,r19
10009fec:	a009883a 	mov	r4,r20
10009ff0:	000ba5c0 	call	1000ba5c <_fputwc_r>
10009ff4:	e7000044 	addi	fp,fp,1
10009ff8:	14bff81e 	bne	r2,r18,10009fdc <__alt_data_end+0xf8009fdc>
10009ffc:	9005883a 	mov	r2,r18
1000a000:	a8000215 	stw	zero,8(r21)
1000a004:	a8000115 	stw	zero,4(r21)
1000a008:	dfc00917 	ldw	ra,36(sp)
1000a00c:	df000817 	ldw	fp,32(sp)
1000a010:	ddc00717 	ldw	r23,28(sp)
1000a014:	dd800617 	ldw	r22,24(sp)
1000a018:	dd400517 	ldw	r21,20(sp)
1000a01c:	dd000417 	ldw	r20,16(sp)
1000a020:	dcc00317 	ldw	r19,12(sp)
1000a024:	dc800217 	ldw	r18,8(sp)
1000a028:	dc400117 	ldw	r17,4(sp)
1000a02c:	dc000017 	ldw	r16,0(sp)
1000a030:	dec00a04 	addi	sp,sp,40
1000a034:	f800283a 	ret
1000a038:	a8800217 	ldw	r2,8(r21)
1000a03c:	8c63883a 	add	r17,r17,r17
1000a040:	8c63883a 	add	r17,r17,r17
1000a044:	1445c83a 	sub	r2,r2,r17
1000a048:	a8800215 	stw	r2,8(r21)
1000a04c:	b5800204 	addi	r22,r22,8
1000a050:	bdc00204 	addi	r23,r23,8
1000a054:	103fdb1e 	bne	r2,zero,10009fc4 <__alt_data_end+0xf8009fc4>
1000a058:	0005883a 	mov	r2,zero
1000a05c:	003fe806 	br	1000a000 <__alt_data_end+0xf800a000>
1000a060:	00070700 	call	10007070 <__sfvwrite_r>
1000a064:	003fe606 	br	1000a000 <__alt_data_end+0xf800a000>

1000a068 <__sprint_r>:
1000a068:	30c00217 	ldw	r3,8(r6)
1000a06c:	18000126 	beq	r3,zero,1000a074 <__sprint_r+0xc>
1000a070:	0009f6c1 	jmpi	10009f6c <__sprint_r.part.0>
1000a074:	30000115 	stw	zero,4(r6)
1000a078:	0005883a 	mov	r2,zero
1000a07c:	f800283a 	ret

1000a080 <___vfiprintf_internal_r>:
1000a080:	deffca04 	addi	sp,sp,-216
1000a084:	dd403115 	stw	r21,196(sp)
1000a088:	dfc03515 	stw	ra,212(sp)
1000a08c:	df003415 	stw	fp,208(sp)
1000a090:	ddc03315 	stw	r23,204(sp)
1000a094:	dd803215 	stw	r22,200(sp)
1000a098:	dd003015 	stw	r20,192(sp)
1000a09c:	dcc02f15 	stw	r19,188(sp)
1000a0a0:	dc802e15 	stw	r18,184(sp)
1000a0a4:	dc402d15 	stw	r17,180(sp)
1000a0a8:	dc002c15 	stw	r16,176(sp)
1000a0ac:	d9002115 	stw	r4,132(sp)
1000a0b0:	d9402015 	stw	r5,128(sp)
1000a0b4:	d9c02215 	stw	r7,136(sp)
1000a0b8:	302b883a 	mov	r21,r6
1000a0bc:	20000226 	beq	r4,zero,1000a0c8 <___vfiprintf_internal_r+0x48>
1000a0c0:	20800e17 	ldw	r2,56(r4)
1000a0c4:	1000cf26 	beq	r2,zero,1000a404 <___vfiprintf_internal_r+0x384>
1000a0c8:	d8c02017 	ldw	r3,128(sp)
1000a0cc:	1880030b 	ldhu	r2,12(r3)
1000a0d0:	10c8000c 	andi	r3,r2,8192
1000a0d4:	1800071e 	bne	r3,zero,1000a0f4 <___vfiprintf_internal_r+0x74>
1000a0d8:	d9402017 	ldw	r5,128(sp)
1000a0dc:	00f7ffc4 	movi	r3,-8193
1000a0e0:	10880014 	ori	r2,r2,8192
1000a0e4:	29001917 	ldw	r4,100(r5)
1000a0e8:	2880030d 	sth	r2,12(r5)
1000a0ec:	20c6703a 	and	r3,r4,r3
1000a0f0:	28c01915 	stw	r3,100(r5)
1000a0f4:	10c0020c 	andi	r3,r2,8
1000a0f8:	1800a526 	beq	r3,zero,1000a390 <___vfiprintf_internal_r+0x310>
1000a0fc:	d9002017 	ldw	r4,128(sp)
1000a100:	20c00417 	ldw	r3,16(r4)
1000a104:	1800a226 	beq	r3,zero,1000a390 <___vfiprintf_internal_r+0x310>
1000a108:	1080068c 	andi	r2,r2,26
1000a10c:	00c00284 	movi	r3,10
1000a110:	10c0a826 	beq	r2,r3,1000a3b4 <___vfiprintf_internal_r+0x334>
1000a114:	d9001a04 	addi	r4,sp,104
1000a118:	d94019c4 	addi	r5,sp,103
1000a11c:	04840074 	movhi	r18,4097
1000a120:	2145c83a 	sub	r2,r4,r5
1000a124:	948a3104 	addi	r18,r18,10436
1000a128:	d9001e15 	stw	r4,120(sp)
1000a12c:	d9401f15 	stw	r5,124(sp)
1000a130:	dec01a15 	stw	sp,104(sp)
1000a134:	d8001c15 	stw	zero,112(sp)
1000a138:	d8001b15 	stw	zero,108(sp)
1000a13c:	d811883a 	mov	r8,sp
1000a140:	d8002615 	stw	zero,152(sp)
1000a144:	d8002415 	stw	zero,144(sp)
1000a148:	d8802815 	stw	r2,160(sp)
1000a14c:	a82d883a 	mov	r22,r21
1000a150:	b0800007 	ldb	r2,0(r22)
1000a154:	10040d26 	beq	r2,zero,1000b18c <___vfiprintf_internal_r+0x110c>
1000a158:	00c00944 	movi	r3,37
1000a15c:	b029883a 	mov	r20,r22
1000a160:	10c0021e 	bne	r2,r3,1000a16c <___vfiprintf_internal_r+0xec>
1000a164:	00001606 	br	1000a1c0 <___vfiprintf_internal_r+0x140>
1000a168:	10c00326 	beq	r2,r3,1000a178 <___vfiprintf_internal_r+0xf8>
1000a16c:	a5000044 	addi	r20,r20,1
1000a170:	a0800007 	ldb	r2,0(r20)
1000a174:	103ffc1e 	bne	r2,zero,1000a168 <__alt_data_end+0xf800a168>
1000a178:	a5a1c83a 	sub	r16,r20,r22
1000a17c:	80001026 	beq	r16,zero,1000a1c0 <___vfiprintf_internal_r+0x140>
1000a180:	d8c01c17 	ldw	r3,112(sp)
1000a184:	d8801b17 	ldw	r2,108(sp)
1000a188:	45800015 	stw	r22,0(r8)
1000a18c:	80c7883a 	add	r3,r16,r3
1000a190:	10800044 	addi	r2,r2,1
1000a194:	44000115 	stw	r16,4(r8)
1000a198:	d8c01c15 	stw	r3,112(sp)
1000a19c:	d8801b15 	stw	r2,108(sp)
1000a1a0:	010001c4 	movi	r4,7
1000a1a4:	2080750e 	bge	r4,r2,1000a37c <___vfiprintf_internal_r+0x2fc>
1000a1a8:	1803951e 	bne	r3,zero,1000b000 <___vfiprintf_internal_r+0xf80>
1000a1ac:	d8c02417 	ldw	r3,144(sp)
1000a1b0:	d8001b15 	stw	zero,108(sp)
1000a1b4:	d811883a 	mov	r8,sp
1000a1b8:	1c07883a 	add	r3,r3,r16
1000a1bc:	d8c02415 	stw	r3,144(sp)
1000a1c0:	a0800007 	ldb	r2,0(r20)
1000a1c4:	1002e026 	beq	r2,zero,1000ad48 <___vfiprintf_internal_r+0xcc8>
1000a1c8:	a5800044 	addi	r22,r20,1
1000a1cc:	a0c00047 	ldb	r3,1(r20)
1000a1d0:	d8001d85 	stb	zero,118(sp)
1000a1d4:	0027883a 	mov	r19,zero
1000a1d8:	d8002305 	stb	zero,140(sp)
1000a1dc:	043fffc4 	movi	r16,-1
1000a1e0:	d8002515 	stw	zero,148(sp)
1000a1e4:	0023883a 	mov	r17,zero
1000a1e8:	05001604 	movi	r20,88
1000a1ec:	05400244 	movi	r21,9
1000a1f0:	402f883a 	mov	r23,r8
1000a1f4:	b5800044 	addi	r22,r22,1
1000a1f8:	18bff804 	addi	r2,r3,-32
1000a1fc:	a0827736 	bltu	r20,r2,1000abdc <___vfiprintf_internal_r+0xb5c>
1000a200:	100490ba 	slli	r2,r2,2
1000a204:	01040074 	movhi	r4,4097
1000a208:	21288604 	addi	r4,r4,-24040
1000a20c:	1105883a 	add	r2,r2,r4
1000a210:	10800017 	ldw	r2,0(r2)
1000a214:	1000683a 	jmp	r2
1000a218:	1000a8dc 	xori	zero,r2,675
1000a21c:	1000abdc 	xori	zero,r2,687
1000a220:	1000abdc 	xori	zero,r2,687
1000a224:	1000a8f8 	rdprs	zero,r2,675
1000a228:	1000abdc 	xori	zero,r2,687
1000a22c:	1000abdc 	xori	zero,r2,687
1000a230:	1000abdc 	xori	zero,r2,687
1000a234:	1000abdc 	xori	zero,r2,687
1000a238:	1000abdc 	xori	zero,r2,687
1000a23c:	1000abdc 	xori	zero,r2,687
1000a240:	1000ab00 	call	11000ab0 <_gp+0xfe45ec>
1000a244:	1000ab24 	muli	zero,r2,684
1000a248:	1000abdc 	xori	zero,r2,687
1000a24c:	1000a41c 	xori	zero,r2,656
1000a250:	1000ab38 	rdprs	zero,r2,684
1000a254:	1000abdc 	xori	zero,r2,687
1000a258:	1000a904 	addi	zero,r2,676
1000a25c:	1000a910 	cmplti	zero,r2,676
1000a260:	1000a910 	cmplti	zero,r2,676
1000a264:	1000a910 	cmplti	zero,r2,676
1000a268:	1000a910 	cmplti	zero,r2,676
1000a26c:	1000a910 	cmplti	zero,r2,676
1000a270:	1000a910 	cmplti	zero,r2,676
1000a274:	1000a910 	cmplti	zero,r2,676
1000a278:	1000a910 	cmplti	zero,r2,676
1000a27c:	1000a910 	cmplti	zero,r2,676
1000a280:	1000abdc 	xori	zero,r2,687
1000a284:	1000abdc 	xori	zero,r2,687
1000a288:	1000abdc 	xori	zero,r2,687
1000a28c:	1000abdc 	xori	zero,r2,687
1000a290:	1000abdc 	xori	zero,r2,687
1000a294:	1000abdc 	xori	zero,r2,687
1000a298:	1000abdc 	xori	zero,r2,687
1000a29c:	1000abdc 	xori	zero,r2,687
1000a2a0:	1000abdc 	xori	zero,r2,687
1000a2a4:	1000abdc 	xori	zero,r2,687
1000a2a8:	1000a950 	cmplti	zero,r2,677
1000a2ac:	1000abdc 	xori	zero,r2,687
1000a2b0:	1000abdc 	xori	zero,r2,687
1000a2b4:	1000abdc 	xori	zero,r2,687
1000a2b8:	1000abdc 	xori	zero,r2,687
1000a2bc:	1000abdc 	xori	zero,r2,687
1000a2c0:	1000abdc 	xori	zero,r2,687
1000a2c4:	1000abdc 	xori	zero,r2,687
1000a2c8:	1000abdc 	xori	zero,r2,687
1000a2cc:	1000abdc 	xori	zero,r2,687
1000a2d0:	1000abdc 	xori	zero,r2,687
1000a2d4:	1000a98c 	andi	zero,r2,678
1000a2d8:	1000abdc 	xori	zero,r2,687
1000a2dc:	1000abdc 	xori	zero,r2,687
1000a2e0:	1000abdc 	xori	zero,r2,687
1000a2e4:	1000abdc 	xori	zero,r2,687
1000a2e8:	1000abdc 	xori	zero,r2,687
1000a2ec:	1000a9e8 	cmpgeui	zero,r2,679
1000a2f0:	1000abdc 	xori	zero,r2,687
1000a2f4:	1000abdc 	xori	zero,r2,687
1000a2f8:	1000aa5c 	xori	zero,r2,681
1000a2fc:	1000abdc 	xori	zero,r2,687
1000a300:	1000abdc 	xori	zero,r2,687
1000a304:	1000abdc 	xori	zero,r2,687
1000a308:	1000abdc 	xori	zero,r2,687
1000a30c:	1000abdc 	xori	zero,r2,687
1000a310:	1000abdc 	xori	zero,r2,687
1000a314:	1000abdc 	xori	zero,r2,687
1000a318:	1000abdc 	xori	zero,r2,687
1000a31c:	1000abdc 	xori	zero,r2,687
1000a320:	1000abdc 	xori	zero,r2,687
1000a324:	1000a804 	addi	zero,r2,672
1000a328:	1000a834 	orhi	zero,r2,672
1000a32c:	1000abdc 	xori	zero,r2,687
1000a330:	1000abdc 	xori	zero,r2,687
1000a334:	1000abdc 	xori	zero,r2,687
1000a338:	1000ab84 	addi	zero,r2,686
1000a33c:	1000a834 	orhi	zero,r2,672
1000a340:	1000abdc 	xori	zero,r2,687
1000a344:	1000abdc 	xori	zero,r2,687
1000a348:	1000a6dc 	xori	zero,r2,667
1000a34c:	1000abdc 	xori	zero,r2,687
1000a350:	1000a6f0 	cmpltui	zero,r2,667
1000a354:	1000a728 	cmpgeui	zero,r2,668
1000a358:	1000a428 	cmpgeui	zero,r2,656
1000a35c:	1000a6d0 	cmplti	zero,r2,667
1000a360:	1000abdc 	xori	zero,r2,687
1000a364:	1000aa9c 	xori	zero,r2,682
1000a368:	1000abdc 	xori	zero,r2,687
1000a36c:	1000aae8 	cmpgeui	zero,r2,683
1000a370:	1000abdc 	xori	zero,r2,687
1000a374:	1000abdc 	xori	zero,r2,687
1000a378:	1000a7ac 	andhi	zero,r2,670
1000a37c:	42000204 	addi	r8,r8,8
1000a380:	d8c02417 	ldw	r3,144(sp)
1000a384:	1c07883a 	add	r3,r3,r16
1000a388:	d8c02415 	stw	r3,144(sp)
1000a38c:	003f8c06 	br	1000a1c0 <__alt_data_end+0xf800a1c0>
1000a390:	d9402017 	ldw	r5,128(sp)
1000a394:	d9002117 	ldw	r4,132(sp)
1000a398:	0004be00 	call	10004be0 <__swsetup_r>
1000a39c:	1003c11e 	bne	r2,zero,1000b2a4 <___vfiprintf_internal_r+0x1224>
1000a3a0:	d9402017 	ldw	r5,128(sp)
1000a3a4:	00c00284 	movi	r3,10
1000a3a8:	2880030b 	ldhu	r2,12(r5)
1000a3ac:	1080068c 	andi	r2,r2,26
1000a3b0:	10ff581e 	bne	r2,r3,1000a114 <__alt_data_end+0xf800a114>
1000a3b4:	d8c02017 	ldw	r3,128(sp)
1000a3b8:	1880038f 	ldh	r2,14(r3)
1000a3bc:	103f5516 	blt	r2,zero,1000a114 <__alt_data_end+0xf800a114>
1000a3c0:	d9c02217 	ldw	r7,136(sp)
1000a3c4:	d9002117 	ldw	r4,132(sp)
1000a3c8:	a80d883a 	mov	r6,r21
1000a3cc:	180b883a 	mov	r5,r3
1000a3d0:	000b5a80 	call	1000b5a8 <__sbprintf>
1000a3d4:	dfc03517 	ldw	ra,212(sp)
1000a3d8:	df003417 	ldw	fp,208(sp)
1000a3dc:	ddc03317 	ldw	r23,204(sp)
1000a3e0:	dd803217 	ldw	r22,200(sp)
1000a3e4:	dd403117 	ldw	r21,196(sp)
1000a3e8:	dd003017 	ldw	r20,192(sp)
1000a3ec:	dcc02f17 	ldw	r19,188(sp)
1000a3f0:	dc802e17 	ldw	r18,184(sp)
1000a3f4:	dc402d17 	ldw	r17,180(sp)
1000a3f8:	dc002c17 	ldw	r16,176(sp)
1000a3fc:	dec03604 	addi	sp,sp,216
1000a400:	f800283a 	ret
1000a404:	0006bec0 	call	10006bec <__sinit>
1000a408:	003f2f06 	br	1000a0c8 <__alt_data_end+0xf800a0c8>
1000a40c:	d8c02517 	ldw	r3,148(sp)
1000a410:	d8802215 	stw	r2,136(sp)
1000a414:	00c7c83a 	sub	r3,zero,r3
1000a418:	d8c02515 	stw	r3,148(sp)
1000a41c:	8c400114 	ori	r17,r17,4
1000a420:	b0c00007 	ldb	r3,0(r22)
1000a424:	003f7306 	br	1000a1f4 <__alt_data_end+0xf800a1f4>
1000a428:	00800c04 	movi	r2,48
1000a42c:	d9402217 	ldw	r5,136(sp)
1000a430:	d8801d05 	stb	r2,116(sp)
1000a434:	00801e04 	movi	r2,120
1000a438:	d8801d45 	stb	r2,117(sp)
1000a43c:	d8001d85 	stb	zero,118(sp)
1000a440:	b811883a 	mov	r8,r23
1000a444:	28c00104 	addi	r3,r5,4
1000a448:	2cc00017 	ldw	r19,0(r5)
1000a44c:	0029883a 	mov	r20,zero
1000a450:	88800094 	ori	r2,r17,2
1000a454:	80032516 	blt	r16,zero,1000b0ec <___vfiprintf_internal_r+0x106c>
1000a458:	00bfdfc4 	movi	r2,-129
1000a45c:	88a2703a 	and	r17,r17,r2
1000a460:	d8c02215 	stw	r3,136(sp)
1000a464:	8c400094 	ori	r17,r17,2
1000a468:	98032a1e 	bne	r19,zero,1000b114 <___vfiprintf_internal_r+0x1094>
1000a46c:	00840074 	movhi	r2,4097
1000a470:	1089d004 	addi	r2,r2,10048
1000a474:	d8802615 	stw	r2,152(sp)
1000a478:	002b883a 	mov	r21,zero
1000a47c:	8001741e 	bne	r16,zero,1000aa50 <___vfiprintf_internal_r+0x9d0>
1000a480:	0021883a 	mov	r16,zero
1000a484:	0029883a 	mov	r20,zero
1000a488:	ddc01a04 	addi	r23,sp,104
1000a48c:	8027883a 	mov	r19,r16
1000a490:	8500010e 	bge	r16,r20,1000a498 <___vfiprintf_internal_r+0x418>
1000a494:	a027883a 	mov	r19,r20
1000a498:	ad403fcc 	andi	r21,r21,255
1000a49c:	ad40201c 	xori	r21,r21,128
1000a4a0:	ad7fe004 	addi	r21,r21,-128
1000a4a4:	a8000126 	beq	r21,zero,1000a4ac <___vfiprintf_internal_r+0x42c>
1000a4a8:	9cc00044 	addi	r19,r19,1
1000a4ac:	89c0008c 	andi	r7,r17,2
1000a4b0:	38000126 	beq	r7,zero,1000a4b8 <___vfiprintf_internal_r+0x438>
1000a4b4:	9cc00084 	addi	r19,r19,2
1000a4b8:	88c0210c 	andi	r3,r17,132
1000a4bc:	1801dd1e 	bne	r3,zero,1000ac34 <___vfiprintf_internal_r+0xbb4>
1000a4c0:	d9402517 	ldw	r5,148(sp)
1000a4c4:	2cebc83a 	sub	r21,r5,r19
1000a4c8:	0541da0e 	bge	zero,r21,1000ac34 <___vfiprintf_internal_r+0xbb4>
1000a4cc:	07000404 	movi	fp,16
1000a4d0:	d8801c17 	ldw	r2,112(sp)
1000a4d4:	e543be0e 	bge	fp,r21,1000b3d0 <___vfiprintf_internal_r+0x1350>
1000a4d8:	01440074 	movhi	r5,4097
1000a4dc:	294a3504 	addi	r5,r5,10452
1000a4e0:	dc002715 	stw	r16,156(sp)
1000a4e4:	d9801b17 	ldw	r6,108(sp)
1000a4e8:	a821883a 	mov	r16,r21
1000a4ec:	d9402315 	stw	r5,140(sp)
1000a4f0:	028001c4 	movi	r10,7
1000a4f4:	d9c02915 	stw	r7,164(sp)
1000a4f8:	182b883a 	mov	r21,r3
1000a4fc:	00000506 	br	1000a514 <___vfiprintf_internal_r+0x494>
1000a500:	31000084 	addi	r4,r6,2
1000a504:	42000204 	addi	r8,r8,8
1000a508:	180d883a 	mov	r6,r3
1000a50c:	843ffc04 	addi	r16,r16,-16
1000a510:	e4000f0e 	bge	fp,r16,1000a550 <___vfiprintf_internal_r+0x4d0>
1000a514:	01040074 	movhi	r4,4097
1000a518:	10800404 	addi	r2,r2,16
1000a51c:	30c00044 	addi	r3,r6,1
1000a520:	210a3504 	addi	r4,r4,10452
1000a524:	41000015 	stw	r4,0(r8)
1000a528:	47000115 	stw	fp,4(r8)
1000a52c:	d8801c15 	stw	r2,112(sp)
1000a530:	d8c01b15 	stw	r3,108(sp)
1000a534:	50fff20e 	bge	r10,r3,1000a500 <__alt_data_end+0xf800a500>
1000a538:	1001b21e 	bne	r2,zero,1000ac04 <___vfiprintf_internal_r+0xb84>
1000a53c:	843ffc04 	addi	r16,r16,-16
1000a540:	000d883a 	mov	r6,zero
1000a544:	01000044 	movi	r4,1
1000a548:	d811883a 	mov	r8,sp
1000a54c:	e43ff116 	blt	fp,r16,1000a514 <__alt_data_end+0xf800a514>
1000a550:	a807883a 	mov	r3,r21
1000a554:	d9c02917 	ldw	r7,164(sp)
1000a558:	802b883a 	mov	r21,r16
1000a55c:	dc002717 	ldw	r16,156(sp)
1000a560:	d9402317 	ldw	r5,140(sp)
1000a564:	a885883a 	add	r2,r21,r2
1000a568:	45400115 	stw	r21,4(r8)
1000a56c:	41400015 	stw	r5,0(r8)
1000a570:	d8801c15 	stw	r2,112(sp)
1000a574:	d9001b15 	stw	r4,108(sp)
1000a578:	014001c4 	movi	r5,7
1000a57c:	29026216 	blt	r5,r4,1000af08 <___vfiprintf_internal_r+0xe88>
1000a580:	d9801d87 	ldb	r6,118(sp)
1000a584:	42000204 	addi	r8,r8,8
1000a588:	21400044 	addi	r5,r4,1
1000a58c:	3001ae1e 	bne	r6,zero,1000ac48 <___vfiprintf_internal_r+0xbc8>
1000a590:	3801bb26 	beq	r7,zero,1000ac80 <___vfiprintf_internal_r+0xc00>
1000a594:	d9001d04 	addi	r4,sp,116
1000a598:	10800084 	addi	r2,r2,2
1000a59c:	41000015 	stw	r4,0(r8)
1000a5a0:	01000084 	movi	r4,2
1000a5a4:	41000115 	stw	r4,4(r8)
1000a5a8:	d8801c15 	stw	r2,112(sp)
1000a5ac:	d9401b15 	stw	r5,108(sp)
1000a5b0:	010001c4 	movi	r4,7
1000a5b4:	2142680e 	bge	r4,r5,1000af58 <___vfiprintf_internal_r+0xed8>
1000a5b8:	1002b11e 	bne	r2,zero,1000b080 <___vfiprintf_internal_r+0x1000>
1000a5bc:	01802004 	movi	r6,128
1000a5c0:	01400044 	movi	r5,1
1000a5c4:	0009883a 	mov	r4,zero
1000a5c8:	d811883a 	mov	r8,sp
1000a5cc:	1981ae1e 	bne	r3,r6,1000ac88 <___vfiprintf_internal_r+0xc08>
1000a5d0:	d8c02517 	ldw	r3,148(sp)
1000a5d4:	1cf9c83a 	sub	fp,r3,r19
1000a5d8:	0701ab0e 	bge	zero,fp,1000ac88 <___vfiprintf_internal_r+0xc08>
1000a5dc:	05400404 	movi	r21,16
1000a5e0:	af03a90e 	bge	r21,fp,1000b488 <___vfiprintf_internal_r+0x1408>
1000a5e4:	01440074 	movhi	r5,4097
1000a5e8:	294a3104 	addi	r5,r5,10436
1000a5ec:	d9402315 	stw	r5,140(sp)
1000a5f0:	01c001c4 	movi	r7,7
1000a5f4:	00000506 	br	1000a60c <___vfiprintf_internal_r+0x58c>
1000a5f8:	21800084 	addi	r6,r4,2
1000a5fc:	42000204 	addi	r8,r8,8
1000a600:	1809883a 	mov	r4,r3
1000a604:	e73ffc04 	addi	fp,fp,-16
1000a608:	af000d0e 	bge	r21,fp,1000a640 <___vfiprintf_internal_r+0x5c0>
1000a60c:	10800404 	addi	r2,r2,16
1000a610:	20c00044 	addi	r3,r4,1
1000a614:	44800015 	stw	r18,0(r8)
1000a618:	45400115 	stw	r21,4(r8)
1000a61c:	d8801c15 	stw	r2,112(sp)
1000a620:	d8c01b15 	stw	r3,108(sp)
1000a624:	38fff40e 	bge	r7,r3,1000a5f8 <__alt_data_end+0xf800a5f8>
1000a628:	10022b1e 	bne	r2,zero,1000aed8 <___vfiprintf_internal_r+0xe58>
1000a62c:	e73ffc04 	addi	fp,fp,-16
1000a630:	01800044 	movi	r6,1
1000a634:	0009883a 	mov	r4,zero
1000a638:	d811883a 	mov	r8,sp
1000a63c:	af3ff316 	blt	r21,fp,1000a60c <__alt_data_end+0xf800a60c>
1000a640:	d8c02317 	ldw	r3,140(sp)
1000a644:	1705883a 	add	r2,r2,fp
1000a648:	47000115 	stw	fp,4(r8)
1000a64c:	40c00015 	stw	r3,0(r8)
1000a650:	d8801c15 	stw	r2,112(sp)
1000a654:	d9801b15 	stw	r6,108(sp)
1000a658:	00c001c4 	movi	r3,7
1000a65c:	19829416 	blt	r3,r6,1000b0b0 <___vfiprintf_internal_r+0x1030>
1000a660:	8521c83a 	sub	r16,r16,r20
1000a664:	42000204 	addi	r8,r8,8
1000a668:	31400044 	addi	r5,r6,1
1000a66c:	3009883a 	mov	r4,r6
1000a670:	04018716 	blt	zero,r16,1000ac90 <___vfiprintf_internal_r+0xc10>
1000a674:	a085883a 	add	r2,r20,r2
1000a678:	45c00015 	stw	r23,0(r8)
1000a67c:	45000115 	stw	r20,4(r8)
1000a680:	d8801c15 	stw	r2,112(sp)
1000a684:	d9401b15 	stw	r5,108(sp)
1000a688:	00c001c4 	movi	r3,7
1000a68c:	1941c20e 	bge	r3,r5,1000ad98 <___vfiprintf_internal_r+0xd18>
1000a690:	1002531e 	bne	r2,zero,1000afe0 <___vfiprintf_internal_r+0xf60>
1000a694:	d8001b15 	stw	zero,108(sp)
1000a698:	8c40010c 	andi	r17,r17,4
1000a69c:	88023226 	beq	r17,zero,1000af68 <___vfiprintf_internal_r+0xee8>
1000a6a0:	d9002517 	ldw	r4,148(sp)
1000a6a4:	24e3c83a 	sub	r17,r4,r19
1000a6a8:	04432916 	blt	zero,r17,1000b350 <___vfiprintf_internal_r+0x12d0>
1000a6ac:	d8802517 	ldw	r2,148(sp)
1000a6b0:	14c0010e 	bge	r2,r19,1000a6b8 <___vfiprintf_internal_r+0x638>
1000a6b4:	9805883a 	mov	r2,r19
1000a6b8:	d8c02417 	ldw	r3,144(sp)
1000a6bc:	1887883a 	add	r3,r3,r2
1000a6c0:	d8c02415 	stw	r3,144(sp)
1000a6c4:	d8001b15 	stw	zero,108(sp)
1000a6c8:	d811883a 	mov	r8,sp
1000a6cc:	003ea006 	br	1000a150 <__alt_data_end+0xf800a150>
1000a6d0:	8c400814 	ori	r17,r17,32
1000a6d4:	b0c00007 	ldb	r3,0(r22)
1000a6d8:	003ec606 	br	1000a1f4 <__alt_data_end+0xf800a1f4>
1000a6dc:	b0c00007 	ldb	r3,0(r22)
1000a6e0:	00801b04 	movi	r2,108
1000a6e4:	18832026 	beq	r3,r2,1000b368 <___vfiprintf_internal_r+0x12e8>
1000a6e8:	8c400414 	ori	r17,r17,16
1000a6ec:	003ec106 	br	1000a1f4 <__alt_data_end+0xf800a1f4>
1000a6f0:	9cc03fcc 	andi	r19,r19,255
1000a6f4:	b811883a 	mov	r8,r23
1000a6f8:	9803981e 	bne	r19,zero,1000b55c <___vfiprintf_internal_r+0x14dc>
1000a6fc:	8880080c 	andi	r2,r17,32
1000a700:	1002be26 	beq	r2,zero,1000b1fc <___vfiprintf_internal_r+0x117c>
1000a704:	d9002217 	ldw	r4,136(sp)
1000a708:	d9402417 	ldw	r5,144(sp)
1000a70c:	20800017 	ldw	r2,0(r4)
1000a710:	2807d7fa 	srai	r3,r5,31
1000a714:	21000104 	addi	r4,r4,4
1000a718:	d9002215 	stw	r4,136(sp)
1000a71c:	11400015 	stw	r5,0(r2)
1000a720:	10c00115 	stw	r3,4(r2)
1000a724:	003e8a06 	br	1000a150 <__alt_data_end+0xf800a150>
1000a728:	9cc03fcc 	andi	r19,r19,255
1000a72c:	b811883a 	mov	r8,r23
1000a730:	9803871e 	bne	r19,zero,1000b550 <___vfiprintf_internal_r+0x14d0>
1000a734:	8880080c 	andi	r2,r17,32
1000a738:	10009a26 	beq	r2,zero,1000a9a4 <___vfiprintf_internal_r+0x924>
1000a73c:	d9002217 	ldw	r4,136(sp)
1000a740:	d8001d85 	stb	zero,118(sp)
1000a744:	20800204 	addi	r2,r4,8
1000a748:	24c00017 	ldw	r19,0(r4)
1000a74c:	25000117 	ldw	r20,4(r4)
1000a750:	8002a416 	blt	r16,zero,1000b1e4 <___vfiprintf_internal_r+0x1164>
1000a754:	013fdfc4 	movi	r4,-129
1000a758:	9d06b03a 	or	r3,r19,r20
1000a75c:	d8802215 	stw	r2,136(sp)
1000a760:	8922703a 	and	r17,r17,r4
1000a764:	18009b26 	beq	r3,zero,1000a9d4 <___vfiprintf_internal_r+0x954>
1000a768:	002b883a 	mov	r21,zero
1000a76c:	ddc01a04 	addi	r23,sp,104
1000a770:	9806d0fa 	srli	r3,r19,3
1000a774:	a008977a 	slli	r4,r20,29
1000a778:	a028d0fa 	srli	r20,r20,3
1000a77c:	9cc001cc 	andi	r19,r19,7
1000a780:	98800c04 	addi	r2,r19,48
1000a784:	bdffffc4 	addi	r23,r23,-1
1000a788:	20e6b03a 	or	r19,r4,r3
1000a78c:	b8800005 	stb	r2,0(r23)
1000a790:	9d06b03a 	or	r3,r19,r20
1000a794:	183ff61e 	bne	r3,zero,1000a770 <__alt_data_end+0xf800a770>
1000a798:	88c0004c 	andi	r3,r17,1
1000a79c:	18021f1e 	bne	r3,zero,1000b01c <___vfiprintf_internal_r+0xf9c>
1000a7a0:	d9401e17 	ldw	r5,120(sp)
1000a7a4:	2de9c83a 	sub	r20,r5,r23
1000a7a8:	003f3806 	br	1000a48c <__alt_data_end+0xf800a48c>
1000a7ac:	9cc03fcc 	andi	r19,r19,255
1000a7b0:	b811883a 	mov	r8,r23
1000a7b4:	98034f1e 	bne	r19,zero,1000b4f4 <___vfiprintf_internal_r+0x1474>
1000a7b8:	00840074 	movhi	r2,4097
1000a7bc:	1089d004 	addi	r2,r2,10048
1000a7c0:	d8802615 	stw	r2,152(sp)
1000a7c4:	8880080c 	andi	r2,r17,32
1000a7c8:	1000ac26 	beq	r2,zero,1000aa7c <___vfiprintf_internal_r+0x9fc>
1000a7cc:	d9002217 	ldw	r4,136(sp)
1000a7d0:	24c00017 	ldw	r19,0(r4)
1000a7d4:	25000117 	ldw	r20,4(r4)
1000a7d8:	21000204 	addi	r4,r4,8
1000a7dc:	d9002215 	stw	r4,136(sp)
1000a7e0:	8880004c 	andi	r2,r17,1
1000a7e4:	1001e726 	beq	r2,zero,1000af84 <___vfiprintf_internal_r+0xf04>
1000a7e8:	9d04b03a 	or	r2,r19,r20
1000a7ec:	10025c1e 	bne	r2,zero,1000b160 <___vfiprintf_internal_r+0x10e0>
1000a7f0:	d8001d85 	stb	zero,118(sp)
1000a7f4:	80024416 	blt	r16,zero,1000b108 <___vfiprintf_internal_r+0x1088>
1000a7f8:	00bfdfc4 	movi	r2,-129
1000a7fc:	88a2703a 	and	r17,r17,r2
1000a800:	003f1d06 	br	1000a478 <__alt_data_end+0xf800a478>
1000a804:	d8c02217 	ldw	r3,136(sp)
1000a808:	04c00044 	movi	r19,1
1000a80c:	b811883a 	mov	r8,r23
1000a810:	18800017 	ldw	r2,0(r3)
1000a814:	18c00104 	addi	r3,r3,4
1000a818:	d8001d85 	stb	zero,118(sp)
1000a81c:	d8801005 	stb	r2,64(sp)
1000a820:	d8c02215 	stw	r3,136(sp)
1000a824:	9829883a 	mov	r20,r19
1000a828:	ddc01004 	addi	r23,sp,64
1000a82c:	0021883a 	mov	r16,zero
1000a830:	003f1e06 	br	1000a4ac <__alt_data_end+0xf800a4ac>
1000a834:	9cc03fcc 	andi	r19,r19,255
1000a838:	b811883a 	mov	r8,r23
1000a83c:	9803331e 	bne	r19,zero,1000b50c <___vfiprintf_internal_r+0x148c>
1000a840:	8880080c 	andi	r2,r17,32
1000a844:	10004826 	beq	r2,zero,1000a968 <___vfiprintf_internal_r+0x8e8>
1000a848:	d9002217 	ldw	r4,136(sp)
1000a84c:	20800117 	ldw	r2,4(r4)
1000a850:	24c00017 	ldw	r19,0(r4)
1000a854:	21000204 	addi	r4,r4,8
1000a858:	d9002215 	stw	r4,136(sp)
1000a85c:	1029883a 	mov	r20,r2
1000a860:	10024c16 	blt	r2,zero,1000b194 <___vfiprintf_internal_r+0x1114>
1000a864:	dd401d83 	ldbu	r21,118(sp)
1000a868:	80007116 	blt	r16,zero,1000aa30 <___vfiprintf_internal_r+0x9b0>
1000a86c:	00ffdfc4 	movi	r3,-129
1000a870:	9d04b03a 	or	r2,r19,r20
1000a874:	88e2703a 	and	r17,r17,r3
1000a878:	1000d126 	beq	r2,zero,1000abc0 <___vfiprintf_internal_r+0xb40>
1000a87c:	a0023526 	beq	r20,zero,1000b154 <___vfiprintf_internal_r+0x10d4>
1000a880:	ddc01a04 	addi	r23,sp,104
1000a884:	4039883a 	mov	fp,r8
1000a888:	9809883a 	mov	r4,r19
1000a88c:	a00b883a 	mov	r5,r20
1000a890:	01800284 	movi	r6,10
1000a894:	000f883a 	mov	r7,zero
1000a898:	000c6b80 	call	1000c6b8 <__umoddi3>
1000a89c:	10800c04 	addi	r2,r2,48
1000a8a0:	bdffffc4 	addi	r23,r23,-1
1000a8a4:	9809883a 	mov	r4,r19
1000a8a8:	a00b883a 	mov	r5,r20
1000a8ac:	b8800005 	stb	r2,0(r23)
1000a8b0:	01800284 	movi	r6,10
1000a8b4:	000f883a 	mov	r7,zero
1000a8b8:	000c0bc0 	call	1000c0bc <__udivdi3>
1000a8bc:	1027883a 	mov	r19,r2
1000a8c0:	10c4b03a 	or	r2,r2,r3
1000a8c4:	1829883a 	mov	r20,r3
1000a8c8:	103fef1e 	bne	r2,zero,1000a888 <__alt_data_end+0xf800a888>
1000a8cc:	d9001e17 	ldw	r4,120(sp)
1000a8d0:	e011883a 	mov	r8,fp
1000a8d4:	25e9c83a 	sub	r20,r4,r23
1000a8d8:	003eec06 	br	1000a48c <__alt_data_end+0xf800a48c>
1000a8dc:	d8802307 	ldb	r2,140(sp)
1000a8e0:	1002361e 	bne	r2,zero,1000b1bc <___vfiprintf_internal_r+0x113c>
1000a8e4:	00c00804 	movi	r3,32
1000a8e8:	d8c02305 	stb	r3,140(sp)
1000a8ec:	04c00044 	movi	r19,1
1000a8f0:	b0c00007 	ldb	r3,0(r22)
1000a8f4:	003e3f06 	br	1000a1f4 <__alt_data_end+0xf800a1f4>
1000a8f8:	8c400054 	ori	r17,r17,1
1000a8fc:	b0c00007 	ldb	r3,0(r22)
1000a900:	003e3c06 	br	1000a1f4 <__alt_data_end+0xf800a1f4>
1000a904:	8c402014 	ori	r17,r17,128
1000a908:	b0c00007 	ldb	r3,0(r22)
1000a90c:	003e3906 	br	1000a1f4 <__alt_data_end+0xf800a1f4>
1000a910:	dc002715 	stw	r16,156(sp)
1000a914:	d8002515 	stw	zero,148(sp)
1000a918:	1f3ff404 	addi	fp,r3,-48
1000a91c:	0009883a 	mov	r4,zero
1000a920:	b021883a 	mov	r16,r22
1000a924:	01400284 	movi	r5,10
1000a928:	000cc7c0 	call	1000cc7c <__mulsi3>
1000a92c:	80c00007 	ldb	r3,0(r16)
1000a930:	e089883a 	add	r4,fp,r2
1000a934:	b5800044 	addi	r22,r22,1
1000a938:	1f3ff404 	addi	fp,r3,-48
1000a93c:	b021883a 	mov	r16,r22
1000a940:	af3ff82e 	bgeu	r21,fp,1000a924 <__alt_data_end+0xf800a924>
1000a944:	d9002515 	stw	r4,148(sp)
1000a948:	dc002717 	ldw	r16,156(sp)
1000a94c:	003e2a06 	br	1000a1f8 <__alt_data_end+0xf800a1f8>
1000a950:	9cc03fcc 	andi	r19,r19,255
1000a954:	b811883a 	mov	r8,r23
1000a958:	9802e91e 	bne	r19,zero,1000b500 <___vfiprintf_internal_r+0x1480>
1000a95c:	8c400414 	ori	r17,r17,16
1000a960:	8880080c 	andi	r2,r17,32
1000a964:	103fb81e 	bne	r2,zero,1000a848 <__alt_data_end+0xf800a848>
1000a968:	8880040c 	andi	r2,r17,16
1000a96c:	10022e26 	beq	r2,zero,1000b228 <___vfiprintf_internal_r+0x11a8>
1000a970:	d9402217 	ldw	r5,136(sp)
1000a974:	2cc00017 	ldw	r19,0(r5)
1000a978:	29400104 	addi	r5,r5,4
1000a97c:	d9402215 	stw	r5,136(sp)
1000a980:	9829d7fa 	srai	r20,r19,31
1000a984:	a005883a 	mov	r2,r20
1000a988:	003fb506 	br	1000a860 <__alt_data_end+0xf800a860>
1000a98c:	9cc03fcc 	andi	r19,r19,255
1000a990:	b811883a 	mov	r8,r23
1000a994:	9802fa1e 	bne	r19,zero,1000b580 <___vfiprintf_internal_r+0x1500>
1000a998:	8c400414 	ori	r17,r17,16
1000a99c:	8880080c 	andi	r2,r17,32
1000a9a0:	103f661e 	bne	r2,zero,1000a73c <__alt_data_end+0xf800a73c>
1000a9a4:	8880040c 	andi	r2,r17,16
1000a9a8:	10020626 	beq	r2,zero,1000b1c4 <___vfiprintf_internal_r+0x1144>
1000a9ac:	d9402217 	ldw	r5,136(sp)
1000a9b0:	d8001d85 	stb	zero,118(sp)
1000a9b4:	0029883a 	mov	r20,zero
1000a9b8:	28800104 	addi	r2,r5,4
1000a9bc:	2cc00017 	ldw	r19,0(r5)
1000a9c0:	80020816 	blt	r16,zero,1000b1e4 <___vfiprintf_internal_r+0x1164>
1000a9c4:	00ffdfc4 	movi	r3,-129
1000a9c8:	d8802215 	stw	r2,136(sp)
1000a9cc:	88e2703a 	and	r17,r17,r3
1000a9d0:	983f651e 	bne	r19,zero,1000a768 <__alt_data_end+0xf800a768>
1000a9d4:	002b883a 	mov	r21,zero
1000a9d8:	8002cf26 	beq	r16,zero,1000b518 <___vfiprintf_internal_r+0x1498>
1000a9dc:	0027883a 	mov	r19,zero
1000a9e0:	0029883a 	mov	r20,zero
1000a9e4:	003f6106 	br	1000a76c <__alt_data_end+0xf800a76c>
1000a9e8:	9cc03fcc 	andi	r19,r19,255
1000a9ec:	b811883a 	mov	r8,r23
1000a9f0:	9802e01e 	bne	r19,zero,1000b574 <___vfiprintf_internal_r+0x14f4>
1000a9f4:	8c400414 	ori	r17,r17,16
1000a9f8:	8880080c 	andi	r2,r17,32
1000a9fc:	1000641e 	bne	r2,zero,1000ab90 <___vfiprintf_internal_r+0xb10>
1000aa00:	8880040c 	andi	r2,r17,16
1000aa04:	1001c81e 	bne	r2,zero,1000b128 <___vfiprintf_internal_r+0x10a8>
1000aa08:	8880100c 	andi	r2,r17,64
1000aa0c:	d8001d85 	stb	zero,118(sp)
1000aa10:	1002281e 	bne	r2,zero,1000b2b4 <___vfiprintf_internal_r+0x1234>
1000aa14:	d9002217 	ldw	r4,136(sp)
1000aa18:	0029883a 	mov	r20,zero
1000aa1c:	20800104 	addi	r2,r4,4
1000aa20:	24c00017 	ldw	r19,0(r4)
1000aa24:	8001c60e 	bge	r16,zero,1000b140 <___vfiprintf_internal_r+0x10c0>
1000aa28:	d8802215 	stw	r2,136(sp)
1000aa2c:	002b883a 	mov	r21,zero
1000aa30:	9d04b03a 	or	r2,r19,r20
1000aa34:	103f911e 	bne	r2,zero,1000a87c <__alt_data_end+0xf800a87c>
1000aa38:	00800044 	movi	r2,1
1000aa3c:	10803fcc 	andi	r2,r2,255
1000aa40:	00c00044 	movi	r3,1
1000aa44:	10c05f26 	beq	r2,r3,1000abc4 <___vfiprintf_internal_r+0xb44>
1000aa48:	00c00084 	movi	r3,2
1000aa4c:	10ffe31e 	bne	r2,r3,1000a9dc <__alt_data_end+0xf800a9dc>
1000aa50:	0027883a 	mov	r19,zero
1000aa54:	0029883a 	mov	r20,zero
1000aa58:	00015106 	br	1000afa0 <___vfiprintf_internal_r+0xf20>
1000aa5c:	9cc03fcc 	andi	r19,r19,255
1000aa60:	b811883a 	mov	r8,r23
1000aa64:	9802c01e 	bne	r19,zero,1000b568 <___vfiprintf_internal_r+0x14e8>
1000aa68:	01440074 	movhi	r5,4097
1000aa6c:	2949cb04 	addi	r5,r5,10028
1000aa70:	d9402615 	stw	r5,152(sp)
1000aa74:	8880080c 	andi	r2,r17,32
1000aa78:	103f541e 	bne	r2,zero,1000a7cc <__alt_data_end+0xf800a7cc>
1000aa7c:	8880040c 	andi	r2,r17,16
1000aa80:	1001f226 	beq	r2,zero,1000b24c <___vfiprintf_internal_r+0x11cc>
1000aa84:	d9402217 	ldw	r5,136(sp)
1000aa88:	0029883a 	mov	r20,zero
1000aa8c:	2cc00017 	ldw	r19,0(r5)
1000aa90:	29400104 	addi	r5,r5,4
1000aa94:	d9402215 	stw	r5,136(sp)
1000aa98:	003f5106 	br	1000a7e0 <__alt_data_end+0xf800a7e0>
1000aa9c:	d8c02217 	ldw	r3,136(sp)
1000aaa0:	b811883a 	mov	r8,r23
1000aaa4:	d8001d85 	stb	zero,118(sp)
1000aaa8:	1dc00017 	ldw	r23,0(r3)
1000aaac:	1f000104 	addi	fp,r3,4
1000aab0:	b8025926 	beq	r23,zero,1000b418 <___vfiprintf_internal_r+0x1398>
1000aab4:	80023316 	blt	r16,zero,1000b384 <___vfiprintf_internal_r+0x1304>
1000aab8:	800d883a 	mov	r6,r16
1000aabc:	000b883a 	mov	r5,zero
1000aac0:	b809883a 	mov	r4,r23
1000aac4:	da002a15 	stw	r8,168(sp)
1000aac8:	00081c00 	call	100081c0 <memchr>
1000aacc:	da002a17 	ldw	r8,168(sp)
1000aad0:	10026826 	beq	r2,zero,1000b474 <___vfiprintf_internal_r+0x13f4>
1000aad4:	15e9c83a 	sub	r20,r2,r23
1000aad8:	dd401d83 	ldbu	r21,118(sp)
1000aadc:	df002215 	stw	fp,136(sp)
1000aae0:	0021883a 	mov	r16,zero
1000aae4:	003e6906 	br	1000a48c <__alt_data_end+0xf800a48c>
1000aae8:	9cc03fcc 	andi	r19,r19,255
1000aaec:	b811883a 	mov	r8,r23
1000aaf0:	983fc126 	beq	r19,zero,1000a9f8 <__alt_data_end+0xf800a9f8>
1000aaf4:	d8c02303 	ldbu	r3,140(sp)
1000aaf8:	d8c01d85 	stb	r3,118(sp)
1000aafc:	003fbe06 	br	1000a9f8 <__alt_data_end+0xf800a9f8>
1000ab00:	d9002217 	ldw	r4,136(sp)
1000ab04:	d9402217 	ldw	r5,136(sp)
1000ab08:	21000017 	ldw	r4,0(r4)
1000ab0c:	28800104 	addi	r2,r5,4
1000ab10:	d9002515 	stw	r4,148(sp)
1000ab14:	203e3d16 	blt	r4,zero,1000a40c <__alt_data_end+0xf800a40c>
1000ab18:	d8802215 	stw	r2,136(sp)
1000ab1c:	b0c00007 	ldb	r3,0(r22)
1000ab20:	003db406 	br	1000a1f4 <__alt_data_end+0xf800a1f4>
1000ab24:	00c00ac4 	movi	r3,43
1000ab28:	d8c02305 	stb	r3,140(sp)
1000ab2c:	04c00044 	movi	r19,1
1000ab30:	b0c00007 	ldb	r3,0(r22)
1000ab34:	003daf06 	br	1000a1f4 <__alt_data_end+0xf800a1f4>
1000ab38:	b0c00007 	ldb	r3,0(r22)
1000ab3c:	01000a84 	movi	r4,42
1000ab40:	b4000044 	addi	r16,r22,1
1000ab44:	19025e26 	beq	r3,r4,1000b4c0 <___vfiprintf_internal_r+0x1440>
1000ab48:	1f3ff404 	addi	fp,r3,-48
1000ab4c:	0009883a 	mov	r4,zero
1000ab50:	af025236 	bltu	r21,fp,1000b49c <___vfiprintf_internal_r+0x141c>
1000ab54:	01400284 	movi	r5,10
1000ab58:	000cc7c0 	call	1000cc7c <__mulsi3>
1000ab5c:	80c00007 	ldb	r3,0(r16)
1000ab60:	1709883a 	add	r4,r2,fp
1000ab64:	85800044 	addi	r22,r16,1
1000ab68:	1f3ff404 	addi	fp,r3,-48
1000ab6c:	b021883a 	mov	r16,r22
1000ab70:	af3ff82e 	bgeu	r21,fp,1000ab54 <__alt_data_end+0xf800ab54>
1000ab74:	2021883a 	mov	r16,r4
1000ab78:	203d9f0e 	bge	r4,zero,1000a1f8 <__alt_data_end+0xf800a1f8>
1000ab7c:	043fffc4 	movi	r16,-1
1000ab80:	003d9d06 	br	1000a1f8 <__alt_data_end+0xf800a1f8>
1000ab84:	8c401014 	ori	r17,r17,64
1000ab88:	b0c00007 	ldb	r3,0(r22)
1000ab8c:	003d9906 	br	1000a1f4 <__alt_data_end+0xf800a1f4>
1000ab90:	d9002217 	ldw	r4,136(sp)
1000ab94:	d8001d85 	stb	zero,118(sp)
1000ab98:	20c00204 	addi	r3,r4,8
1000ab9c:	24c00017 	ldw	r19,0(r4)
1000aba0:	25000117 	ldw	r20,4(r4)
1000aba4:	8001e716 	blt	r16,zero,1000b344 <___vfiprintf_internal_r+0x12c4>
1000aba8:	013fdfc4 	movi	r4,-129
1000abac:	9d04b03a 	or	r2,r19,r20
1000abb0:	d8c02215 	stw	r3,136(sp)
1000abb4:	8922703a 	and	r17,r17,r4
1000abb8:	002b883a 	mov	r21,zero
1000abbc:	103f2f1e 	bne	r2,zero,1000a87c <__alt_data_end+0xf800a87c>
1000abc0:	803e2f26 	beq	r16,zero,1000a480 <__alt_data_end+0xf800a480>
1000abc4:	0027883a 	mov	r19,zero
1000abc8:	9cc00c04 	addi	r19,r19,48
1000abcc:	dcc019c5 	stb	r19,103(sp)
1000abd0:	dd002817 	ldw	r20,160(sp)
1000abd4:	ddc019c4 	addi	r23,sp,103
1000abd8:	003e2c06 	br	1000a48c <__alt_data_end+0xf800a48c>
1000abdc:	9cc03fcc 	andi	r19,r19,255
1000abe0:	b811883a 	mov	r8,r23
1000abe4:	9802571e 	bne	r19,zero,1000b544 <___vfiprintf_internal_r+0x14c4>
1000abe8:	18005726 	beq	r3,zero,1000ad48 <___vfiprintf_internal_r+0xcc8>
1000abec:	04c00044 	movi	r19,1
1000abf0:	d8c01005 	stb	r3,64(sp)
1000abf4:	d8001d85 	stb	zero,118(sp)
1000abf8:	9829883a 	mov	r20,r19
1000abfc:	ddc01004 	addi	r23,sp,64
1000ac00:	003f0a06 	br	1000a82c <__alt_data_end+0xf800a82c>
1000ac04:	d9402017 	ldw	r5,128(sp)
1000ac08:	d9002117 	ldw	r4,132(sp)
1000ac0c:	d9801a04 	addi	r6,sp,104
1000ac10:	da802a15 	stw	r10,168(sp)
1000ac14:	0009f6c0 	call	10009f6c <__sprint_r.part.0>
1000ac18:	da802a17 	ldw	r10,168(sp)
1000ac1c:	1000501e 	bne	r2,zero,1000ad60 <___vfiprintf_internal_r+0xce0>
1000ac20:	d9801b17 	ldw	r6,108(sp)
1000ac24:	d8801c17 	ldw	r2,112(sp)
1000ac28:	d811883a 	mov	r8,sp
1000ac2c:	31000044 	addi	r4,r6,1
1000ac30:	003e3606 	br	1000a50c <__alt_data_end+0xf800a50c>
1000ac34:	d9001b17 	ldw	r4,108(sp)
1000ac38:	d8801c17 	ldw	r2,112(sp)
1000ac3c:	21400044 	addi	r5,r4,1
1000ac40:	d9801d87 	ldb	r6,118(sp)
1000ac44:	303e5226 	beq	r6,zero,1000a590 <__alt_data_end+0xf800a590>
1000ac48:	01800044 	movi	r6,1
1000ac4c:	d9001d84 	addi	r4,sp,118
1000ac50:	1185883a 	add	r2,r2,r6
1000ac54:	41000015 	stw	r4,0(r8)
1000ac58:	41800115 	stw	r6,4(r8)
1000ac5c:	d8801c15 	stw	r2,112(sp)
1000ac60:	d9401b15 	stw	r5,108(sp)
1000ac64:	010001c4 	movi	r4,7
1000ac68:	2140b00e 	bge	r4,r5,1000af2c <___vfiprintf_internal_r+0xeac>
1000ac6c:	1000f61e 	bne	r2,zero,1000b048 <___vfiprintf_internal_r+0xfc8>
1000ac70:	3800b31e 	bne	r7,zero,1000af40 <___vfiprintf_internal_r+0xec0>
1000ac74:	0009883a 	mov	r4,zero
1000ac78:	300b883a 	mov	r5,r6
1000ac7c:	d811883a 	mov	r8,sp
1000ac80:	01802004 	movi	r6,128
1000ac84:	19be5226 	beq	r3,r6,1000a5d0 <__alt_data_end+0xf800a5d0>
1000ac88:	8521c83a 	sub	r16,r16,r20
1000ac8c:	043e790e 	bge	zero,r16,1000a674 <__alt_data_end+0xf800a674>
1000ac90:	05400404 	movi	r21,16
1000ac94:	ac01b00e 	bge	r21,r16,1000b358 <___vfiprintf_internal_r+0x12d8>
1000ac98:	01440074 	movhi	r5,4097
1000ac9c:	294a3104 	addi	r5,r5,10436
1000aca0:	d9402315 	stw	r5,140(sp)
1000aca4:	070001c4 	movi	fp,7
1000aca8:	00000506 	br	1000acc0 <___vfiprintf_internal_r+0xc40>
1000acac:	21400084 	addi	r5,r4,2
1000acb0:	42000204 	addi	r8,r8,8
1000acb4:	1809883a 	mov	r4,r3
1000acb8:	843ffc04 	addi	r16,r16,-16
1000acbc:	ac000d0e 	bge	r21,r16,1000acf4 <___vfiprintf_internal_r+0xc74>
1000acc0:	10800404 	addi	r2,r2,16
1000acc4:	20c00044 	addi	r3,r4,1
1000acc8:	44800015 	stw	r18,0(r8)
1000accc:	45400115 	stw	r21,4(r8)
1000acd0:	d8801c15 	stw	r2,112(sp)
1000acd4:	d8c01b15 	stw	r3,108(sp)
1000acd8:	e0fff40e 	bge	fp,r3,1000acac <__alt_data_end+0xf800acac>
1000acdc:	1000101e 	bne	r2,zero,1000ad20 <___vfiprintf_internal_r+0xca0>
1000ace0:	843ffc04 	addi	r16,r16,-16
1000ace4:	01400044 	movi	r5,1
1000ace8:	0009883a 	mov	r4,zero
1000acec:	d811883a 	mov	r8,sp
1000acf0:	ac3ff316 	blt	r21,r16,1000acc0 <__alt_data_end+0xf800acc0>
1000acf4:	d8c02317 	ldw	r3,140(sp)
1000acf8:	1405883a 	add	r2,r2,r16
1000acfc:	44000115 	stw	r16,4(r8)
1000ad00:	40c00015 	stw	r3,0(r8)
1000ad04:	d8801c15 	stw	r2,112(sp)
1000ad08:	d9401b15 	stw	r5,108(sp)
1000ad0c:	00c001c4 	movi	r3,7
1000ad10:	19401916 	blt	r3,r5,1000ad78 <___vfiprintf_internal_r+0xcf8>
1000ad14:	42000204 	addi	r8,r8,8
1000ad18:	29400044 	addi	r5,r5,1
1000ad1c:	003e5506 	br	1000a674 <__alt_data_end+0xf800a674>
1000ad20:	d9402017 	ldw	r5,128(sp)
1000ad24:	d9002117 	ldw	r4,132(sp)
1000ad28:	d9801a04 	addi	r6,sp,104
1000ad2c:	0009f6c0 	call	10009f6c <__sprint_r.part.0>
1000ad30:	10000b1e 	bne	r2,zero,1000ad60 <___vfiprintf_internal_r+0xce0>
1000ad34:	d9001b17 	ldw	r4,108(sp)
1000ad38:	d8801c17 	ldw	r2,112(sp)
1000ad3c:	d811883a 	mov	r8,sp
1000ad40:	21400044 	addi	r5,r4,1
1000ad44:	003fdc06 	br	1000acb8 <__alt_data_end+0xf800acb8>
1000ad48:	d8801c17 	ldw	r2,112(sp)
1000ad4c:	10000426 	beq	r2,zero,1000ad60 <___vfiprintf_internal_r+0xce0>
1000ad50:	d9402017 	ldw	r5,128(sp)
1000ad54:	d9002117 	ldw	r4,132(sp)
1000ad58:	d9801a04 	addi	r6,sp,104
1000ad5c:	0009f6c0 	call	10009f6c <__sprint_r.part.0>
1000ad60:	d9402017 	ldw	r5,128(sp)
1000ad64:	2880030b 	ldhu	r2,12(r5)
1000ad68:	1080100c 	andi	r2,r2,64
1000ad6c:	10014d1e 	bne	r2,zero,1000b2a4 <___vfiprintf_internal_r+0x1224>
1000ad70:	d8802417 	ldw	r2,144(sp)
1000ad74:	003d9706 	br	1000a3d4 <__alt_data_end+0xf800a3d4>
1000ad78:	1000d21e 	bne	r2,zero,1000b0c4 <___vfiprintf_internal_r+0x1044>
1000ad7c:	00c00044 	movi	r3,1
1000ad80:	a005883a 	mov	r2,r20
1000ad84:	ddc00015 	stw	r23,0(sp)
1000ad88:	dd000115 	stw	r20,4(sp)
1000ad8c:	dd001c15 	stw	r20,112(sp)
1000ad90:	d8c01b15 	stw	r3,108(sp)
1000ad94:	d811883a 	mov	r8,sp
1000ad98:	42000204 	addi	r8,r8,8
1000ad9c:	8c40010c 	andi	r17,r17,4
1000ada0:	88004026 	beq	r17,zero,1000aea4 <___vfiprintf_internal_r+0xe24>
1000ada4:	d9002517 	ldw	r4,148(sp)
1000ada8:	24e3c83a 	sub	r17,r4,r19
1000adac:	04403d0e 	bge	zero,r17,1000aea4 <___vfiprintf_internal_r+0xe24>
1000adb0:	04000404 	movi	r16,16
1000adb4:	8441a90e 	bge	r16,r17,1000b45c <___vfiprintf_internal_r+0x13dc>
1000adb8:	00c40074 	movhi	r3,4097
1000adbc:	18ca3504 	addi	r3,r3,10452
1000adc0:	d9001b17 	ldw	r4,108(sp)
1000adc4:	d8c02315 	stw	r3,140(sp)
1000adc8:	050001c4 	movi	r20,7
1000adcc:	dd402117 	ldw	r21,132(sp)
1000add0:	ddc02017 	ldw	r23,128(sp)
1000add4:	00000506 	br	1000adec <___vfiprintf_internal_r+0xd6c>
1000add8:	21400084 	addi	r5,r4,2
1000addc:	42000204 	addi	r8,r8,8
1000ade0:	1809883a 	mov	r4,r3
1000ade4:	8c7ffc04 	addi	r17,r17,-16
1000ade8:	84400f0e 	bge	r16,r17,1000ae28 <___vfiprintf_internal_r+0xda8>
1000adec:	01440074 	movhi	r5,4097
1000adf0:	10800404 	addi	r2,r2,16
1000adf4:	20c00044 	addi	r3,r4,1
1000adf8:	294a3504 	addi	r5,r5,10452
1000adfc:	41400015 	stw	r5,0(r8)
1000ae00:	44000115 	stw	r16,4(r8)
1000ae04:	d8801c15 	stw	r2,112(sp)
1000ae08:	d8c01b15 	stw	r3,108(sp)
1000ae0c:	a0fff20e 	bge	r20,r3,1000add8 <__alt_data_end+0xf800add8>
1000ae10:	1000141e 	bne	r2,zero,1000ae64 <___vfiprintf_internal_r+0xde4>
1000ae14:	8c7ffc04 	addi	r17,r17,-16
1000ae18:	01400044 	movi	r5,1
1000ae1c:	0009883a 	mov	r4,zero
1000ae20:	d811883a 	mov	r8,sp
1000ae24:	847ff116 	blt	r16,r17,1000adec <__alt_data_end+0xf800adec>
1000ae28:	d8c02317 	ldw	r3,140(sp)
1000ae2c:	1445883a 	add	r2,r2,r17
1000ae30:	44400115 	stw	r17,4(r8)
1000ae34:	40c00015 	stw	r3,0(r8)
1000ae38:	d8801c15 	stw	r2,112(sp)
1000ae3c:	d9401b15 	stw	r5,108(sp)
1000ae40:	00c001c4 	movi	r3,7
1000ae44:	1940170e 	bge	r3,r5,1000aea4 <___vfiprintf_internal_r+0xe24>
1000ae48:	1000101e 	bne	r2,zero,1000ae8c <___vfiprintf_internal_r+0xe0c>
1000ae4c:	d8802517 	ldw	r2,148(sp)
1000ae50:	14c11616 	blt	r2,r19,1000b2ac <___vfiprintf_internal_r+0x122c>
1000ae54:	d9002417 	ldw	r4,144(sp)
1000ae58:	2089883a 	add	r4,r4,r2
1000ae5c:	d9002415 	stw	r4,144(sp)
1000ae60:	003e1806 	br	1000a6c4 <__alt_data_end+0xf800a6c4>
1000ae64:	d9801a04 	addi	r6,sp,104
1000ae68:	b80b883a 	mov	r5,r23
1000ae6c:	a809883a 	mov	r4,r21
1000ae70:	0009f6c0 	call	10009f6c <__sprint_r.part.0>
1000ae74:	103fba1e 	bne	r2,zero,1000ad60 <__alt_data_end+0xf800ad60>
1000ae78:	d9001b17 	ldw	r4,108(sp)
1000ae7c:	d8801c17 	ldw	r2,112(sp)
1000ae80:	d811883a 	mov	r8,sp
1000ae84:	21400044 	addi	r5,r4,1
1000ae88:	003fd606 	br	1000ade4 <__alt_data_end+0xf800ade4>
1000ae8c:	d9402017 	ldw	r5,128(sp)
1000ae90:	d9002117 	ldw	r4,132(sp)
1000ae94:	d9801a04 	addi	r6,sp,104
1000ae98:	0009f6c0 	call	10009f6c <__sprint_r.part.0>
1000ae9c:	103fb01e 	bne	r2,zero,1000ad60 <__alt_data_end+0xf800ad60>
1000aea0:	d8801c17 	ldw	r2,112(sp)
1000aea4:	d8c02517 	ldw	r3,148(sp)
1000aea8:	1cc0010e 	bge	r3,r19,1000aeb0 <___vfiprintf_internal_r+0xe30>
1000aeac:	9807883a 	mov	r3,r19
1000aeb0:	d9002417 	ldw	r4,144(sp)
1000aeb4:	20c9883a 	add	r4,r4,r3
1000aeb8:	d9002415 	stw	r4,144(sp)
1000aebc:	103e0126 	beq	r2,zero,1000a6c4 <__alt_data_end+0xf800a6c4>
1000aec0:	d9402017 	ldw	r5,128(sp)
1000aec4:	d9002117 	ldw	r4,132(sp)
1000aec8:	d9801a04 	addi	r6,sp,104
1000aecc:	0009f6c0 	call	10009f6c <__sprint_r.part.0>
1000aed0:	103dfc26 	beq	r2,zero,1000a6c4 <__alt_data_end+0xf800a6c4>
1000aed4:	003fa206 	br	1000ad60 <__alt_data_end+0xf800ad60>
1000aed8:	d9402017 	ldw	r5,128(sp)
1000aedc:	d9002117 	ldw	r4,132(sp)
1000aee0:	d9801a04 	addi	r6,sp,104
1000aee4:	d9c02b15 	stw	r7,172(sp)
1000aee8:	0009f6c0 	call	10009f6c <__sprint_r.part.0>
1000aeec:	d9c02b17 	ldw	r7,172(sp)
1000aef0:	103f9b1e 	bne	r2,zero,1000ad60 <__alt_data_end+0xf800ad60>
1000aef4:	d9001b17 	ldw	r4,108(sp)
1000aef8:	d8801c17 	ldw	r2,112(sp)
1000aefc:	d811883a 	mov	r8,sp
1000af00:	21800044 	addi	r6,r4,1
1000af04:	003dbf06 	br	1000a604 <__alt_data_end+0xf800a604>
1000af08:	1000d81e 	bne	r2,zero,1000b26c <___vfiprintf_internal_r+0x11ec>
1000af0c:	d9001d87 	ldb	r4,118(sp)
1000af10:	20000a26 	beq	r4,zero,1000af3c <___vfiprintf_internal_r+0xebc>
1000af14:	00800044 	movi	r2,1
1000af18:	d9001d84 	addi	r4,sp,118
1000af1c:	100b883a 	mov	r5,r2
1000af20:	d9000015 	stw	r4,0(sp)
1000af24:	d8800115 	stw	r2,4(sp)
1000af28:	d811883a 	mov	r8,sp
1000af2c:	2809883a 	mov	r4,r5
1000af30:	42000204 	addi	r8,r8,8
1000af34:	29400044 	addi	r5,r5,1
1000af38:	003d9506 	br	1000a590 <__alt_data_end+0xf800a590>
1000af3c:	3800fd26 	beq	r7,zero,1000b334 <___vfiprintf_internal_r+0x12b4>
1000af40:	00800084 	movi	r2,2
1000af44:	d9001d04 	addi	r4,sp,116
1000af48:	d9000015 	stw	r4,0(sp)
1000af4c:	d8800115 	stw	r2,4(sp)
1000af50:	01400044 	movi	r5,1
1000af54:	d811883a 	mov	r8,sp
1000af58:	2809883a 	mov	r4,r5
1000af5c:	42000204 	addi	r8,r8,8
1000af60:	29400044 	addi	r5,r5,1
1000af64:	003f4606 	br	1000ac80 <__alt_data_end+0xf800ac80>
1000af68:	d8802517 	ldw	r2,148(sp)
1000af6c:	14c0010e 	bge	r2,r19,1000af74 <___vfiprintf_internal_r+0xef4>
1000af70:	9805883a 	mov	r2,r19
1000af74:	d9402417 	ldw	r5,144(sp)
1000af78:	288b883a 	add	r5,r5,r2
1000af7c:	d9402415 	stw	r5,144(sp)
1000af80:	003dd006 	br	1000a6c4 <__alt_data_end+0xf800a6c4>
1000af84:	d8001d85 	stb	zero,118(sp)
1000af88:	80005d16 	blt	r16,zero,1000b100 <___vfiprintf_internal_r+0x1080>
1000af8c:	00ffdfc4 	movi	r3,-129
1000af90:	9d04b03a 	or	r2,r19,r20
1000af94:	88e2703a 	and	r17,r17,r3
1000af98:	103d3726 	beq	r2,zero,1000a478 <__alt_data_end+0xf800a478>
1000af9c:	002b883a 	mov	r21,zero
1000afa0:	d9002617 	ldw	r4,152(sp)
1000afa4:	ddc01a04 	addi	r23,sp,104
1000afa8:	988003cc 	andi	r2,r19,15
1000afac:	a006973a 	slli	r3,r20,28
1000afb0:	2085883a 	add	r2,r4,r2
1000afb4:	9826d13a 	srli	r19,r19,4
1000afb8:	10800003 	ldbu	r2,0(r2)
1000afbc:	a028d13a 	srli	r20,r20,4
1000afc0:	bdffffc4 	addi	r23,r23,-1
1000afc4:	1ce6b03a 	or	r19,r3,r19
1000afc8:	b8800005 	stb	r2,0(r23)
1000afcc:	9d04b03a 	or	r2,r19,r20
1000afd0:	103ff51e 	bne	r2,zero,1000afa8 <__alt_data_end+0xf800afa8>
1000afd4:	d8801e17 	ldw	r2,120(sp)
1000afd8:	15e9c83a 	sub	r20,r2,r23
1000afdc:	003d2b06 	br	1000a48c <__alt_data_end+0xf800a48c>
1000afe0:	d9402017 	ldw	r5,128(sp)
1000afe4:	d9002117 	ldw	r4,132(sp)
1000afe8:	d9801a04 	addi	r6,sp,104
1000afec:	0009f6c0 	call	10009f6c <__sprint_r.part.0>
1000aff0:	103f5b1e 	bne	r2,zero,1000ad60 <__alt_data_end+0xf800ad60>
1000aff4:	d8801c17 	ldw	r2,112(sp)
1000aff8:	d811883a 	mov	r8,sp
1000affc:	003f6706 	br	1000ad9c <__alt_data_end+0xf800ad9c>
1000b000:	d9402017 	ldw	r5,128(sp)
1000b004:	d9002117 	ldw	r4,132(sp)
1000b008:	d9801a04 	addi	r6,sp,104
1000b00c:	0009f6c0 	call	10009f6c <__sprint_r.part.0>
1000b010:	103f531e 	bne	r2,zero,1000ad60 <__alt_data_end+0xf800ad60>
1000b014:	d811883a 	mov	r8,sp
1000b018:	003cd906 	br	1000a380 <__alt_data_end+0xf800a380>
1000b01c:	10803fcc 	andi	r2,r2,255
1000b020:	1080201c 	xori	r2,r2,128
1000b024:	10bfe004 	addi	r2,r2,-128
1000b028:	00c00c04 	movi	r3,48
1000b02c:	10ffe926 	beq	r2,r3,1000afd4 <__alt_data_end+0xf800afd4>
1000b030:	b8ffffc5 	stb	r3,-1(r23)
1000b034:	d8c01e17 	ldw	r3,120(sp)
1000b038:	b8bfffc4 	addi	r2,r23,-1
1000b03c:	102f883a 	mov	r23,r2
1000b040:	18a9c83a 	sub	r20,r3,r2
1000b044:	003d1106 	br	1000a48c <__alt_data_end+0xf800a48c>
1000b048:	d9402017 	ldw	r5,128(sp)
1000b04c:	d9002117 	ldw	r4,132(sp)
1000b050:	d9801a04 	addi	r6,sp,104
1000b054:	d8c02a15 	stw	r3,168(sp)
1000b058:	d9c02b15 	stw	r7,172(sp)
1000b05c:	0009f6c0 	call	10009f6c <__sprint_r.part.0>
1000b060:	d8c02a17 	ldw	r3,168(sp)
1000b064:	d9c02b17 	ldw	r7,172(sp)
1000b068:	103f3d1e 	bne	r2,zero,1000ad60 <__alt_data_end+0xf800ad60>
1000b06c:	d9001b17 	ldw	r4,108(sp)
1000b070:	d8801c17 	ldw	r2,112(sp)
1000b074:	d811883a 	mov	r8,sp
1000b078:	21400044 	addi	r5,r4,1
1000b07c:	003d4406 	br	1000a590 <__alt_data_end+0xf800a590>
1000b080:	d9402017 	ldw	r5,128(sp)
1000b084:	d9002117 	ldw	r4,132(sp)
1000b088:	d9801a04 	addi	r6,sp,104
1000b08c:	d8c02a15 	stw	r3,168(sp)
1000b090:	0009f6c0 	call	10009f6c <__sprint_r.part.0>
1000b094:	d8c02a17 	ldw	r3,168(sp)
1000b098:	103f311e 	bne	r2,zero,1000ad60 <__alt_data_end+0xf800ad60>
1000b09c:	d9001b17 	ldw	r4,108(sp)
1000b0a0:	d8801c17 	ldw	r2,112(sp)
1000b0a4:	d811883a 	mov	r8,sp
1000b0a8:	21400044 	addi	r5,r4,1
1000b0ac:	003ef406 	br	1000ac80 <__alt_data_end+0xf800ac80>
1000b0b0:	1000bd1e 	bne	r2,zero,1000b3a8 <___vfiprintf_internal_r+0x1328>
1000b0b4:	01400044 	movi	r5,1
1000b0b8:	0009883a 	mov	r4,zero
1000b0bc:	d811883a 	mov	r8,sp
1000b0c0:	003ef106 	br	1000ac88 <__alt_data_end+0xf800ac88>
1000b0c4:	d9402017 	ldw	r5,128(sp)
1000b0c8:	d9002117 	ldw	r4,132(sp)
1000b0cc:	d9801a04 	addi	r6,sp,104
1000b0d0:	0009f6c0 	call	10009f6c <__sprint_r.part.0>
1000b0d4:	103f221e 	bne	r2,zero,1000ad60 <__alt_data_end+0xf800ad60>
1000b0d8:	d9401b17 	ldw	r5,108(sp)
1000b0dc:	d8801c17 	ldw	r2,112(sp)
1000b0e0:	d811883a 	mov	r8,sp
1000b0e4:	29400044 	addi	r5,r5,1
1000b0e8:	003d6206 	br	1000a674 <__alt_data_end+0xf800a674>
1000b0ec:	01440074 	movhi	r5,4097
1000b0f0:	2949d004 	addi	r5,r5,10048
1000b0f4:	d9402615 	stw	r5,152(sp)
1000b0f8:	d8c02215 	stw	r3,136(sp)
1000b0fc:	1023883a 	mov	r17,r2
1000b100:	9d04b03a 	or	r2,r19,r20
1000b104:	103fa51e 	bne	r2,zero,1000af9c <__alt_data_end+0xf800af9c>
1000b108:	002b883a 	mov	r21,zero
1000b10c:	00800084 	movi	r2,2
1000b110:	003e4a06 	br	1000aa3c <__alt_data_end+0xf800aa3c>
1000b114:	01440074 	movhi	r5,4097
1000b118:	2949d004 	addi	r5,r5,10048
1000b11c:	002b883a 	mov	r21,zero
1000b120:	d9402615 	stw	r5,152(sp)
1000b124:	003f9e06 	br	1000afa0 <__alt_data_end+0xf800afa0>
1000b128:	d9402217 	ldw	r5,136(sp)
1000b12c:	d8001d85 	stb	zero,118(sp)
1000b130:	0029883a 	mov	r20,zero
1000b134:	28800104 	addi	r2,r5,4
1000b138:	2cc00017 	ldw	r19,0(r5)
1000b13c:	803e3a16 	blt	r16,zero,1000aa28 <__alt_data_end+0xf800aa28>
1000b140:	00ffdfc4 	movi	r3,-129
1000b144:	d8802215 	stw	r2,136(sp)
1000b148:	88e2703a 	and	r17,r17,r3
1000b14c:	002b883a 	mov	r21,zero
1000b150:	983e9b26 	beq	r19,zero,1000abc0 <__alt_data_end+0xf800abc0>
1000b154:	00800244 	movi	r2,9
1000b158:	14fdc936 	bltu	r2,r19,1000a880 <__alt_data_end+0xf800a880>
1000b15c:	003e9a06 	br	1000abc8 <__alt_data_end+0xf800abc8>
1000b160:	00800c04 	movi	r2,48
1000b164:	d8c01d45 	stb	r3,117(sp)
1000b168:	d8801d05 	stb	r2,116(sp)
1000b16c:	d8001d85 	stb	zero,118(sp)
1000b170:	88c00094 	ori	r3,r17,2
1000b174:	80009c16 	blt	r16,zero,1000b3e8 <___vfiprintf_internal_r+0x1368>
1000b178:	00bfdfc4 	movi	r2,-129
1000b17c:	88a2703a 	and	r17,r17,r2
1000b180:	8c400094 	ori	r17,r17,2
1000b184:	002b883a 	mov	r21,zero
1000b188:	003f8506 	br	1000afa0 <__alt_data_end+0xf800afa0>
1000b18c:	b029883a 	mov	r20,r22
1000b190:	003c0b06 	br	1000a1c0 <__alt_data_end+0xf800a1c0>
1000b194:	04e7c83a 	sub	r19,zero,r19
1000b198:	05400b44 	movi	r21,45
1000b19c:	9804c03a 	cmpne	r2,r19,zero
1000b1a0:	0529c83a 	sub	r20,zero,r20
1000b1a4:	dd401d85 	stb	r21,118(sp)
1000b1a8:	a0a9c83a 	sub	r20,r20,r2
1000b1ac:	80009716 	blt	r16,zero,1000b40c <___vfiprintf_internal_r+0x138c>
1000b1b0:	00bfdfc4 	movi	r2,-129
1000b1b4:	88a2703a 	and	r17,r17,r2
1000b1b8:	003db006 	br	1000a87c <__alt_data_end+0xf800a87c>
1000b1bc:	b0c00007 	ldb	r3,0(r22)
1000b1c0:	003c0c06 	br	1000a1f4 <__alt_data_end+0xf800a1f4>
1000b1c4:	8880100c 	andi	r2,r17,64
1000b1c8:	d8001d85 	stb	zero,118(sp)
1000b1cc:	1000461e 	bne	r2,zero,1000b2e8 <___vfiprintf_internal_r+0x1268>
1000b1d0:	d9002217 	ldw	r4,136(sp)
1000b1d4:	0029883a 	mov	r20,zero
1000b1d8:	20800104 	addi	r2,r4,4
1000b1dc:	24c00017 	ldw	r19,0(r4)
1000b1e0:	803df80e 	bge	r16,zero,1000a9c4 <__alt_data_end+0xf800a9c4>
1000b1e4:	9d06b03a 	or	r3,r19,r20
1000b1e8:	d8802215 	stw	r2,136(sp)
1000b1ec:	183d5e1e 	bne	r3,zero,1000a768 <__alt_data_end+0xf800a768>
1000b1f0:	002b883a 	mov	r21,zero
1000b1f4:	0005883a 	mov	r2,zero
1000b1f8:	003e1006 	br	1000aa3c <__alt_data_end+0xf800aa3c>
1000b1fc:	8880040c 	andi	r2,r17,16
1000b200:	1000321e 	bne	r2,zero,1000b2cc <___vfiprintf_internal_r+0x124c>
1000b204:	8c40100c 	andi	r17,r17,64
1000b208:	88008d26 	beq	r17,zero,1000b440 <___vfiprintf_internal_r+0x13c0>
1000b20c:	d9402217 	ldw	r5,136(sp)
1000b210:	d8c02417 	ldw	r3,144(sp)
1000b214:	28800017 	ldw	r2,0(r5)
1000b218:	29400104 	addi	r5,r5,4
1000b21c:	d9402215 	stw	r5,136(sp)
1000b220:	10c0000d 	sth	r3,0(r2)
1000b224:	003bca06 	br	1000a150 <__alt_data_end+0xf800a150>
1000b228:	8880100c 	andi	r2,r17,64
1000b22c:	10003a26 	beq	r2,zero,1000b318 <___vfiprintf_internal_r+0x1298>
1000b230:	d8802217 	ldw	r2,136(sp)
1000b234:	14c0000f 	ldh	r19,0(r2)
1000b238:	10800104 	addi	r2,r2,4
1000b23c:	d8802215 	stw	r2,136(sp)
1000b240:	9829d7fa 	srai	r20,r19,31
1000b244:	a005883a 	mov	r2,r20
1000b248:	003d8506 	br	1000a860 <__alt_data_end+0xf800a860>
1000b24c:	8880100c 	andi	r2,r17,64
1000b250:	10002b26 	beq	r2,zero,1000b300 <___vfiprintf_internal_r+0x1280>
1000b254:	d8802217 	ldw	r2,136(sp)
1000b258:	0029883a 	mov	r20,zero
1000b25c:	14c0000b 	ldhu	r19,0(r2)
1000b260:	10800104 	addi	r2,r2,4
1000b264:	d8802215 	stw	r2,136(sp)
1000b268:	003d5d06 	br	1000a7e0 <__alt_data_end+0xf800a7e0>
1000b26c:	d9402017 	ldw	r5,128(sp)
1000b270:	d9002117 	ldw	r4,132(sp)
1000b274:	d9801a04 	addi	r6,sp,104
1000b278:	d8c02a15 	stw	r3,168(sp)
1000b27c:	d9c02b15 	stw	r7,172(sp)
1000b280:	0009f6c0 	call	10009f6c <__sprint_r.part.0>
1000b284:	d8c02a17 	ldw	r3,168(sp)
1000b288:	d9c02b17 	ldw	r7,172(sp)
1000b28c:	103eb41e 	bne	r2,zero,1000ad60 <__alt_data_end+0xf800ad60>
1000b290:	d9001b17 	ldw	r4,108(sp)
1000b294:	d8801c17 	ldw	r2,112(sp)
1000b298:	d811883a 	mov	r8,sp
1000b29c:	21400044 	addi	r5,r4,1
1000b2a0:	003e6706 	br	1000ac40 <__alt_data_end+0xf800ac40>
1000b2a4:	00bfffc4 	movi	r2,-1
1000b2a8:	003c4a06 	br	1000a3d4 <__alt_data_end+0xf800a3d4>
1000b2ac:	9805883a 	mov	r2,r19
1000b2b0:	003ee806 	br	1000ae54 <__alt_data_end+0xf800ae54>
1000b2b4:	d8c02217 	ldw	r3,136(sp)
1000b2b8:	0029883a 	mov	r20,zero
1000b2bc:	18800104 	addi	r2,r3,4
1000b2c0:	1cc0000b 	ldhu	r19,0(r3)
1000b2c4:	803f9e0e 	bge	r16,zero,1000b140 <__alt_data_end+0xf800b140>
1000b2c8:	003dd706 	br	1000aa28 <__alt_data_end+0xf800aa28>
1000b2cc:	d8c02217 	ldw	r3,136(sp)
1000b2d0:	d9002417 	ldw	r4,144(sp)
1000b2d4:	18800017 	ldw	r2,0(r3)
1000b2d8:	18c00104 	addi	r3,r3,4
1000b2dc:	d8c02215 	stw	r3,136(sp)
1000b2e0:	11000015 	stw	r4,0(r2)
1000b2e4:	003b9a06 	br	1000a150 <__alt_data_end+0xf800a150>
1000b2e8:	d8c02217 	ldw	r3,136(sp)
1000b2ec:	0029883a 	mov	r20,zero
1000b2f0:	18800104 	addi	r2,r3,4
1000b2f4:	1cc0000b 	ldhu	r19,0(r3)
1000b2f8:	803db20e 	bge	r16,zero,1000a9c4 <__alt_data_end+0xf800a9c4>
1000b2fc:	003fb906 	br	1000b1e4 <__alt_data_end+0xf800b1e4>
1000b300:	d9002217 	ldw	r4,136(sp)
1000b304:	0029883a 	mov	r20,zero
1000b308:	24c00017 	ldw	r19,0(r4)
1000b30c:	21000104 	addi	r4,r4,4
1000b310:	d9002215 	stw	r4,136(sp)
1000b314:	003d3206 	br	1000a7e0 <__alt_data_end+0xf800a7e0>
1000b318:	d8c02217 	ldw	r3,136(sp)
1000b31c:	1cc00017 	ldw	r19,0(r3)
1000b320:	18c00104 	addi	r3,r3,4
1000b324:	d8c02215 	stw	r3,136(sp)
1000b328:	9829d7fa 	srai	r20,r19,31
1000b32c:	a005883a 	mov	r2,r20
1000b330:	003d4b06 	br	1000a860 <__alt_data_end+0xf800a860>
1000b334:	0009883a 	mov	r4,zero
1000b338:	01400044 	movi	r5,1
1000b33c:	d811883a 	mov	r8,sp
1000b340:	003e4f06 	br	1000ac80 <__alt_data_end+0xf800ac80>
1000b344:	d8c02215 	stw	r3,136(sp)
1000b348:	002b883a 	mov	r21,zero
1000b34c:	003db806 	br	1000aa30 <__alt_data_end+0xf800aa30>
1000b350:	d811883a 	mov	r8,sp
1000b354:	003e9606 	br	1000adb0 <__alt_data_end+0xf800adb0>
1000b358:	01040074 	movhi	r4,4097
1000b35c:	210a3104 	addi	r4,r4,10436
1000b360:	d9002315 	stw	r4,140(sp)
1000b364:	003e6306 	br	1000acf4 <__alt_data_end+0xf800acf4>
1000b368:	b0c00043 	ldbu	r3,1(r22)
1000b36c:	8c400814 	ori	r17,r17,32
1000b370:	b5800044 	addi	r22,r22,1
1000b374:	18c03fcc 	andi	r3,r3,255
1000b378:	18c0201c 	xori	r3,r3,128
1000b37c:	18ffe004 	addi	r3,r3,-128
1000b380:	003b9c06 	br	1000a1f4 <__alt_data_end+0xf800a1f4>
1000b384:	b809883a 	mov	r4,r23
1000b388:	da002a15 	stw	r8,168(sp)
1000b38c:	00027440 	call	10002744 <strlen>
1000b390:	1029883a 	mov	r20,r2
1000b394:	dd401d83 	ldbu	r21,118(sp)
1000b398:	df002215 	stw	fp,136(sp)
1000b39c:	0021883a 	mov	r16,zero
1000b3a0:	da002a17 	ldw	r8,168(sp)
1000b3a4:	003c3906 	br	1000a48c <__alt_data_end+0xf800a48c>
1000b3a8:	d9402017 	ldw	r5,128(sp)
1000b3ac:	d9002117 	ldw	r4,132(sp)
1000b3b0:	d9801a04 	addi	r6,sp,104
1000b3b4:	0009f6c0 	call	10009f6c <__sprint_r.part.0>
1000b3b8:	103e691e 	bne	r2,zero,1000ad60 <__alt_data_end+0xf800ad60>
1000b3bc:	d9001b17 	ldw	r4,108(sp)
1000b3c0:	d8801c17 	ldw	r2,112(sp)
1000b3c4:	d811883a 	mov	r8,sp
1000b3c8:	21400044 	addi	r5,r4,1
1000b3cc:	003e2e06 	br	1000ac88 <__alt_data_end+0xf800ac88>
1000b3d0:	01040074 	movhi	r4,4097
1000b3d4:	210a3504 	addi	r4,r4,10452
1000b3d8:	d9002315 	stw	r4,140(sp)
1000b3dc:	d9001b17 	ldw	r4,108(sp)
1000b3e0:	21000044 	addi	r4,r4,1
1000b3e4:	003c5e06 	br	1000a560 <__alt_data_end+0xf800a560>
1000b3e8:	002b883a 	mov	r21,zero
1000b3ec:	00800084 	movi	r2,2
1000b3f0:	10803fcc 	andi	r2,r2,255
1000b3f4:	01000044 	movi	r4,1
1000b3f8:	11002b26 	beq	r2,r4,1000b4a8 <___vfiprintf_internal_r+0x1428>
1000b3fc:	01000084 	movi	r4,2
1000b400:	11002b1e 	bne	r2,r4,1000b4b0 <___vfiprintf_internal_r+0x1430>
1000b404:	1823883a 	mov	r17,r3
1000b408:	003ee506 	br	1000afa0 <__alt_data_end+0xf800afa0>
1000b40c:	8807883a 	mov	r3,r17
1000b410:	00800044 	movi	r2,1
1000b414:	003ff606 	br	1000b3f0 <__alt_data_end+0xf800b3f0>
1000b418:	00800184 	movi	r2,6
1000b41c:	1400012e 	bgeu	r2,r16,1000b424 <___vfiprintf_internal_r+0x13a4>
1000b420:	1021883a 	mov	r16,r2
1000b424:	8029883a 	mov	r20,r16
1000b428:	8027883a 	mov	r19,r16
1000b42c:	80002216 	blt	r16,zero,1000b4b8 <___vfiprintf_internal_r+0x1438>
1000b430:	05c40074 	movhi	r23,4097
1000b434:	df002215 	stw	fp,136(sp)
1000b438:	bdc9d504 	addi	r23,r23,10068
1000b43c:	003cfb06 	br	1000a82c <__alt_data_end+0xf800a82c>
1000b440:	d9002217 	ldw	r4,136(sp)
1000b444:	d9402417 	ldw	r5,144(sp)
1000b448:	20800017 	ldw	r2,0(r4)
1000b44c:	21000104 	addi	r4,r4,4
1000b450:	d9002215 	stw	r4,136(sp)
1000b454:	11400015 	stw	r5,0(r2)
1000b458:	003b3d06 	br	1000a150 <__alt_data_end+0xf800a150>
1000b45c:	01440074 	movhi	r5,4097
1000b460:	294a3504 	addi	r5,r5,10452
1000b464:	d9402315 	stw	r5,140(sp)
1000b468:	d9401b17 	ldw	r5,108(sp)
1000b46c:	29400044 	addi	r5,r5,1
1000b470:	003e6d06 	br	1000ae28 <__alt_data_end+0xf800ae28>
1000b474:	8029883a 	mov	r20,r16
1000b478:	dd401d83 	ldbu	r21,118(sp)
1000b47c:	df002215 	stw	fp,136(sp)
1000b480:	0021883a 	mov	r16,zero
1000b484:	003c0106 	br	1000a48c <__alt_data_end+0xf800a48c>
1000b488:	00c40074 	movhi	r3,4097
1000b48c:	18ca3104 	addi	r3,r3,10436
1000b490:	d8c02315 	stw	r3,140(sp)
1000b494:	280d883a 	mov	r6,r5
1000b498:	003c6906 	br	1000a640 <__alt_data_end+0xf800a640>
1000b49c:	802d883a 	mov	r22,r16
1000b4a0:	0021883a 	mov	r16,zero
1000b4a4:	003b5406 	br	1000a1f8 <__alt_data_end+0xf800a1f8>
1000b4a8:	1823883a 	mov	r17,r3
1000b4ac:	003cf306 	br	1000a87c <__alt_data_end+0xf800a87c>
1000b4b0:	1823883a 	mov	r17,r3
1000b4b4:	003cad06 	br	1000a76c <__alt_data_end+0xf800a76c>
1000b4b8:	0027883a 	mov	r19,zero
1000b4bc:	003fdc06 	br	1000b430 <__alt_data_end+0xf800b430>
1000b4c0:	d9402217 	ldw	r5,136(sp)
1000b4c4:	8005883a 	mov	r2,r16
1000b4c8:	b0c00043 	ldbu	r3,1(r22)
1000b4cc:	2c000017 	ldw	r16,0(r5)
1000b4d0:	29000104 	addi	r4,r5,4
1000b4d4:	d9002215 	stw	r4,136(sp)
1000b4d8:	102d883a 	mov	r22,r2
1000b4dc:	803fa50e 	bge	r16,zero,1000b374 <__alt_data_end+0xf800b374>
1000b4e0:	18c03fcc 	andi	r3,r3,255
1000b4e4:	18c0201c 	xori	r3,r3,128
1000b4e8:	043fffc4 	movi	r16,-1
1000b4ec:	18ffe004 	addi	r3,r3,-128
1000b4f0:	003b4006 	br	1000a1f4 <__alt_data_end+0xf800a1f4>
1000b4f4:	d9402303 	ldbu	r5,140(sp)
1000b4f8:	d9401d85 	stb	r5,118(sp)
1000b4fc:	003cae06 	br	1000a7b8 <__alt_data_end+0xf800a7b8>
1000b500:	d8c02303 	ldbu	r3,140(sp)
1000b504:	d8c01d85 	stb	r3,118(sp)
1000b508:	003d1406 	br	1000a95c <__alt_data_end+0xf800a95c>
1000b50c:	d8c02303 	ldbu	r3,140(sp)
1000b510:	d8c01d85 	stb	r3,118(sp)
1000b514:	003cca06 	br	1000a840 <__alt_data_end+0xf800a840>
1000b518:	8880004c 	andi	r2,r17,1
1000b51c:	002b883a 	mov	r21,zero
1000b520:	10000526 	beq	r2,zero,1000b538 <___vfiprintf_internal_r+0x14b8>
1000b524:	00800c04 	movi	r2,48
1000b528:	d88019c5 	stb	r2,103(sp)
1000b52c:	dd002817 	ldw	r20,160(sp)
1000b530:	ddc019c4 	addi	r23,sp,103
1000b534:	003bd506 	br	1000a48c <__alt_data_end+0xf800a48c>
1000b538:	0029883a 	mov	r20,zero
1000b53c:	ddc01a04 	addi	r23,sp,104
1000b540:	003bd206 	br	1000a48c <__alt_data_end+0xf800a48c>
1000b544:	d9002303 	ldbu	r4,140(sp)
1000b548:	d9001d85 	stb	r4,118(sp)
1000b54c:	003da606 	br	1000abe8 <__alt_data_end+0xf800abe8>
1000b550:	d8c02303 	ldbu	r3,140(sp)
1000b554:	d8c01d85 	stb	r3,118(sp)
1000b558:	003c7606 	br	1000a734 <__alt_data_end+0xf800a734>
1000b55c:	d8c02303 	ldbu	r3,140(sp)
1000b560:	d8c01d85 	stb	r3,118(sp)
1000b564:	003c6506 	br	1000a6fc <__alt_data_end+0xf800a6fc>
1000b568:	d9002303 	ldbu	r4,140(sp)
1000b56c:	d9001d85 	stb	r4,118(sp)
1000b570:	003d3d06 	br	1000aa68 <__alt_data_end+0xf800aa68>
1000b574:	d8c02303 	ldbu	r3,140(sp)
1000b578:	d8c01d85 	stb	r3,118(sp)
1000b57c:	003d1d06 	br	1000a9f4 <__alt_data_end+0xf800a9f4>
1000b580:	d8c02303 	ldbu	r3,140(sp)
1000b584:	d8c01d85 	stb	r3,118(sp)
1000b588:	003d0306 	br	1000a998 <__alt_data_end+0xf800a998>

1000b58c <__vfiprintf_internal>:
1000b58c:	00840074 	movhi	r2,4097
1000b590:	10913204 	addi	r2,r2,17608
1000b594:	300f883a 	mov	r7,r6
1000b598:	280d883a 	mov	r6,r5
1000b59c:	200b883a 	mov	r5,r4
1000b5a0:	11000017 	ldw	r4,0(r2)
1000b5a4:	000a0801 	jmpi	1000a080 <___vfiprintf_internal_r>

1000b5a8 <__sbprintf>:
1000b5a8:	2880030b 	ldhu	r2,12(r5)
1000b5ac:	2ac01917 	ldw	r11,100(r5)
1000b5b0:	2a80038b 	ldhu	r10,14(r5)
1000b5b4:	2a400717 	ldw	r9,28(r5)
1000b5b8:	2a000917 	ldw	r8,36(r5)
1000b5bc:	defee204 	addi	sp,sp,-1144
1000b5c0:	00c10004 	movi	r3,1024
1000b5c4:	dc011a15 	stw	r16,1128(sp)
1000b5c8:	10bfff4c 	andi	r2,r2,65533
1000b5cc:	2821883a 	mov	r16,r5
1000b5d0:	d8cb883a 	add	r5,sp,r3
1000b5d4:	dc811c15 	stw	r18,1136(sp)
1000b5d8:	dc411b15 	stw	r17,1132(sp)
1000b5dc:	dfc11d15 	stw	ra,1140(sp)
1000b5e0:	2025883a 	mov	r18,r4
1000b5e4:	d881030d 	sth	r2,1036(sp)
1000b5e8:	dac11915 	stw	r11,1124(sp)
1000b5ec:	da81038d 	sth	r10,1038(sp)
1000b5f0:	da410715 	stw	r9,1052(sp)
1000b5f4:	da010915 	stw	r8,1060(sp)
1000b5f8:	dec10015 	stw	sp,1024(sp)
1000b5fc:	dec10415 	stw	sp,1040(sp)
1000b600:	d8c10215 	stw	r3,1032(sp)
1000b604:	d8c10515 	stw	r3,1044(sp)
1000b608:	d8010615 	stw	zero,1048(sp)
1000b60c:	000a0800 	call	1000a080 <___vfiprintf_internal_r>
1000b610:	1023883a 	mov	r17,r2
1000b614:	10000416 	blt	r2,zero,1000b628 <__sbprintf+0x80>
1000b618:	d9410004 	addi	r5,sp,1024
1000b61c:	9009883a 	mov	r4,r18
1000b620:	00068000 	call	10006800 <_fflush_r>
1000b624:	10000d1e 	bne	r2,zero,1000b65c <__sbprintf+0xb4>
1000b628:	d881030b 	ldhu	r2,1036(sp)
1000b62c:	1080100c 	andi	r2,r2,64
1000b630:	10000326 	beq	r2,zero,1000b640 <__sbprintf+0x98>
1000b634:	8080030b 	ldhu	r2,12(r16)
1000b638:	10801014 	ori	r2,r2,64
1000b63c:	8080030d 	sth	r2,12(r16)
1000b640:	8805883a 	mov	r2,r17
1000b644:	dfc11d17 	ldw	ra,1140(sp)
1000b648:	dc811c17 	ldw	r18,1136(sp)
1000b64c:	dc411b17 	ldw	r17,1132(sp)
1000b650:	dc011a17 	ldw	r16,1128(sp)
1000b654:	dec11e04 	addi	sp,sp,1144
1000b658:	f800283a 	ret
1000b65c:	047fffc4 	movi	r17,-1
1000b660:	003ff106 	br	1000b628 <__alt_data_end+0xf800b628>

1000b664 <_write_r>:
1000b664:	defffd04 	addi	sp,sp,-12
1000b668:	2805883a 	mov	r2,r5
1000b66c:	dc000015 	stw	r16,0(sp)
1000b670:	04040074 	movhi	r16,4097
1000b674:	dc400115 	stw	r17,4(sp)
1000b678:	300b883a 	mov	r5,r6
1000b67c:	8417fd04 	addi	r16,r16,24564
1000b680:	2023883a 	mov	r17,r4
1000b684:	380d883a 	mov	r6,r7
1000b688:	1009883a 	mov	r4,r2
1000b68c:	dfc00215 	stw	ra,8(sp)
1000b690:	80000015 	stw	zero,0(r16)
1000b694:	00101a40 	call	100101a4 <write>
1000b698:	00ffffc4 	movi	r3,-1
1000b69c:	10c00526 	beq	r2,r3,1000b6b4 <_write_r+0x50>
1000b6a0:	dfc00217 	ldw	ra,8(sp)
1000b6a4:	dc400117 	ldw	r17,4(sp)
1000b6a8:	dc000017 	ldw	r16,0(sp)
1000b6ac:	dec00304 	addi	sp,sp,12
1000b6b0:	f800283a 	ret
1000b6b4:	80c00017 	ldw	r3,0(r16)
1000b6b8:	183ff926 	beq	r3,zero,1000b6a0 <__alt_data_end+0xf800b6a0>
1000b6bc:	88c00015 	stw	r3,0(r17)
1000b6c0:	003ff706 	br	1000b6a0 <__alt_data_end+0xf800b6a0>

1000b6c4 <_close_r>:
1000b6c4:	defffd04 	addi	sp,sp,-12
1000b6c8:	dc000015 	stw	r16,0(sp)
1000b6cc:	04040074 	movhi	r16,4097
1000b6d0:	dc400115 	stw	r17,4(sp)
1000b6d4:	8417fd04 	addi	r16,r16,24564
1000b6d8:	2023883a 	mov	r17,r4
1000b6dc:	2809883a 	mov	r4,r5
1000b6e0:	dfc00215 	stw	ra,8(sp)
1000b6e4:	80000015 	stw	zero,0(r16)
1000b6e8:	000f5840 	call	1000f584 <close>
1000b6ec:	00ffffc4 	movi	r3,-1
1000b6f0:	10c00526 	beq	r2,r3,1000b708 <_close_r+0x44>
1000b6f4:	dfc00217 	ldw	ra,8(sp)
1000b6f8:	dc400117 	ldw	r17,4(sp)
1000b6fc:	dc000017 	ldw	r16,0(sp)
1000b700:	dec00304 	addi	sp,sp,12
1000b704:	f800283a 	ret
1000b708:	80c00017 	ldw	r3,0(r16)
1000b70c:	183ff926 	beq	r3,zero,1000b6f4 <__alt_data_end+0xf800b6f4>
1000b710:	88c00015 	stw	r3,0(r17)
1000b714:	003ff706 	br	1000b6f4 <__alt_data_end+0xf800b6f4>

1000b718 <_calloc_r>:
1000b718:	defffe04 	addi	sp,sp,-8
1000b71c:	2805883a 	mov	r2,r5
1000b720:	dc000015 	stw	r16,0(sp)
1000b724:	300b883a 	mov	r5,r6
1000b728:	2021883a 	mov	r16,r4
1000b72c:	1009883a 	mov	r4,r2
1000b730:	dfc00115 	stw	ra,4(sp)
1000b734:	000cc7c0 	call	1000cc7c <__mulsi3>
1000b738:	100b883a 	mov	r5,r2
1000b73c:	8009883a 	mov	r4,r16
1000b740:	00079b40 	call	100079b4 <_malloc_r>
1000b744:	10002926 	beq	r2,zero,1000b7ec <_calloc_r+0xd4>
1000b748:	11bfff17 	ldw	r6,-4(r2)
1000b74c:	1021883a 	mov	r16,r2
1000b750:	00bfff04 	movi	r2,-4
1000b754:	308c703a 	and	r6,r6,r2
1000b758:	00c00904 	movi	r3,36
1000b75c:	308d883a 	add	r6,r6,r2
1000b760:	19801636 	bltu	r3,r6,1000b7bc <_calloc_r+0xa4>
1000b764:	008004c4 	movi	r2,19
1000b768:	11800b2e 	bgeu	r2,r6,1000b798 <_calloc_r+0x80>
1000b76c:	80000015 	stw	zero,0(r16)
1000b770:	80000115 	stw	zero,4(r16)
1000b774:	008006c4 	movi	r2,27
1000b778:	11801a2e 	bgeu	r2,r6,1000b7e4 <_calloc_r+0xcc>
1000b77c:	80000215 	stw	zero,8(r16)
1000b780:	80000315 	stw	zero,12(r16)
1000b784:	30c0151e 	bne	r6,r3,1000b7dc <_calloc_r+0xc4>
1000b788:	80000415 	stw	zero,16(r16)
1000b78c:	80800604 	addi	r2,r16,24
1000b790:	80000515 	stw	zero,20(r16)
1000b794:	00000106 	br	1000b79c <_calloc_r+0x84>
1000b798:	8005883a 	mov	r2,r16
1000b79c:	10000015 	stw	zero,0(r2)
1000b7a0:	10000115 	stw	zero,4(r2)
1000b7a4:	10000215 	stw	zero,8(r2)
1000b7a8:	8005883a 	mov	r2,r16
1000b7ac:	dfc00117 	ldw	ra,4(sp)
1000b7b0:	dc000017 	ldw	r16,0(sp)
1000b7b4:	dec00204 	addi	sp,sp,8
1000b7b8:	f800283a 	ret
1000b7bc:	000b883a 	mov	r5,zero
1000b7c0:	8009883a 	mov	r4,r16
1000b7c4:	00085480 	call	10008548 <memset>
1000b7c8:	8005883a 	mov	r2,r16
1000b7cc:	dfc00117 	ldw	ra,4(sp)
1000b7d0:	dc000017 	ldw	r16,0(sp)
1000b7d4:	dec00204 	addi	sp,sp,8
1000b7d8:	f800283a 	ret
1000b7dc:	80800404 	addi	r2,r16,16
1000b7e0:	003fee06 	br	1000b79c <__alt_data_end+0xf800b79c>
1000b7e4:	80800204 	addi	r2,r16,8
1000b7e8:	003fec06 	br	1000b79c <__alt_data_end+0xf800b79c>
1000b7ec:	0005883a 	mov	r2,zero
1000b7f0:	003fee06 	br	1000b7ac <__alt_data_end+0xf800b7ac>

1000b7f4 <_fclose_r>:
1000b7f4:	28003926 	beq	r5,zero,1000b8dc <_fclose_r+0xe8>
1000b7f8:	defffc04 	addi	sp,sp,-16
1000b7fc:	dc400115 	stw	r17,4(sp)
1000b800:	dc000015 	stw	r16,0(sp)
1000b804:	dfc00315 	stw	ra,12(sp)
1000b808:	dc800215 	stw	r18,8(sp)
1000b80c:	2023883a 	mov	r17,r4
1000b810:	2821883a 	mov	r16,r5
1000b814:	20000226 	beq	r4,zero,1000b820 <_fclose_r+0x2c>
1000b818:	20800e17 	ldw	r2,56(r4)
1000b81c:	10002726 	beq	r2,zero,1000b8bc <_fclose_r+0xc8>
1000b820:	8080030f 	ldh	r2,12(r16)
1000b824:	1000071e 	bne	r2,zero,1000b844 <_fclose_r+0x50>
1000b828:	0005883a 	mov	r2,zero
1000b82c:	dfc00317 	ldw	ra,12(sp)
1000b830:	dc800217 	ldw	r18,8(sp)
1000b834:	dc400117 	ldw	r17,4(sp)
1000b838:	dc000017 	ldw	r16,0(sp)
1000b83c:	dec00404 	addi	sp,sp,16
1000b840:	f800283a 	ret
1000b844:	800b883a 	mov	r5,r16
1000b848:	8809883a 	mov	r4,r17
1000b84c:	00065e40 	call	100065e4 <__sflush_r>
1000b850:	1025883a 	mov	r18,r2
1000b854:	80800b17 	ldw	r2,44(r16)
1000b858:	10000426 	beq	r2,zero,1000b86c <_fclose_r+0x78>
1000b85c:	81400717 	ldw	r5,28(r16)
1000b860:	8809883a 	mov	r4,r17
1000b864:	103ee83a 	callr	r2
1000b868:	10001616 	blt	r2,zero,1000b8c4 <_fclose_r+0xd0>
1000b86c:	8080030b 	ldhu	r2,12(r16)
1000b870:	1080200c 	andi	r2,r2,128
1000b874:	1000151e 	bne	r2,zero,1000b8cc <_fclose_r+0xd8>
1000b878:	81400c17 	ldw	r5,48(r16)
1000b87c:	28000526 	beq	r5,zero,1000b894 <_fclose_r+0xa0>
1000b880:	80801004 	addi	r2,r16,64
1000b884:	28800226 	beq	r5,r2,1000b890 <_fclose_r+0x9c>
1000b888:	8809883a 	mov	r4,r17
1000b88c:	0006d600 	call	10006d60 <_free_r>
1000b890:	80000c15 	stw	zero,48(r16)
1000b894:	81401117 	ldw	r5,68(r16)
1000b898:	28000326 	beq	r5,zero,1000b8a8 <_fclose_r+0xb4>
1000b89c:	8809883a 	mov	r4,r17
1000b8a0:	0006d600 	call	10006d60 <_free_r>
1000b8a4:	80001115 	stw	zero,68(r16)
1000b8a8:	0006bfc0 	call	10006bfc <__sfp_lock_acquire>
1000b8ac:	8000030d 	sth	zero,12(r16)
1000b8b0:	0006c000 	call	10006c00 <__sfp_lock_release>
1000b8b4:	9005883a 	mov	r2,r18
1000b8b8:	003fdc06 	br	1000b82c <__alt_data_end+0xf800b82c>
1000b8bc:	0006bec0 	call	10006bec <__sinit>
1000b8c0:	003fd706 	br	1000b820 <__alt_data_end+0xf800b820>
1000b8c4:	04bfffc4 	movi	r18,-1
1000b8c8:	003fe806 	br	1000b86c <__alt_data_end+0xf800b86c>
1000b8cc:	81400417 	ldw	r5,16(r16)
1000b8d0:	8809883a 	mov	r4,r17
1000b8d4:	0006d600 	call	10006d60 <_free_r>
1000b8d8:	003fe706 	br	1000b878 <__alt_data_end+0xf800b878>
1000b8dc:	0005883a 	mov	r2,zero
1000b8e0:	f800283a 	ret

1000b8e4 <fclose>:
1000b8e4:	00840074 	movhi	r2,4097
1000b8e8:	10913204 	addi	r2,r2,17608
1000b8ec:	200b883a 	mov	r5,r4
1000b8f0:	11000017 	ldw	r4,0(r2)
1000b8f4:	000b7f41 	jmpi	1000b7f4 <_fclose_r>

1000b8f8 <__fputwc>:
1000b8f8:	defff804 	addi	sp,sp,-32
1000b8fc:	dcc00415 	stw	r19,16(sp)
1000b900:	dc800315 	stw	r18,12(sp)
1000b904:	dc000115 	stw	r16,4(sp)
1000b908:	dfc00715 	stw	ra,28(sp)
1000b90c:	dd400615 	stw	r21,24(sp)
1000b910:	dd000515 	stw	r20,20(sp)
1000b914:	dc400215 	stw	r17,8(sp)
1000b918:	2027883a 	mov	r19,r4
1000b91c:	2825883a 	mov	r18,r5
1000b920:	3021883a 	mov	r16,r6
1000b924:	00077a40 	call	100077a4 <__locale_mb_cur_max>
1000b928:	00c00044 	movi	r3,1
1000b92c:	10c03e26 	beq	r2,r3,1000ba28 <__fputwc+0x130>
1000b930:	81c01704 	addi	r7,r16,92
1000b934:	900d883a 	mov	r6,r18
1000b938:	d80b883a 	mov	r5,sp
1000b93c:	9809883a 	mov	r4,r19
1000b940:	000bdc80 	call	1000bdc8 <_wcrtomb_r>
1000b944:	1029883a 	mov	r20,r2
1000b948:	00bfffc4 	movi	r2,-1
1000b94c:	a0802026 	beq	r20,r2,1000b9d0 <__fputwc+0xd8>
1000b950:	d9400003 	ldbu	r5,0(sp)
1000b954:	a0001c26 	beq	r20,zero,1000b9c8 <__fputwc+0xd0>
1000b958:	0023883a 	mov	r17,zero
1000b95c:	05400284 	movi	r21,10
1000b960:	00000906 	br	1000b988 <__fputwc+0x90>
1000b964:	80800017 	ldw	r2,0(r16)
1000b968:	11400005 	stb	r5,0(r2)
1000b96c:	80c00017 	ldw	r3,0(r16)
1000b970:	18c00044 	addi	r3,r3,1
1000b974:	80c00015 	stw	r3,0(r16)
1000b978:	8c400044 	addi	r17,r17,1
1000b97c:	dc45883a 	add	r2,sp,r17
1000b980:	8d00112e 	bgeu	r17,r20,1000b9c8 <__fputwc+0xd0>
1000b984:	11400003 	ldbu	r5,0(r2)
1000b988:	80c00217 	ldw	r3,8(r16)
1000b98c:	18ffffc4 	addi	r3,r3,-1
1000b990:	80c00215 	stw	r3,8(r16)
1000b994:	183ff30e 	bge	r3,zero,1000b964 <__alt_data_end+0xf800b964>
1000b998:	80800617 	ldw	r2,24(r16)
1000b99c:	18801916 	blt	r3,r2,1000ba04 <__fputwc+0x10c>
1000b9a0:	80800017 	ldw	r2,0(r16)
1000b9a4:	11400005 	stb	r5,0(r2)
1000b9a8:	80800017 	ldw	r2,0(r16)
1000b9ac:	10c00003 	ldbu	r3,0(r2)
1000b9b0:	10800044 	addi	r2,r2,1
1000b9b4:	1d402326 	beq	r3,r21,1000ba44 <__fputwc+0x14c>
1000b9b8:	80800015 	stw	r2,0(r16)
1000b9bc:	8c400044 	addi	r17,r17,1
1000b9c0:	dc45883a 	add	r2,sp,r17
1000b9c4:	8d3fef36 	bltu	r17,r20,1000b984 <__alt_data_end+0xf800b984>
1000b9c8:	9005883a 	mov	r2,r18
1000b9cc:	00000406 	br	1000b9e0 <__fputwc+0xe8>
1000b9d0:	80c0030b 	ldhu	r3,12(r16)
1000b9d4:	a005883a 	mov	r2,r20
1000b9d8:	18c01014 	ori	r3,r3,64
1000b9dc:	80c0030d 	sth	r3,12(r16)
1000b9e0:	dfc00717 	ldw	ra,28(sp)
1000b9e4:	dd400617 	ldw	r21,24(sp)
1000b9e8:	dd000517 	ldw	r20,20(sp)
1000b9ec:	dcc00417 	ldw	r19,16(sp)
1000b9f0:	dc800317 	ldw	r18,12(sp)
1000b9f4:	dc400217 	ldw	r17,8(sp)
1000b9f8:	dc000117 	ldw	r16,4(sp)
1000b9fc:	dec00804 	addi	sp,sp,32
1000ba00:	f800283a 	ret
1000ba04:	800d883a 	mov	r6,r16
1000ba08:	29403fcc 	andi	r5,r5,255
1000ba0c:	9809883a 	mov	r4,r19
1000ba10:	000bc700 	call	1000bc70 <__swbuf_r>
1000ba14:	10bfffe0 	cmpeqi	r2,r2,-1
1000ba18:	10803fcc 	andi	r2,r2,255
1000ba1c:	103fd626 	beq	r2,zero,1000b978 <__alt_data_end+0xf800b978>
1000ba20:	00bfffc4 	movi	r2,-1
1000ba24:	003fee06 	br	1000b9e0 <__alt_data_end+0xf800b9e0>
1000ba28:	90ffffc4 	addi	r3,r18,-1
1000ba2c:	01003f84 	movi	r4,254
1000ba30:	20ffbf36 	bltu	r4,r3,1000b930 <__alt_data_end+0xf800b930>
1000ba34:	900b883a 	mov	r5,r18
1000ba38:	dc800005 	stb	r18,0(sp)
1000ba3c:	1029883a 	mov	r20,r2
1000ba40:	003fc506 	br	1000b958 <__alt_data_end+0xf800b958>
1000ba44:	800d883a 	mov	r6,r16
1000ba48:	a80b883a 	mov	r5,r21
1000ba4c:	9809883a 	mov	r4,r19
1000ba50:	000bc700 	call	1000bc70 <__swbuf_r>
1000ba54:	10bfffe0 	cmpeqi	r2,r2,-1
1000ba58:	003fef06 	br	1000ba18 <__alt_data_end+0xf800ba18>

1000ba5c <_fputwc_r>:
1000ba5c:	3080030b 	ldhu	r2,12(r6)
1000ba60:	10c8000c 	andi	r3,r2,8192
1000ba64:	1800051e 	bne	r3,zero,1000ba7c <_fputwc_r+0x20>
1000ba68:	30c01917 	ldw	r3,100(r6)
1000ba6c:	10880014 	ori	r2,r2,8192
1000ba70:	3080030d 	sth	r2,12(r6)
1000ba74:	18880014 	ori	r2,r3,8192
1000ba78:	30801915 	stw	r2,100(r6)
1000ba7c:	000b8f81 	jmpi	1000b8f8 <__fputwc>

1000ba80 <fputwc>:
1000ba80:	00840074 	movhi	r2,4097
1000ba84:	defffc04 	addi	sp,sp,-16
1000ba88:	10913204 	addi	r2,r2,17608
1000ba8c:	dc000115 	stw	r16,4(sp)
1000ba90:	14000017 	ldw	r16,0(r2)
1000ba94:	dc400215 	stw	r17,8(sp)
1000ba98:	dfc00315 	stw	ra,12(sp)
1000ba9c:	2023883a 	mov	r17,r4
1000baa0:	80000226 	beq	r16,zero,1000baac <fputwc+0x2c>
1000baa4:	80800e17 	ldw	r2,56(r16)
1000baa8:	10001026 	beq	r2,zero,1000baec <fputwc+0x6c>
1000baac:	2880030b 	ldhu	r2,12(r5)
1000bab0:	10c8000c 	andi	r3,r2,8192
1000bab4:	1800051e 	bne	r3,zero,1000bacc <fputwc+0x4c>
1000bab8:	28c01917 	ldw	r3,100(r5)
1000babc:	10880014 	ori	r2,r2,8192
1000bac0:	2880030d 	sth	r2,12(r5)
1000bac4:	18880014 	ori	r2,r3,8192
1000bac8:	28801915 	stw	r2,100(r5)
1000bacc:	280d883a 	mov	r6,r5
1000bad0:	8009883a 	mov	r4,r16
1000bad4:	880b883a 	mov	r5,r17
1000bad8:	dfc00317 	ldw	ra,12(sp)
1000badc:	dc400217 	ldw	r17,8(sp)
1000bae0:	dc000117 	ldw	r16,4(sp)
1000bae4:	dec00404 	addi	sp,sp,16
1000bae8:	000b8f81 	jmpi	1000b8f8 <__fputwc>
1000baec:	8009883a 	mov	r4,r16
1000baf0:	d9400015 	stw	r5,0(sp)
1000baf4:	0006bec0 	call	10006bec <__sinit>
1000baf8:	d9400017 	ldw	r5,0(sp)
1000bafc:	003feb06 	br	1000baac <__alt_data_end+0xf800baac>

1000bb00 <_fstat_r>:
1000bb00:	defffd04 	addi	sp,sp,-12
1000bb04:	2805883a 	mov	r2,r5
1000bb08:	dc000015 	stw	r16,0(sp)
1000bb0c:	04040074 	movhi	r16,4097
1000bb10:	dc400115 	stw	r17,4(sp)
1000bb14:	8417fd04 	addi	r16,r16,24564
1000bb18:	2023883a 	mov	r17,r4
1000bb1c:	300b883a 	mov	r5,r6
1000bb20:	1009883a 	mov	r4,r2
1000bb24:	dfc00215 	stw	ra,8(sp)
1000bb28:	80000015 	stw	zero,0(r16)
1000bb2c:	000f6c40 	call	1000f6c4 <fstat>
1000bb30:	00ffffc4 	movi	r3,-1
1000bb34:	10c00526 	beq	r2,r3,1000bb4c <_fstat_r+0x4c>
1000bb38:	dfc00217 	ldw	ra,8(sp)
1000bb3c:	dc400117 	ldw	r17,4(sp)
1000bb40:	dc000017 	ldw	r16,0(sp)
1000bb44:	dec00304 	addi	sp,sp,12
1000bb48:	f800283a 	ret
1000bb4c:	80c00017 	ldw	r3,0(r16)
1000bb50:	183ff926 	beq	r3,zero,1000bb38 <__alt_data_end+0xf800bb38>
1000bb54:	88c00015 	stw	r3,0(r17)
1000bb58:	003ff706 	br	1000bb38 <__alt_data_end+0xf800bb38>

1000bb5c <_isatty_r>:
1000bb5c:	defffd04 	addi	sp,sp,-12
1000bb60:	dc000015 	stw	r16,0(sp)
1000bb64:	04040074 	movhi	r16,4097
1000bb68:	dc400115 	stw	r17,4(sp)
1000bb6c:	8417fd04 	addi	r16,r16,24564
1000bb70:	2023883a 	mov	r17,r4
1000bb74:	2809883a 	mov	r4,r5
1000bb78:	dfc00215 	stw	ra,8(sp)
1000bb7c:	80000015 	stw	zero,0(r16)
1000bb80:	000f9ac0 	call	1000f9ac <isatty>
1000bb84:	00ffffc4 	movi	r3,-1
1000bb88:	10c00526 	beq	r2,r3,1000bba0 <_isatty_r+0x44>
1000bb8c:	dfc00217 	ldw	ra,8(sp)
1000bb90:	dc400117 	ldw	r17,4(sp)
1000bb94:	dc000017 	ldw	r16,0(sp)
1000bb98:	dec00304 	addi	sp,sp,12
1000bb9c:	f800283a 	ret
1000bba0:	80c00017 	ldw	r3,0(r16)
1000bba4:	183ff926 	beq	r3,zero,1000bb8c <__alt_data_end+0xf800bb8c>
1000bba8:	88c00015 	stw	r3,0(r17)
1000bbac:	003ff706 	br	1000bb8c <__alt_data_end+0xf800bb8c>

1000bbb0 <_lseek_r>:
1000bbb0:	defffd04 	addi	sp,sp,-12
1000bbb4:	2805883a 	mov	r2,r5
1000bbb8:	dc000015 	stw	r16,0(sp)
1000bbbc:	04040074 	movhi	r16,4097
1000bbc0:	dc400115 	stw	r17,4(sp)
1000bbc4:	300b883a 	mov	r5,r6
1000bbc8:	8417fd04 	addi	r16,r16,24564
1000bbcc:	2023883a 	mov	r17,r4
1000bbd0:	380d883a 	mov	r6,r7
1000bbd4:	1009883a 	mov	r4,r2
1000bbd8:	dfc00215 	stw	ra,8(sp)
1000bbdc:	80000015 	stw	zero,0(r16)
1000bbe0:	000fb800 	call	1000fb80 <lseek>
1000bbe4:	00ffffc4 	movi	r3,-1
1000bbe8:	10c00526 	beq	r2,r3,1000bc00 <_lseek_r+0x50>
1000bbec:	dfc00217 	ldw	ra,8(sp)
1000bbf0:	dc400117 	ldw	r17,4(sp)
1000bbf4:	dc000017 	ldw	r16,0(sp)
1000bbf8:	dec00304 	addi	sp,sp,12
1000bbfc:	f800283a 	ret
1000bc00:	80c00017 	ldw	r3,0(r16)
1000bc04:	183ff926 	beq	r3,zero,1000bbec <__alt_data_end+0xf800bbec>
1000bc08:	88c00015 	stw	r3,0(r17)
1000bc0c:	003ff706 	br	1000bbec <__alt_data_end+0xf800bbec>

1000bc10 <_read_r>:
1000bc10:	defffd04 	addi	sp,sp,-12
1000bc14:	2805883a 	mov	r2,r5
1000bc18:	dc000015 	stw	r16,0(sp)
1000bc1c:	04040074 	movhi	r16,4097
1000bc20:	dc400115 	stw	r17,4(sp)
1000bc24:	300b883a 	mov	r5,r6
1000bc28:	8417fd04 	addi	r16,r16,24564
1000bc2c:	2023883a 	mov	r17,r4
1000bc30:	380d883a 	mov	r6,r7
1000bc34:	1009883a 	mov	r4,r2
1000bc38:	dfc00215 	stw	ra,8(sp)
1000bc3c:	80000015 	stw	zero,0(r16)
1000bc40:	000fd5c0 	call	1000fd5c <read>
1000bc44:	00ffffc4 	movi	r3,-1
1000bc48:	10c00526 	beq	r2,r3,1000bc60 <_read_r+0x50>
1000bc4c:	dfc00217 	ldw	ra,8(sp)
1000bc50:	dc400117 	ldw	r17,4(sp)
1000bc54:	dc000017 	ldw	r16,0(sp)
1000bc58:	dec00304 	addi	sp,sp,12
1000bc5c:	f800283a 	ret
1000bc60:	80c00017 	ldw	r3,0(r16)
1000bc64:	183ff926 	beq	r3,zero,1000bc4c <__alt_data_end+0xf800bc4c>
1000bc68:	88c00015 	stw	r3,0(r17)
1000bc6c:	003ff706 	br	1000bc4c <__alt_data_end+0xf800bc4c>

1000bc70 <__swbuf_r>:
1000bc70:	defffb04 	addi	sp,sp,-20
1000bc74:	dcc00315 	stw	r19,12(sp)
1000bc78:	dc800215 	stw	r18,8(sp)
1000bc7c:	dc000015 	stw	r16,0(sp)
1000bc80:	dfc00415 	stw	ra,16(sp)
1000bc84:	dc400115 	stw	r17,4(sp)
1000bc88:	2025883a 	mov	r18,r4
1000bc8c:	2827883a 	mov	r19,r5
1000bc90:	3021883a 	mov	r16,r6
1000bc94:	20000226 	beq	r4,zero,1000bca0 <__swbuf_r+0x30>
1000bc98:	20800e17 	ldw	r2,56(r4)
1000bc9c:	10004226 	beq	r2,zero,1000bda8 <__swbuf_r+0x138>
1000bca0:	80800617 	ldw	r2,24(r16)
1000bca4:	8100030b 	ldhu	r4,12(r16)
1000bca8:	80800215 	stw	r2,8(r16)
1000bcac:	2080020c 	andi	r2,r4,8
1000bcb0:	10003626 	beq	r2,zero,1000bd8c <__swbuf_r+0x11c>
1000bcb4:	80c00417 	ldw	r3,16(r16)
1000bcb8:	18003426 	beq	r3,zero,1000bd8c <__swbuf_r+0x11c>
1000bcbc:	2088000c 	andi	r2,r4,8192
1000bcc0:	9c403fcc 	andi	r17,r19,255
1000bcc4:	10001a26 	beq	r2,zero,1000bd30 <__swbuf_r+0xc0>
1000bcc8:	80800017 	ldw	r2,0(r16)
1000bccc:	81000517 	ldw	r4,20(r16)
1000bcd0:	10c7c83a 	sub	r3,r2,r3
1000bcd4:	1900200e 	bge	r3,r4,1000bd58 <__swbuf_r+0xe8>
1000bcd8:	18c00044 	addi	r3,r3,1
1000bcdc:	81000217 	ldw	r4,8(r16)
1000bce0:	11400044 	addi	r5,r2,1
1000bce4:	81400015 	stw	r5,0(r16)
1000bce8:	213fffc4 	addi	r4,r4,-1
1000bcec:	81000215 	stw	r4,8(r16)
1000bcf0:	14c00005 	stb	r19,0(r2)
1000bcf4:	80800517 	ldw	r2,20(r16)
1000bcf8:	10c01e26 	beq	r2,r3,1000bd74 <__swbuf_r+0x104>
1000bcfc:	8080030b 	ldhu	r2,12(r16)
1000bd00:	1080004c 	andi	r2,r2,1
1000bd04:	10000226 	beq	r2,zero,1000bd10 <__swbuf_r+0xa0>
1000bd08:	00800284 	movi	r2,10
1000bd0c:	88801926 	beq	r17,r2,1000bd74 <__swbuf_r+0x104>
1000bd10:	8805883a 	mov	r2,r17
1000bd14:	dfc00417 	ldw	ra,16(sp)
1000bd18:	dcc00317 	ldw	r19,12(sp)
1000bd1c:	dc800217 	ldw	r18,8(sp)
1000bd20:	dc400117 	ldw	r17,4(sp)
1000bd24:	dc000017 	ldw	r16,0(sp)
1000bd28:	dec00504 	addi	sp,sp,20
1000bd2c:	f800283a 	ret
1000bd30:	81401917 	ldw	r5,100(r16)
1000bd34:	00b7ffc4 	movi	r2,-8193
1000bd38:	21080014 	ori	r4,r4,8192
1000bd3c:	2884703a 	and	r2,r5,r2
1000bd40:	80801915 	stw	r2,100(r16)
1000bd44:	80800017 	ldw	r2,0(r16)
1000bd48:	8100030d 	sth	r4,12(r16)
1000bd4c:	81000517 	ldw	r4,20(r16)
1000bd50:	10c7c83a 	sub	r3,r2,r3
1000bd54:	193fe016 	blt	r3,r4,1000bcd8 <__alt_data_end+0xf800bcd8>
1000bd58:	800b883a 	mov	r5,r16
1000bd5c:	9009883a 	mov	r4,r18
1000bd60:	00068000 	call	10006800 <_fflush_r>
1000bd64:	1000071e 	bne	r2,zero,1000bd84 <__swbuf_r+0x114>
1000bd68:	80800017 	ldw	r2,0(r16)
1000bd6c:	00c00044 	movi	r3,1
1000bd70:	003fda06 	br	1000bcdc <__alt_data_end+0xf800bcdc>
1000bd74:	800b883a 	mov	r5,r16
1000bd78:	9009883a 	mov	r4,r18
1000bd7c:	00068000 	call	10006800 <_fflush_r>
1000bd80:	103fe326 	beq	r2,zero,1000bd10 <__alt_data_end+0xf800bd10>
1000bd84:	00bfffc4 	movi	r2,-1
1000bd88:	003fe206 	br	1000bd14 <__alt_data_end+0xf800bd14>
1000bd8c:	800b883a 	mov	r5,r16
1000bd90:	9009883a 	mov	r4,r18
1000bd94:	0004be00 	call	10004be0 <__swsetup_r>
1000bd98:	103ffa1e 	bne	r2,zero,1000bd84 <__alt_data_end+0xf800bd84>
1000bd9c:	8100030b 	ldhu	r4,12(r16)
1000bda0:	80c00417 	ldw	r3,16(r16)
1000bda4:	003fc506 	br	1000bcbc <__alt_data_end+0xf800bcbc>
1000bda8:	0006bec0 	call	10006bec <__sinit>
1000bdac:	003fbc06 	br	1000bca0 <__alt_data_end+0xf800bca0>

1000bdb0 <__swbuf>:
1000bdb0:	00840074 	movhi	r2,4097
1000bdb4:	10913204 	addi	r2,r2,17608
1000bdb8:	280d883a 	mov	r6,r5
1000bdbc:	200b883a 	mov	r5,r4
1000bdc0:	11000017 	ldw	r4,0(r2)
1000bdc4:	000bc701 	jmpi	1000bc70 <__swbuf_r>

1000bdc8 <_wcrtomb_r>:
1000bdc8:	defff604 	addi	sp,sp,-40
1000bdcc:	00840074 	movhi	r2,4097
1000bdd0:	dc800815 	stw	r18,32(sp)
1000bdd4:	dc400715 	stw	r17,28(sp)
1000bdd8:	dc000615 	stw	r16,24(sp)
1000bddc:	10913604 	addi	r2,r2,17624
1000bde0:	dfc00915 	stw	ra,36(sp)
1000bde4:	2021883a 	mov	r16,r4
1000bde8:	3823883a 	mov	r17,r7
1000bdec:	14800017 	ldw	r18,0(r2)
1000bdf0:	28001426 	beq	r5,zero,1000be44 <_wcrtomb_r+0x7c>
1000bdf4:	d9400415 	stw	r5,16(sp)
1000bdf8:	d9800515 	stw	r6,20(sp)
1000bdfc:	00077980 	call	10007798 <__locale_charset>
1000be00:	d9800517 	ldw	r6,20(sp)
1000be04:	d9400417 	ldw	r5,16(sp)
1000be08:	100f883a 	mov	r7,r2
1000be0c:	dc400015 	stw	r17,0(sp)
1000be10:	8009883a 	mov	r4,r16
1000be14:	903ee83a 	callr	r18
1000be18:	00ffffc4 	movi	r3,-1
1000be1c:	10c0031e 	bne	r2,r3,1000be2c <_wcrtomb_r+0x64>
1000be20:	88000015 	stw	zero,0(r17)
1000be24:	00c02284 	movi	r3,138
1000be28:	80c00015 	stw	r3,0(r16)
1000be2c:	dfc00917 	ldw	ra,36(sp)
1000be30:	dc800817 	ldw	r18,32(sp)
1000be34:	dc400717 	ldw	r17,28(sp)
1000be38:	dc000617 	ldw	r16,24(sp)
1000be3c:	dec00a04 	addi	sp,sp,40
1000be40:	f800283a 	ret
1000be44:	00077980 	call	10007798 <__locale_charset>
1000be48:	100f883a 	mov	r7,r2
1000be4c:	dc400015 	stw	r17,0(sp)
1000be50:	000d883a 	mov	r6,zero
1000be54:	d9400104 	addi	r5,sp,4
1000be58:	8009883a 	mov	r4,r16
1000be5c:	903ee83a 	callr	r18
1000be60:	003fed06 	br	1000be18 <__alt_data_end+0xf800be18>

1000be64 <wcrtomb>:
1000be64:	defff604 	addi	sp,sp,-40
1000be68:	00840074 	movhi	r2,4097
1000be6c:	dc800615 	stw	r18,24(sp)
1000be70:	dc400515 	stw	r17,20(sp)
1000be74:	10913204 	addi	r2,r2,17608
1000be78:	dfc00915 	stw	ra,36(sp)
1000be7c:	dd000815 	stw	r20,32(sp)
1000be80:	dcc00715 	stw	r19,28(sp)
1000be84:	dc000415 	stw	r16,16(sp)
1000be88:	3025883a 	mov	r18,r6
1000be8c:	14400017 	ldw	r17,0(r2)
1000be90:	20001926 	beq	r4,zero,1000bef8 <wcrtomb+0x94>
1000be94:	00840074 	movhi	r2,4097
1000be98:	10913604 	addi	r2,r2,17624
1000be9c:	15000017 	ldw	r20,0(r2)
1000bea0:	2021883a 	mov	r16,r4
1000bea4:	2827883a 	mov	r19,r5
1000bea8:	00077980 	call	10007798 <__locale_charset>
1000beac:	100f883a 	mov	r7,r2
1000beb0:	dc800015 	stw	r18,0(sp)
1000beb4:	980d883a 	mov	r6,r19
1000beb8:	800b883a 	mov	r5,r16
1000bebc:	8809883a 	mov	r4,r17
1000bec0:	a03ee83a 	callr	r20
1000bec4:	00ffffc4 	movi	r3,-1
1000bec8:	10c0031e 	bne	r2,r3,1000bed8 <wcrtomb+0x74>
1000becc:	90000015 	stw	zero,0(r18)
1000bed0:	00c02284 	movi	r3,138
1000bed4:	88c00015 	stw	r3,0(r17)
1000bed8:	dfc00917 	ldw	ra,36(sp)
1000bedc:	dd000817 	ldw	r20,32(sp)
1000bee0:	dcc00717 	ldw	r19,28(sp)
1000bee4:	dc800617 	ldw	r18,24(sp)
1000bee8:	dc400517 	ldw	r17,20(sp)
1000beec:	dc000417 	ldw	r16,16(sp)
1000bef0:	dec00a04 	addi	sp,sp,40
1000bef4:	f800283a 	ret
1000bef8:	00840074 	movhi	r2,4097
1000befc:	10913604 	addi	r2,r2,17624
1000bf00:	14000017 	ldw	r16,0(r2)
1000bf04:	00077980 	call	10007798 <__locale_charset>
1000bf08:	100f883a 	mov	r7,r2
1000bf0c:	dc800015 	stw	r18,0(sp)
1000bf10:	000d883a 	mov	r6,zero
1000bf14:	d9400104 	addi	r5,sp,4
1000bf18:	8809883a 	mov	r4,r17
1000bf1c:	803ee83a 	callr	r16
1000bf20:	003fe806 	br	1000bec4 <__alt_data_end+0xf800bec4>

1000bf24 <__ascii_wctomb>:
1000bf24:	28000526 	beq	r5,zero,1000bf3c <__ascii_wctomb+0x18>
1000bf28:	00803fc4 	movi	r2,255
1000bf2c:	11800536 	bltu	r2,r6,1000bf44 <__ascii_wctomb+0x20>
1000bf30:	29800005 	stb	r6,0(r5)
1000bf34:	00800044 	movi	r2,1
1000bf38:	f800283a 	ret
1000bf3c:	0005883a 	mov	r2,zero
1000bf40:	f800283a 	ret
1000bf44:	00802284 	movi	r2,138
1000bf48:	20800015 	stw	r2,0(r4)
1000bf4c:	00bfffc4 	movi	r2,-1
1000bf50:	f800283a 	ret

1000bf54 <_wctomb_r>:
1000bf54:	00840074 	movhi	r2,4097
1000bf58:	defff904 	addi	sp,sp,-28
1000bf5c:	10913604 	addi	r2,r2,17624
1000bf60:	dfc00615 	stw	ra,24(sp)
1000bf64:	dc400515 	stw	r17,20(sp)
1000bf68:	dc000415 	stw	r16,16(sp)
1000bf6c:	3823883a 	mov	r17,r7
1000bf70:	14000017 	ldw	r16,0(r2)
1000bf74:	d9000115 	stw	r4,4(sp)
1000bf78:	d9400215 	stw	r5,8(sp)
1000bf7c:	d9800315 	stw	r6,12(sp)
1000bf80:	00077980 	call	10007798 <__locale_charset>
1000bf84:	d9800317 	ldw	r6,12(sp)
1000bf88:	d9400217 	ldw	r5,8(sp)
1000bf8c:	d9000117 	ldw	r4,4(sp)
1000bf90:	100f883a 	mov	r7,r2
1000bf94:	dc400015 	stw	r17,0(sp)
1000bf98:	803ee83a 	callr	r16
1000bf9c:	dfc00617 	ldw	ra,24(sp)
1000bfa0:	dc400517 	ldw	r17,20(sp)
1000bfa4:	dc000417 	ldw	r16,16(sp)
1000bfa8:	dec00704 	addi	sp,sp,28
1000bfac:	f800283a 	ret

1000bfb0 <__muldi3>:
1000bfb0:	defff604 	addi	sp,sp,-40
1000bfb4:	dd800615 	stw	r22,24(sp)
1000bfb8:	dd400515 	stw	r21,20(sp)
1000bfbc:	dc400115 	stw	r17,4(sp)
1000bfc0:	357fffcc 	andi	r21,r6,65535
1000bfc4:	2022d43a 	srli	r17,r4,16
1000bfc8:	25bfffcc 	andi	r22,r4,65535
1000bfcc:	dcc00315 	stw	r19,12(sp)
1000bfd0:	dc800215 	stw	r18,8(sp)
1000bfd4:	2027883a 	mov	r19,r4
1000bfd8:	2825883a 	mov	r18,r5
1000bfdc:	b009883a 	mov	r4,r22
1000bfe0:	a80b883a 	mov	r5,r21
1000bfe4:	dfc00915 	stw	ra,36(sp)
1000bfe8:	df000815 	stw	fp,32(sp)
1000bfec:	ddc00715 	stw	r23,28(sp)
1000bff0:	3839883a 	mov	fp,r7
1000bff4:	302ed43a 	srli	r23,r6,16
1000bff8:	dd000415 	stw	r20,16(sp)
1000bffc:	dc000015 	stw	r16,0(sp)
1000c000:	3029883a 	mov	r20,r6
1000c004:	000cc7c0 	call	1000cc7c <__mulsi3>
1000c008:	a80b883a 	mov	r5,r21
1000c00c:	8809883a 	mov	r4,r17
1000c010:	1021883a 	mov	r16,r2
1000c014:	000cc7c0 	call	1000cc7c <__mulsi3>
1000c018:	8809883a 	mov	r4,r17
1000c01c:	b80b883a 	mov	r5,r23
1000c020:	102b883a 	mov	r21,r2
1000c024:	000cc7c0 	call	1000cc7c <__mulsi3>
1000c028:	b80b883a 	mov	r5,r23
1000c02c:	b009883a 	mov	r4,r22
1000c030:	1023883a 	mov	r17,r2
1000c034:	000cc7c0 	call	1000cc7c <__mulsi3>
1000c038:	8006d43a 	srli	r3,r16,16
1000c03c:	1545883a 	add	r2,r2,r21
1000c040:	1885883a 	add	r2,r3,r2
1000c044:	1540022e 	bgeu	r2,r21,1000c050 <__muldi3+0xa0>
1000c048:	00c00074 	movhi	r3,1
1000c04c:	88e3883a 	add	r17,r17,r3
1000c050:	1006d43a 	srli	r3,r2,16
1000c054:	1004943a 	slli	r2,r2,16
1000c058:	e00b883a 	mov	r5,fp
1000c05c:	9809883a 	mov	r4,r19
1000c060:	843fffcc 	andi	r16,r16,65535
1000c064:	1c63883a 	add	r17,r3,r17
1000c068:	1421883a 	add	r16,r2,r16
1000c06c:	000cc7c0 	call	1000cc7c <__mulsi3>
1000c070:	900b883a 	mov	r5,r18
1000c074:	a009883a 	mov	r4,r20
1000c078:	1027883a 	mov	r19,r2
1000c07c:	000cc7c0 	call	1000cc7c <__mulsi3>
1000c080:	9885883a 	add	r2,r19,r2
1000c084:	1447883a 	add	r3,r2,r17
1000c088:	8005883a 	mov	r2,r16
1000c08c:	dfc00917 	ldw	ra,36(sp)
1000c090:	df000817 	ldw	fp,32(sp)
1000c094:	ddc00717 	ldw	r23,28(sp)
1000c098:	dd800617 	ldw	r22,24(sp)
1000c09c:	dd400517 	ldw	r21,20(sp)
1000c0a0:	dd000417 	ldw	r20,16(sp)
1000c0a4:	dcc00317 	ldw	r19,12(sp)
1000c0a8:	dc800217 	ldw	r18,8(sp)
1000c0ac:	dc400117 	ldw	r17,4(sp)
1000c0b0:	dc000017 	ldw	r16,0(sp)
1000c0b4:	dec00a04 	addi	sp,sp,40
1000c0b8:	f800283a 	ret

1000c0bc <__udivdi3>:
1000c0bc:	defff404 	addi	sp,sp,-48
1000c0c0:	dcc00515 	stw	r19,20(sp)
1000c0c4:	dc000215 	stw	r16,8(sp)
1000c0c8:	dfc00b15 	stw	ra,44(sp)
1000c0cc:	df000a15 	stw	fp,40(sp)
1000c0d0:	ddc00915 	stw	r23,36(sp)
1000c0d4:	dd800815 	stw	r22,32(sp)
1000c0d8:	dd400715 	stw	r21,28(sp)
1000c0dc:	dd000615 	stw	r20,24(sp)
1000c0e0:	dc800415 	stw	r18,16(sp)
1000c0e4:	dc400315 	stw	r17,12(sp)
1000c0e8:	2027883a 	mov	r19,r4
1000c0ec:	2821883a 	mov	r16,r5
1000c0f0:	3800461e 	bne	r7,zero,1000c20c <__udivdi3+0x150>
1000c0f4:	3023883a 	mov	r17,r6
1000c0f8:	2025883a 	mov	r18,r4
1000c0fc:	2980572e 	bgeu	r5,r6,1000c25c <__udivdi3+0x1a0>
1000c100:	00bfffd4 	movui	r2,65535
1000c104:	282d883a 	mov	r22,r5
1000c108:	1180b236 	bltu	r2,r6,1000c3d4 <__udivdi3+0x318>
1000c10c:	00803fc4 	movi	r2,255
1000c110:	1185803a 	cmpltu	r2,r2,r6
1000c114:	100490fa 	slli	r2,r2,3
1000c118:	3086d83a 	srl	r3,r6,r2
1000c11c:	01040074 	movhi	r4,4097
1000c120:	210a3904 	addi	r4,r4,10468
1000c124:	20c7883a 	add	r3,r4,r3
1000c128:	18c00003 	ldbu	r3,0(r3)
1000c12c:	1885883a 	add	r2,r3,r2
1000c130:	00c00804 	movi	r3,32
1000c134:	1887c83a 	sub	r3,r3,r2
1000c138:	18000526 	beq	r3,zero,1000c150 <__udivdi3+0x94>
1000c13c:	80e0983a 	sll	r16,r16,r3
1000c140:	9884d83a 	srl	r2,r19,r2
1000c144:	30e2983a 	sll	r17,r6,r3
1000c148:	98e4983a 	sll	r18,r19,r3
1000c14c:	142cb03a 	or	r22,r2,r16
1000c150:	882ad43a 	srli	r21,r17,16
1000c154:	b009883a 	mov	r4,r22
1000c158:	8d3fffcc 	andi	r20,r17,65535
1000c15c:	a80b883a 	mov	r5,r21
1000c160:	00025300 	call	10002530 <__umodsi3>
1000c164:	b009883a 	mov	r4,r22
1000c168:	a80b883a 	mov	r5,r21
1000c16c:	1027883a 	mov	r19,r2
1000c170:	00024cc0 	call	100024cc <__udivsi3>
1000c174:	100b883a 	mov	r5,r2
1000c178:	a009883a 	mov	r4,r20
1000c17c:	102d883a 	mov	r22,r2
1000c180:	000cc7c0 	call	1000cc7c <__mulsi3>
1000c184:	9826943a 	slli	r19,r19,16
1000c188:	9006d43a 	srli	r3,r18,16
1000c18c:	1cc6b03a 	or	r3,r3,r19
1000c190:	1880052e 	bgeu	r3,r2,1000c1a8 <__udivdi3+0xec>
1000c194:	1c47883a 	add	r3,r3,r17
1000c198:	b13fffc4 	addi	r4,r22,-1
1000c19c:	1c400136 	bltu	r3,r17,1000c1a4 <__udivdi3+0xe8>
1000c1a0:	18814236 	bltu	r3,r2,1000c6ac <__udivdi3+0x5f0>
1000c1a4:	202d883a 	mov	r22,r4
1000c1a8:	18a1c83a 	sub	r16,r3,r2
1000c1ac:	8009883a 	mov	r4,r16
1000c1b0:	a80b883a 	mov	r5,r21
1000c1b4:	00025300 	call	10002530 <__umodsi3>
1000c1b8:	1027883a 	mov	r19,r2
1000c1bc:	8009883a 	mov	r4,r16
1000c1c0:	a80b883a 	mov	r5,r21
1000c1c4:	9826943a 	slli	r19,r19,16
1000c1c8:	00024cc0 	call	100024cc <__udivsi3>
1000c1cc:	100b883a 	mov	r5,r2
1000c1d0:	a009883a 	mov	r4,r20
1000c1d4:	94bfffcc 	andi	r18,r18,65535
1000c1d8:	1021883a 	mov	r16,r2
1000c1dc:	94e4b03a 	or	r18,r18,r19
1000c1e0:	000cc7c0 	call	1000cc7c <__mulsi3>
1000c1e4:	9080052e 	bgeu	r18,r2,1000c1fc <__udivdi3+0x140>
1000c1e8:	8ca5883a 	add	r18,r17,r18
1000c1ec:	80ffffc4 	addi	r3,r16,-1
1000c1f0:	94410c36 	bltu	r18,r17,1000c624 <__udivdi3+0x568>
1000c1f4:	90810b2e 	bgeu	r18,r2,1000c624 <__udivdi3+0x568>
1000c1f8:	843fff84 	addi	r16,r16,-2
1000c1fc:	b004943a 	slli	r2,r22,16
1000c200:	0007883a 	mov	r3,zero
1000c204:	1404b03a 	or	r2,r2,r16
1000c208:	00005e06 	br	1000c384 <__udivdi3+0x2c8>
1000c20c:	29c05b36 	bltu	r5,r7,1000c37c <__udivdi3+0x2c0>
1000c210:	00bfffd4 	movui	r2,65535
1000c214:	11c0672e 	bgeu	r2,r7,1000c3b4 <__udivdi3+0x2f8>
1000c218:	00804034 	movhi	r2,256
1000c21c:	10bfffc4 	addi	r2,r2,-1
1000c220:	11c10a36 	bltu	r2,r7,1000c64c <__udivdi3+0x590>
1000c224:	00800404 	movi	r2,16
1000c228:	3886d83a 	srl	r3,r7,r2
1000c22c:	01040074 	movhi	r4,4097
1000c230:	210a3904 	addi	r4,r4,10468
1000c234:	20c7883a 	add	r3,r4,r3
1000c238:	18c00003 	ldbu	r3,0(r3)
1000c23c:	05c00804 	movi	r23,32
1000c240:	1885883a 	add	r2,r3,r2
1000c244:	b8afc83a 	sub	r23,r23,r2
1000c248:	b800671e 	bne	r23,zero,1000c3e8 <__udivdi3+0x32c>
1000c24c:	3c010536 	bltu	r7,r16,1000c664 <__udivdi3+0x5a8>
1000c250:	9985403a 	cmpgeu	r2,r19,r6
1000c254:	0007883a 	mov	r3,zero
1000c258:	00004a06 	br	1000c384 <__udivdi3+0x2c8>
1000c25c:	3000041e 	bne	r6,zero,1000c270 <__udivdi3+0x1b4>
1000c260:	000b883a 	mov	r5,zero
1000c264:	01000044 	movi	r4,1
1000c268:	00024cc0 	call	100024cc <__udivsi3>
1000c26c:	1023883a 	mov	r17,r2
1000c270:	00bfffd4 	movui	r2,65535
1000c274:	1440532e 	bgeu	r2,r17,1000c3c4 <__udivdi3+0x308>
1000c278:	00804034 	movhi	r2,256
1000c27c:	10bfffc4 	addi	r2,r2,-1
1000c280:	1440f436 	bltu	r2,r17,1000c654 <__udivdi3+0x598>
1000c284:	00800404 	movi	r2,16
1000c288:	8886d83a 	srl	r3,r17,r2
1000c28c:	01040074 	movhi	r4,4097
1000c290:	210a3904 	addi	r4,r4,10468
1000c294:	20c7883a 	add	r3,r4,r3
1000c298:	18c00003 	ldbu	r3,0(r3)
1000c29c:	1885883a 	add	r2,r3,r2
1000c2a0:	00c00804 	movi	r3,32
1000c2a4:	1887c83a 	sub	r3,r3,r2
1000c2a8:	1800a51e 	bne	r3,zero,1000c540 <__udivdi3+0x484>
1000c2ac:	882ad43a 	srli	r21,r17,16
1000c2b0:	8461c83a 	sub	r16,r16,r17
1000c2b4:	8d3fffcc 	andi	r20,r17,65535
1000c2b8:	00c00044 	movi	r3,1
1000c2bc:	a80b883a 	mov	r5,r21
1000c2c0:	8009883a 	mov	r4,r16
1000c2c4:	d8c00115 	stw	r3,4(sp)
1000c2c8:	00025300 	call	10002530 <__umodsi3>
1000c2cc:	a80b883a 	mov	r5,r21
1000c2d0:	8009883a 	mov	r4,r16
1000c2d4:	1027883a 	mov	r19,r2
1000c2d8:	00024cc0 	call	100024cc <__udivsi3>
1000c2dc:	a00b883a 	mov	r5,r20
1000c2e0:	1009883a 	mov	r4,r2
1000c2e4:	102d883a 	mov	r22,r2
1000c2e8:	000cc7c0 	call	1000cc7c <__mulsi3>
1000c2ec:	9826943a 	slli	r19,r19,16
1000c2f0:	900ed43a 	srli	r7,r18,16
1000c2f4:	d8c00117 	ldw	r3,4(sp)
1000c2f8:	3cceb03a 	or	r7,r7,r19
1000c2fc:	3880052e 	bgeu	r7,r2,1000c314 <__udivdi3+0x258>
1000c300:	3c4f883a 	add	r7,r7,r17
1000c304:	b13fffc4 	addi	r4,r22,-1
1000c308:	3c400136 	bltu	r7,r17,1000c310 <__udivdi3+0x254>
1000c30c:	3880e436 	bltu	r7,r2,1000c6a0 <__udivdi3+0x5e4>
1000c310:	202d883a 	mov	r22,r4
1000c314:	38a1c83a 	sub	r16,r7,r2
1000c318:	8009883a 	mov	r4,r16
1000c31c:	a80b883a 	mov	r5,r21
1000c320:	d8c00115 	stw	r3,4(sp)
1000c324:	00025300 	call	10002530 <__umodsi3>
1000c328:	1027883a 	mov	r19,r2
1000c32c:	8009883a 	mov	r4,r16
1000c330:	a80b883a 	mov	r5,r21
1000c334:	9826943a 	slli	r19,r19,16
1000c338:	00024cc0 	call	100024cc <__udivsi3>
1000c33c:	a00b883a 	mov	r5,r20
1000c340:	1009883a 	mov	r4,r2
1000c344:	94bfffcc 	andi	r18,r18,65535
1000c348:	1021883a 	mov	r16,r2
1000c34c:	94e4b03a 	or	r18,r18,r19
1000c350:	000cc7c0 	call	1000cc7c <__mulsi3>
1000c354:	d8c00117 	ldw	r3,4(sp)
1000c358:	9080052e 	bgeu	r18,r2,1000c370 <__udivdi3+0x2b4>
1000c35c:	8ca5883a 	add	r18,r17,r18
1000c360:	813fffc4 	addi	r4,r16,-1
1000c364:	9440ad36 	bltu	r18,r17,1000c61c <__udivdi3+0x560>
1000c368:	9080ac2e 	bgeu	r18,r2,1000c61c <__udivdi3+0x560>
1000c36c:	843fff84 	addi	r16,r16,-2
1000c370:	b004943a 	slli	r2,r22,16
1000c374:	1404b03a 	or	r2,r2,r16
1000c378:	00000206 	br	1000c384 <__udivdi3+0x2c8>
1000c37c:	0007883a 	mov	r3,zero
1000c380:	0005883a 	mov	r2,zero
1000c384:	dfc00b17 	ldw	ra,44(sp)
1000c388:	df000a17 	ldw	fp,40(sp)
1000c38c:	ddc00917 	ldw	r23,36(sp)
1000c390:	dd800817 	ldw	r22,32(sp)
1000c394:	dd400717 	ldw	r21,28(sp)
1000c398:	dd000617 	ldw	r20,24(sp)
1000c39c:	dcc00517 	ldw	r19,20(sp)
1000c3a0:	dc800417 	ldw	r18,16(sp)
1000c3a4:	dc400317 	ldw	r17,12(sp)
1000c3a8:	dc000217 	ldw	r16,8(sp)
1000c3ac:	dec00c04 	addi	sp,sp,48
1000c3b0:	f800283a 	ret
1000c3b4:	00803fc4 	movi	r2,255
1000c3b8:	11c5803a 	cmpltu	r2,r2,r7
1000c3bc:	100490fa 	slli	r2,r2,3
1000c3c0:	003f9906 	br	1000c228 <__alt_data_end+0xf800c228>
1000c3c4:	00803fc4 	movi	r2,255
1000c3c8:	1445803a 	cmpltu	r2,r2,r17
1000c3cc:	100490fa 	slli	r2,r2,3
1000c3d0:	003fad06 	br	1000c288 <__alt_data_end+0xf800c288>
1000c3d4:	00804034 	movhi	r2,256
1000c3d8:	10bfffc4 	addi	r2,r2,-1
1000c3dc:	11809f36 	bltu	r2,r6,1000c65c <__udivdi3+0x5a0>
1000c3e0:	00800404 	movi	r2,16
1000c3e4:	003f4c06 	br	1000c118 <__alt_data_end+0xf800c118>
1000c3e8:	3dce983a 	sll	r7,r7,r23
1000c3ec:	30b8d83a 	srl	fp,r6,r2
1000c3f0:	80a2d83a 	srl	r17,r16,r2
1000c3f4:	35cc983a 	sll	r6,r6,r23
1000c3f8:	3f38b03a 	or	fp,r7,fp
1000c3fc:	e024d43a 	srli	r18,fp,16
1000c400:	9884d83a 	srl	r2,r19,r2
1000c404:	85e0983a 	sll	r16,r16,r23
1000c408:	8809883a 	mov	r4,r17
1000c40c:	900b883a 	mov	r5,r18
1000c410:	d9800015 	stw	r6,0(sp)
1000c414:	1420b03a 	or	r16,r2,r16
1000c418:	00025300 	call	10002530 <__umodsi3>
1000c41c:	900b883a 	mov	r5,r18
1000c420:	8809883a 	mov	r4,r17
1000c424:	1029883a 	mov	r20,r2
1000c428:	e5bfffcc 	andi	r22,fp,65535
1000c42c:	00024cc0 	call	100024cc <__udivsi3>
1000c430:	100b883a 	mov	r5,r2
1000c434:	b009883a 	mov	r4,r22
1000c438:	102b883a 	mov	r21,r2
1000c43c:	000cc7c0 	call	1000cc7c <__mulsi3>
1000c440:	a028943a 	slli	r20,r20,16
1000c444:	8006d43a 	srli	r3,r16,16
1000c448:	1d06b03a 	or	r3,r3,r20
1000c44c:	1880042e 	bgeu	r3,r2,1000c460 <__udivdi3+0x3a4>
1000c450:	1f07883a 	add	r3,r3,fp
1000c454:	a93fffc4 	addi	r4,r21,-1
1000c458:	1f00892e 	bgeu	r3,fp,1000c680 <__udivdi3+0x5c4>
1000c45c:	202b883a 	mov	r21,r4
1000c460:	18a3c83a 	sub	r17,r3,r2
1000c464:	8809883a 	mov	r4,r17
1000c468:	900b883a 	mov	r5,r18
1000c46c:	00025300 	call	10002530 <__umodsi3>
1000c470:	1029883a 	mov	r20,r2
1000c474:	8809883a 	mov	r4,r17
1000c478:	900b883a 	mov	r5,r18
1000c47c:	a028943a 	slli	r20,r20,16
1000c480:	00024cc0 	call	100024cc <__udivsi3>
1000c484:	100b883a 	mov	r5,r2
1000c488:	b009883a 	mov	r4,r22
1000c48c:	843fffcc 	andi	r16,r16,65535
1000c490:	1023883a 	mov	r17,r2
1000c494:	8520b03a 	or	r16,r16,r20
1000c498:	000cc7c0 	call	1000cc7c <__mulsi3>
1000c49c:	8080042e 	bgeu	r16,r2,1000c4b0 <__udivdi3+0x3f4>
1000c4a0:	8721883a 	add	r16,r16,fp
1000c4a4:	88ffffc4 	addi	r3,r17,-1
1000c4a8:	8700712e 	bgeu	r16,fp,1000c670 <__udivdi3+0x5b4>
1000c4ac:	1823883a 	mov	r17,r3
1000c4b0:	a80e943a 	slli	r7,r21,16
1000c4b4:	d8c00017 	ldw	r3,0(sp)
1000c4b8:	80a1c83a 	sub	r16,r16,r2
1000c4bc:	3c64b03a 	or	r18,r7,r17
1000c4c0:	1d3fffcc 	andi	r20,r3,65535
1000c4c4:	9022d43a 	srli	r17,r18,16
1000c4c8:	95bfffcc 	andi	r22,r18,65535
1000c4cc:	a00b883a 	mov	r5,r20
1000c4d0:	b009883a 	mov	r4,r22
1000c4d4:	182ad43a 	srli	r21,r3,16
1000c4d8:	000cc7c0 	call	1000cc7c <__mulsi3>
1000c4dc:	a00b883a 	mov	r5,r20
1000c4e0:	8809883a 	mov	r4,r17
1000c4e4:	1039883a 	mov	fp,r2
1000c4e8:	000cc7c0 	call	1000cc7c <__mulsi3>
1000c4ec:	8809883a 	mov	r4,r17
1000c4f0:	a80b883a 	mov	r5,r21
1000c4f4:	1029883a 	mov	r20,r2
1000c4f8:	000cc7c0 	call	1000cc7c <__mulsi3>
1000c4fc:	a80b883a 	mov	r5,r21
1000c500:	b009883a 	mov	r4,r22
1000c504:	1023883a 	mov	r17,r2
1000c508:	000cc7c0 	call	1000cc7c <__mulsi3>
1000c50c:	e006d43a 	srli	r3,fp,16
1000c510:	1505883a 	add	r2,r2,r20
1000c514:	1887883a 	add	r3,r3,r2
1000c518:	1d00022e 	bgeu	r3,r20,1000c524 <__udivdi3+0x468>
1000c51c:	00800074 	movhi	r2,1
1000c520:	88a3883a 	add	r17,r17,r2
1000c524:	1804d43a 	srli	r2,r3,16
1000c528:	1463883a 	add	r17,r2,r17
1000c52c:	84404436 	bltu	r16,r17,1000c640 <__udivdi3+0x584>
1000c530:	84403e26 	beq	r16,r17,1000c62c <__udivdi3+0x570>
1000c534:	9005883a 	mov	r2,r18
1000c538:	0007883a 	mov	r3,zero
1000c53c:	003f9106 	br	1000c384 <__alt_data_end+0xf800c384>
1000c540:	88e2983a 	sll	r17,r17,r3
1000c544:	80aed83a 	srl	r23,r16,r2
1000c548:	80e0983a 	sll	r16,r16,r3
1000c54c:	882ad43a 	srli	r21,r17,16
1000c550:	9884d83a 	srl	r2,r19,r2
1000c554:	b809883a 	mov	r4,r23
1000c558:	a80b883a 	mov	r5,r21
1000c55c:	98e4983a 	sll	r18,r19,r3
1000c560:	142cb03a 	or	r22,r2,r16
1000c564:	00025300 	call	10002530 <__umodsi3>
1000c568:	b809883a 	mov	r4,r23
1000c56c:	a80b883a 	mov	r5,r21
1000c570:	1027883a 	mov	r19,r2
1000c574:	8d3fffcc 	andi	r20,r17,65535
1000c578:	00024cc0 	call	100024cc <__udivsi3>
1000c57c:	a009883a 	mov	r4,r20
1000c580:	100b883a 	mov	r5,r2
1000c584:	102f883a 	mov	r23,r2
1000c588:	000cc7c0 	call	1000cc7c <__mulsi3>
1000c58c:	9826943a 	slli	r19,r19,16
1000c590:	b008d43a 	srli	r4,r22,16
1000c594:	24c8b03a 	or	r4,r4,r19
1000c598:	2080062e 	bgeu	r4,r2,1000c5b4 <__udivdi3+0x4f8>
1000c59c:	2449883a 	add	r4,r4,r17
1000c5a0:	b8ffffc4 	addi	r3,r23,-1
1000c5a4:	24403c36 	bltu	r4,r17,1000c698 <__udivdi3+0x5dc>
1000c5a8:	20803b2e 	bgeu	r4,r2,1000c698 <__udivdi3+0x5dc>
1000c5ac:	bdffff84 	addi	r23,r23,-2
1000c5b0:	2449883a 	add	r4,r4,r17
1000c5b4:	20a1c83a 	sub	r16,r4,r2
1000c5b8:	a80b883a 	mov	r5,r21
1000c5bc:	8009883a 	mov	r4,r16
1000c5c0:	00025300 	call	10002530 <__umodsi3>
1000c5c4:	a80b883a 	mov	r5,r21
1000c5c8:	8009883a 	mov	r4,r16
1000c5cc:	1027883a 	mov	r19,r2
1000c5d0:	00024cc0 	call	100024cc <__udivsi3>
1000c5d4:	a009883a 	mov	r4,r20
1000c5d8:	100b883a 	mov	r5,r2
1000c5dc:	9826943a 	slli	r19,r19,16
1000c5e0:	1039883a 	mov	fp,r2
1000c5e4:	000cc7c0 	call	1000cc7c <__mulsi3>
1000c5e8:	b13fffcc 	andi	r4,r22,65535
1000c5ec:	24c8b03a 	or	r4,r4,r19
1000c5f0:	2080062e 	bgeu	r4,r2,1000c60c <__udivdi3+0x550>
1000c5f4:	2449883a 	add	r4,r4,r17
1000c5f8:	e0ffffc4 	addi	r3,fp,-1
1000c5fc:	24402436 	bltu	r4,r17,1000c690 <__udivdi3+0x5d4>
1000c600:	2080232e 	bgeu	r4,r2,1000c690 <__udivdi3+0x5d4>
1000c604:	e73fff84 	addi	fp,fp,-2
1000c608:	2449883a 	add	r4,r4,r17
1000c60c:	b82e943a 	slli	r23,r23,16
1000c610:	20a1c83a 	sub	r16,r4,r2
1000c614:	bf06b03a 	or	r3,r23,fp
1000c618:	003f2806 	br	1000c2bc <__alt_data_end+0xf800c2bc>
1000c61c:	2021883a 	mov	r16,r4
1000c620:	003f5306 	br	1000c370 <__alt_data_end+0xf800c370>
1000c624:	1821883a 	mov	r16,r3
1000c628:	003ef406 	br	1000c1fc <__alt_data_end+0xf800c1fc>
1000c62c:	1806943a 	slli	r3,r3,16
1000c630:	9de6983a 	sll	r19,r19,r23
1000c634:	e73fffcc 	andi	fp,fp,65535
1000c638:	1f07883a 	add	r3,r3,fp
1000c63c:	98ffbd2e 	bgeu	r19,r3,1000c534 <__alt_data_end+0xf800c534>
1000c640:	90bfffc4 	addi	r2,r18,-1
1000c644:	0007883a 	mov	r3,zero
1000c648:	003f4e06 	br	1000c384 <__alt_data_end+0xf800c384>
1000c64c:	00800604 	movi	r2,24
1000c650:	003ef506 	br	1000c228 <__alt_data_end+0xf800c228>
1000c654:	00800604 	movi	r2,24
1000c658:	003f0b06 	br	1000c288 <__alt_data_end+0xf800c288>
1000c65c:	00800604 	movi	r2,24
1000c660:	003ead06 	br	1000c118 <__alt_data_end+0xf800c118>
1000c664:	0007883a 	mov	r3,zero
1000c668:	00800044 	movi	r2,1
1000c66c:	003f4506 	br	1000c384 <__alt_data_end+0xf800c384>
1000c670:	80bf8e2e 	bgeu	r16,r2,1000c4ac <__alt_data_end+0xf800c4ac>
1000c674:	8c7fff84 	addi	r17,r17,-2
1000c678:	8721883a 	add	r16,r16,fp
1000c67c:	003f8c06 	br	1000c4b0 <__alt_data_end+0xf800c4b0>
1000c680:	18bf762e 	bgeu	r3,r2,1000c45c <__alt_data_end+0xf800c45c>
1000c684:	ad7fff84 	addi	r21,r21,-2
1000c688:	1f07883a 	add	r3,r3,fp
1000c68c:	003f7406 	br	1000c460 <__alt_data_end+0xf800c460>
1000c690:	1839883a 	mov	fp,r3
1000c694:	003fdd06 	br	1000c60c <__alt_data_end+0xf800c60c>
1000c698:	182f883a 	mov	r23,r3
1000c69c:	003fc506 	br	1000c5b4 <__alt_data_end+0xf800c5b4>
1000c6a0:	b5bfff84 	addi	r22,r22,-2
1000c6a4:	3c4f883a 	add	r7,r7,r17
1000c6a8:	003f1a06 	br	1000c314 <__alt_data_end+0xf800c314>
1000c6ac:	b5bfff84 	addi	r22,r22,-2
1000c6b0:	1c47883a 	add	r3,r3,r17
1000c6b4:	003ebc06 	br	1000c1a8 <__alt_data_end+0xf800c1a8>

1000c6b8 <__umoddi3>:
1000c6b8:	defff304 	addi	sp,sp,-52
1000c6bc:	df000b15 	stw	fp,44(sp)
1000c6c0:	dc400415 	stw	r17,16(sp)
1000c6c4:	dc000315 	stw	r16,12(sp)
1000c6c8:	dfc00c15 	stw	ra,48(sp)
1000c6cc:	ddc00a15 	stw	r23,40(sp)
1000c6d0:	dd800915 	stw	r22,36(sp)
1000c6d4:	dd400815 	stw	r21,32(sp)
1000c6d8:	dd000715 	stw	r20,28(sp)
1000c6dc:	dcc00615 	stw	r19,24(sp)
1000c6e0:	dc800515 	stw	r18,20(sp)
1000c6e4:	2021883a 	mov	r16,r4
1000c6e8:	2823883a 	mov	r17,r5
1000c6ec:	2839883a 	mov	fp,r5
1000c6f0:	3800401e 	bne	r7,zero,1000c7f4 <__umoddi3+0x13c>
1000c6f4:	3027883a 	mov	r19,r6
1000c6f8:	2029883a 	mov	r20,r4
1000c6fc:	2980552e 	bgeu	r5,r6,1000c854 <__umoddi3+0x19c>
1000c700:	00bfffd4 	movui	r2,65535
1000c704:	1180a236 	bltu	r2,r6,1000c990 <__umoddi3+0x2d8>
1000c708:	01003fc4 	movi	r4,255
1000c70c:	2189803a 	cmpltu	r4,r4,r6
1000c710:	200890fa 	slli	r4,r4,3
1000c714:	3104d83a 	srl	r2,r6,r4
1000c718:	00c40074 	movhi	r3,4097
1000c71c:	18ca3904 	addi	r3,r3,10468
1000c720:	1885883a 	add	r2,r3,r2
1000c724:	10c00003 	ldbu	r3,0(r2)
1000c728:	00800804 	movi	r2,32
1000c72c:	1909883a 	add	r4,r3,r4
1000c730:	1125c83a 	sub	r18,r2,r4
1000c734:	90000526 	beq	r18,zero,1000c74c <__umoddi3+0x94>
1000c738:	8ca2983a 	sll	r17,r17,r18
1000c73c:	8108d83a 	srl	r4,r16,r4
1000c740:	34a6983a 	sll	r19,r6,r18
1000c744:	84a8983a 	sll	r20,r16,r18
1000c748:	2478b03a 	or	fp,r4,r17
1000c74c:	982cd43a 	srli	r22,r19,16
1000c750:	e009883a 	mov	r4,fp
1000c754:	9dffffcc 	andi	r23,r19,65535
1000c758:	b00b883a 	mov	r5,r22
1000c75c:	00025300 	call	10002530 <__umodsi3>
1000c760:	b00b883a 	mov	r5,r22
1000c764:	e009883a 	mov	r4,fp
1000c768:	102b883a 	mov	r21,r2
1000c76c:	00024cc0 	call	100024cc <__udivsi3>
1000c770:	100b883a 	mov	r5,r2
1000c774:	b809883a 	mov	r4,r23
1000c778:	000cc7c0 	call	1000cc7c <__mulsi3>
1000c77c:	a82a943a 	slli	r21,r21,16
1000c780:	a006d43a 	srli	r3,r20,16
1000c784:	1d46b03a 	or	r3,r3,r21
1000c788:	1880032e 	bgeu	r3,r2,1000c798 <__umoddi3+0xe0>
1000c78c:	1cc7883a 	add	r3,r3,r19
1000c790:	1cc00136 	bltu	r3,r19,1000c798 <__umoddi3+0xe0>
1000c794:	18813136 	bltu	r3,r2,1000cc5c <__umoddi3+0x5a4>
1000c798:	18a1c83a 	sub	r16,r3,r2
1000c79c:	b00b883a 	mov	r5,r22
1000c7a0:	8009883a 	mov	r4,r16
1000c7a4:	00025300 	call	10002530 <__umodsi3>
1000c7a8:	b00b883a 	mov	r5,r22
1000c7ac:	8009883a 	mov	r4,r16
1000c7b0:	1023883a 	mov	r17,r2
1000c7b4:	00024cc0 	call	100024cc <__udivsi3>
1000c7b8:	100b883a 	mov	r5,r2
1000c7bc:	b809883a 	mov	r4,r23
1000c7c0:	8822943a 	slli	r17,r17,16
1000c7c4:	000cc7c0 	call	1000cc7c <__mulsi3>
1000c7c8:	a0ffffcc 	andi	r3,r20,65535
1000c7cc:	1c46b03a 	or	r3,r3,r17
1000c7d0:	1880042e 	bgeu	r3,r2,1000c7e4 <__umoddi3+0x12c>
1000c7d4:	1cc7883a 	add	r3,r3,r19
1000c7d8:	1cc00236 	bltu	r3,r19,1000c7e4 <__umoddi3+0x12c>
1000c7dc:	1880012e 	bgeu	r3,r2,1000c7e4 <__umoddi3+0x12c>
1000c7e0:	1cc7883a 	add	r3,r3,r19
1000c7e4:	1885c83a 	sub	r2,r3,r2
1000c7e8:	1484d83a 	srl	r2,r2,r18
1000c7ec:	0007883a 	mov	r3,zero
1000c7f0:	00005306 	br	1000c940 <__umoddi3+0x288>
1000c7f4:	29c05036 	bltu	r5,r7,1000c938 <__umoddi3+0x280>
1000c7f8:	00bfffd4 	movui	r2,65535
1000c7fc:	11c05c2e 	bgeu	r2,r7,1000c970 <__umoddi3+0x2b8>
1000c800:	00804034 	movhi	r2,256
1000c804:	10bfffc4 	addi	r2,r2,-1
1000c808:	11c10636 	bltu	r2,r7,1000cc24 <__umoddi3+0x56c>
1000c80c:	01000404 	movi	r4,16
1000c810:	3904d83a 	srl	r2,r7,r4
1000c814:	00c40074 	movhi	r3,4097
1000c818:	18ca3904 	addi	r3,r3,10468
1000c81c:	1885883a 	add	r2,r3,r2
1000c820:	14c00003 	ldbu	r19,0(r2)
1000c824:	00c00804 	movi	r3,32
1000c828:	9927883a 	add	r19,r19,r4
1000c82c:	1ce9c83a 	sub	r20,r3,r19
1000c830:	a0005c1e 	bne	r20,zero,1000c9a4 <__umoddi3+0x2ec>
1000c834:	3c400136 	bltu	r7,r17,1000c83c <__umoddi3+0x184>
1000c838:	81810a36 	bltu	r16,r6,1000cc64 <__umoddi3+0x5ac>
1000c83c:	8185c83a 	sub	r2,r16,r6
1000c840:	89e3c83a 	sub	r17,r17,r7
1000c844:	8089803a 	cmpltu	r4,r16,r2
1000c848:	8939c83a 	sub	fp,r17,r4
1000c84c:	e007883a 	mov	r3,fp
1000c850:	00003b06 	br	1000c940 <__umoddi3+0x288>
1000c854:	3000041e 	bne	r6,zero,1000c868 <__umoddi3+0x1b0>
1000c858:	000b883a 	mov	r5,zero
1000c85c:	01000044 	movi	r4,1
1000c860:	00024cc0 	call	100024cc <__udivsi3>
1000c864:	1027883a 	mov	r19,r2
1000c868:	00bfffd4 	movui	r2,65535
1000c86c:	14c0442e 	bgeu	r2,r19,1000c980 <__umoddi3+0x2c8>
1000c870:	00804034 	movhi	r2,256
1000c874:	10bfffc4 	addi	r2,r2,-1
1000c878:	14c0ec36 	bltu	r2,r19,1000cc2c <__umoddi3+0x574>
1000c87c:	00800404 	movi	r2,16
1000c880:	9886d83a 	srl	r3,r19,r2
1000c884:	01040074 	movhi	r4,4097
1000c888:	210a3904 	addi	r4,r4,10468
1000c88c:	20c7883a 	add	r3,r4,r3
1000c890:	18c00003 	ldbu	r3,0(r3)
1000c894:	1887883a 	add	r3,r3,r2
1000c898:	00800804 	movi	r2,32
1000c89c:	10e5c83a 	sub	r18,r2,r3
1000c8a0:	9000ab1e 	bne	r18,zero,1000cb50 <__umoddi3+0x498>
1000c8a4:	982cd43a 	srli	r22,r19,16
1000c8a8:	8ce3c83a 	sub	r17,r17,r19
1000c8ac:	9dffffcc 	andi	r23,r19,65535
1000c8b0:	b00b883a 	mov	r5,r22
1000c8b4:	8809883a 	mov	r4,r17
1000c8b8:	00025300 	call	10002530 <__umodsi3>
1000c8bc:	b00b883a 	mov	r5,r22
1000c8c0:	8809883a 	mov	r4,r17
1000c8c4:	102b883a 	mov	r21,r2
1000c8c8:	00024cc0 	call	100024cc <__udivsi3>
1000c8cc:	b80b883a 	mov	r5,r23
1000c8d0:	1009883a 	mov	r4,r2
1000c8d4:	000cc7c0 	call	1000cc7c <__mulsi3>
1000c8d8:	a82a943a 	slli	r21,r21,16
1000c8dc:	a006d43a 	srli	r3,r20,16
1000c8e0:	1d46b03a 	or	r3,r3,r21
1000c8e4:	1880042e 	bgeu	r3,r2,1000c8f8 <__umoddi3+0x240>
1000c8e8:	1cc7883a 	add	r3,r3,r19
1000c8ec:	1cc00236 	bltu	r3,r19,1000c8f8 <__umoddi3+0x240>
1000c8f0:	1880012e 	bgeu	r3,r2,1000c8f8 <__umoddi3+0x240>
1000c8f4:	1cc7883a 	add	r3,r3,r19
1000c8f8:	18a1c83a 	sub	r16,r3,r2
1000c8fc:	b00b883a 	mov	r5,r22
1000c900:	8009883a 	mov	r4,r16
1000c904:	00025300 	call	10002530 <__umodsi3>
1000c908:	1023883a 	mov	r17,r2
1000c90c:	b00b883a 	mov	r5,r22
1000c910:	8009883a 	mov	r4,r16
1000c914:	00024cc0 	call	100024cc <__udivsi3>
1000c918:	8822943a 	slli	r17,r17,16
1000c91c:	b80b883a 	mov	r5,r23
1000c920:	1009883a 	mov	r4,r2
1000c924:	000cc7c0 	call	1000cc7c <__mulsi3>
1000c928:	a53fffcc 	andi	r20,r20,65535
1000c92c:	a446b03a 	or	r3,r20,r17
1000c930:	18bfac2e 	bgeu	r3,r2,1000c7e4 <__alt_data_end+0xf800c7e4>
1000c934:	003fa706 	br	1000c7d4 <__alt_data_end+0xf800c7d4>
1000c938:	2005883a 	mov	r2,r4
1000c93c:	2807883a 	mov	r3,r5
1000c940:	dfc00c17 	ldw	ra,48(sp)
1000c944:	df000b17 	ldw	fp,44(sp)
1000c948:	ddc00a17 	ldw	r23,40(sp)
1000c94c:	dd800917 	ldw	r22,36(sp)
1000c950:	dd400817 	ldw	r21,32(sp)
1000c954:	dd000717 	ldw	r20,28(sp)
1000c958:	dcc00617 	ldw	r19,24(sp)
1000c95c:	dc800517 	ldw	r18,20(sp)
1000c960:	dc400417 	ldw	r17,16(sp)
1000c964:	dc000317 	ldw	r16,12(sp)
1000c968:	dec00d04 	addi	sp,sp,52
1000c96c:	f800283a 	ret
1000c970:	04c03fc4 	movi	r19,255
1000c974:	99c9803a 	cmpltu	r4,r19,r7
1000c978:	200890fa 	slli	r4,r4,3
1000c97c:	003fa406 	br	1000c810 <__alt_data_end+0xf800c810>
1000c980:	00803fc4 	movi	r2,255
1000c984:	14c5803a 	cmpltu	r2,r2,r19
1000c988:	100490fa 	slli	r2,r2,3
1000c98c:	003fbc06 	br	1000c880 <__alt_data_end+0xf800c880>
1000c990:	00804034 	movhi	r2,256
1000c994:	10bfffc4 	addi	r2,r2,-1
1000c998:	1180a636 	bltu	r2,r6,1000cc34 <__umoddi3+0x57c>
1000c99c:	01000404 	movi	r4,16
1000c9a0:	003f5c06 	br	1000c714 <__alt_data_end+0xf800c714>
1000c9a4:	3d0e983a 	sll	r7,r7,r20
1000c9a8:	34ead83a 	srl	r21,r6,r19
1000c9ac:	8cc6d83a 	srl	r3,r17,r19
1000c9b0:	8d10983a 	sll	r8,r17,r20
1000c9b4:	3d6ab03a 	or	r21,r7,r21
1000c9b8:	a82cd43a 	srli	r22,r21,16
1000c9bc:	84e2d83a 	srl	r17,r16,r19
1000c9c0:	1809883a 	mov	r4,r3
1000c9c4:	b00b883a 	mov	r5,r22
1000c9c8:	8a22b03a 	or	r17,r17,r8
1000c9cc:	3524983a 	sll	r18,r6,r20
1000c9d0:	dc400015 	stw	r17,0(sp)
1000c9d4:	d8c00115 	stw	r3,4(sp)
1000c9d8:	00025300 	call	10002530 <__umodsi3>
1000c9dc:	d8c00117 	ldw	r3,4(sp)
1000c9e0:	b00b883a 	mov	r5,r22
1000c9e4:	1039883a 	mov	fp,r2
1000c9e8:	1809883a 	mov	r4,r3
1000c9ec:	00024cc0 	call	100024cc <__udivsi3>
1000c9f0:	adffffcc 	andi	r23,r21,65535
1000c9f4:	100b883a 	mov	r5,r2
1000c9f8:	b809883a 	mov	r4,r23
1000c9fc:	1023883a 	mov	r17,r2
1000ca00:	000cc7c0 	call	1000cc7c <__mulsi3>
1000ca04:	d9400017 	ldw	r5,0(sp)
1000ca08:	e008943a 	slli	r4,fp,16
1000ca0c:	8520983a 	sll	r16,r16,r20
1000ca10:	2806d43a 	srli	r3,r5,16
1000ca14:	1906b03a 	or	r3,r3,r4
1000ca18:	1880042e 	bgeu	r3,r2,1000ca2c <__umoddi3+0x374>
1000ca1c:	1d47883a 	add	r3,r3,r21
1000ca20:	893fffc4 	addi	r4,r17,-1
1000ca24:	1d40892e 	bgeu	r3,r21,1000cc4c <__umoddi3+0x594>
1000ca28:	2023883a 	mov	r17,r4
1000ca2c:	18b9c83a 	sub	fp,r3,r2
1000ca30:	b00b883a 	mov	r5,r22
1000ca34:	e009883a 	mov	r4,fp
1000ca38:	00025300 	call	10002530 <__umodsi3>
1000ca3c:	b00b883a 	mov	r5,r22
1000ca40:	e009883a 	mov	r4,fp
1000ca44:	d8800215 	stw	r2,8(sp)
1000ca48:	00024cc0 	call	100024cc <__udivsi3>
1000ca4c:	100b883a 	mov	r5,r2
1000ca50:	b809883a 	mov	r4,r23
1000ca54:	102d883a 	mov	r22,r2
1000ca58:	000cc7c0 	call	1000cc7c <__mulsi3>
1000ca5c:	d9800217 	ldw	r6,8(sp)
1000ca60:	d8c00017 	ldw	r3,0(sp)
1000ca64:	300c943a 	slli	r6,r6,16
1000ca68:	1a3fffcc 	andi	r8,r3,65535
1000ca6c:	4190b03a 	or	r8,r8,r6
1000ca70:	4080042e 	bgeu	r8,r2,1000ca84 <__umoddi3+0x3cc>
1000ca74:	4551883a 	add	r8,r8,r21
1000ca78:	b0ffffc4 	addi	r3,r22,-1
1000ca7c:	45406f2e 	bgeu	r8,r21,1000cc3c <__umoddi3+0x584>
1000ca80:	182d883a 	mov	r22,r3
1000ca84:	880e943a 	slli	r7,r17,16
1000ca88:	9006d43a 	srli	r3,r18,16
1000ca8c:	91bfffcc 	andi	r6,r18,65535
1000ca90:	3dacb03a 	or	r22,r7,r22
1000ca94:	b02ed43a 	srli	r23,r22,16
1000ca98:	b5bfffcc 	andi	r22,r22,65535
1000ca9c:	300b883a 	mov	r5,r6
1000caa0:	b009883a 	mov	r4,r22
1000caa4:	40a3c83a 	sub	r17,r8,r2
1000caa8:	d8c00115 	stw	r3,4(sp)
1000caac:	d9800215 	stw	r6,8(sp)
1000cab0:	000cc7c0 	call	1000cc7c <__mulsi3>
1000cab4:	d9800217 	ldw	r6,8(sp)
1000cab8:	b809883a 	mov	r4,r23
1000cabc:	1039883a 	mov	fp,r2
1000cac0:	300b883a 	mov	r5,r6
1000cac4:	000cc7c0 	call	1000cc7c <__mulsi3>
1000cac8:	d8c00117 	ldw	r3,4(sp)
1000cacc:	b809883a 	mov	r4,r23
1000cad0:	d8800215 	stw	r2,8(sp)
1000cad4:	180b883a 	mov	r5,r3
1000cad8:	000cc7c0 	call	1000cc7c <__mulsi3>
1000cadc:	d8c00117 	ldw	r3,4(sp)
1000cae0:	b009883a 	mov	r4,r22
1000cae4:	102f883a 	mov	r23,r2
1000cae8:	180b883a 	mov	r5,r3
1000caec:	000cc7c0 	call	1000cc7c <__mulsi3>
1000caf0:	d9800217 	ldw	r6,8(sp)
1000caf4:	e006d43a 	srli	r3,fp,16
1000caf8:	1185883a 	add	r2,r2,r6
1000cafc:	1885883a 	add	r2,r3,r2
1000cb00:	1180022e 	bgeu	r2,r6,1000cb0c <__umoddi3+0x454>
1000cb04:	00c00074 	movhi	r3,1
1000cb08:	b8ef883a 	add	r23,r23,r3
1000cb0c:	1006d43a 	srli	r3,r2,16
1000cb10:	1004943a 	slli	r2,r2,16
1000cb14:	e73fffcc 	andi	fp,fp,65535
1000cb18:	1dc7883a 	add	r3,r3,r23
1000cb1c:	1739883a 	add	fp,r2,fp
1000cb20:	88c03a36 	bltu	r17,r3,1000cc0c <__umoddi3+0x554>
1000cb24:	88c05126 	beq	r17,r3,1000cc6c <__umoddi3+0x5b4>
1000cb28:	88c9c83a 	sub	r4,r17,r3
1000cb2c:	e00f883a 	mov	r7,fp
1000cb30:	81cfc83a 	sub	r7,r16,r7
1000cb34:	81c7803a 	cmpltu	r3,r16,r7
1000cb38:	20c7c83a 	sub	r3,r4,r3
1000cb3c:	1cc4983a 	sll	r2,r3,r19
1000cb40:	3d0ed83a 	srl	r7,r7,r20
1000cb44:	1d06d83a 	srl	r3,r3,r20
1000cb48:	11c4b03a 	or	r2,r2,r7
1000cb4c:	003f7c06 	br	1000c940 <__alt_data_end+0xf800c940>
1000cb50:	9ca6983a 	sll	r19,r19,r18
1000cb54:	88f8d83a 	srl	fp,r17,r3
1000cb58:	80c4d83a 	srl	r2,r16,r3
1000cb5c:	982cd43a 	srli	r22,r19,16
1000cb60:	8ca2983a 	sll	r17,r17,r18
1000cb64:	e009883a 	mov	r4,fp
1000cb68:	b00b883a 	mov	r5,r22
1000cb6c:	146ab03a 	or	r21,r2,r17
1000cb70:	00025300 	call	10002530 <__umodsi3>
1000cb74:	b00b883a 	mov	r5,r22
1000cb78:	e009883a 	mov	r4,fp
1000cb7c:	1029883a 	mov	r20,r2
1000cb80:	9dffffcc 	andi	r23,r19,65535
1000cb84:	00024cc0 	call	100024cc <__udivsi3>
1000cb88:	b809883a 	mov	r4,r23
1000cb8c:	100b883a 	mov	r5,r2
1000cb90:	000cc7c0 	call	1000cc7c <__mulsi3>
1000cb94:	a008943a 	slli	r4,r20,16
1000cb98:	a806d43a 	srli	r3,r21,16
1000cb9c:	84a8983a 	sll	r20,r16,r18
1000cba0:	1906b03a 	or	r3,r3,r4
1000cba4:	1880042e 	bgeu	r3,r2,1000cbb8 <__umoddi3+0x500>
1000cba8:	1cc7883a 	add	r3,r3,r19
1000cbac:	1cc00236 	bltu	r3,r19,1000cbb8 <__umoddi3+0x500>
1000cbb0:	1880012e 	bgeu	r3,r2,1000cbb8 <__umoddi3+0x500>
1000cbb4:	1cc7883a 	add	r3,r3,r19
1000cbb8:	18a3c83a 	sub	r17,r3,r2
1000cbbc:	b00b883a 	mov	r5,r22
1000cbc0:	8809883a 	mov	r4,r17
1000cbc4:	00025300 	call	10002530 <__umodsi3>
1000cbc8:	b00b883a 	mov	r5,r22
1000cbcc:	8809883a 	mov	r4,r17
1000cbd0:	1021883a 	mov	r16,r2
1000cbd4:	00024cc0 	call	100024cc <__udivsi3>
1000cbd8:	100b883a 	mov	r5,r2
1000cbdc:	b809883a 	mov	r4,r23
1000cbe0:	8020943a 	slli	r16,r16,16
1000cbe4:	000cc7c0 	call	1000cc7c <__mulsi3>
1000cbe8:	a8ffffcc 	andi	r3,r21,65535
1000cbec:	1c06b03a 	or	r3,r3,r16
1000cbf0:	1880042e 	bgeu	r3,r2,1000cc04 <__umoddi3+0x54c>
1000cbf4:	1cc7883a 	add	r3,r3,r19
1000cbf8:	1cc00236 	bltu	r3,r19,1000cc04 <__umoddi3+0x54c>
1000cbfc:	1880012e 	bgeu	r3,r2,1000cc04 <__umoddi3+0x54c>
1000cc00:	1cc7883a 	add	r3,r3,r19
1000cc04:	18a3c83a 	sub	r17,r3,r2
1000cc08:	003f2906 	br	1000c8b0 <__alt_data_end+0xf800c8b0>
1000cc0c:	e48fc83a 	sub	r7,fp,r18
1000cc10:	1d49c83a 	sub	r4,r3,r21
1000cc14:	e1f9803a 	cmpltu	fp,fp,r7
1000cc18:	2739c83a 	sub	fp,r4,fp
1000cc1c:	8f09c83a 	sub	r4,r17,fp
1000cc20:	003fc306 	br	1000cb30 <__alt_data_end+0xf800cb30>
1000cc24:	01000604 	movi	r4,24
1000cc28:	003ef906 	br	1000c810 <__alt_data_end+0xf800c810>
1000cc2c:	00800604 	movi	r2,24
1000cc30:	003f1306 	br	1000c880 <__alt_data_end+0xf800c880>
1000cc34:	01000604 	movi	r4,24
1000cc38:	003eb606 	br	1000c714 <__alt_data_end+0xf800c714>
1000cc3c:	40bf902e 	bgeu	r8,r2,1000ca80 <__alt_data_end+0xf800ca80>
1000cc40:	b5bfff84 	addi	r22,r22,-2
1000cc44:	4551883a 	add	r8,r8,r21
1000cc48:	003f8e06 	br	1000ca84 <__alt_data_end+0xf800ca84>
1000cc4c:	18bf762e 	bgeu	r3,r2,1000ca28 <__alt_data_end+0xf800ca28>
1000cc50:	8c7fff84 	addi	r17,r17,-2
1000cc54:	1d47883a 	add	r3,r3,r21
1000cc58:	003f7406 	br	1000ca2c <__alt_data_end+0xf800ca2c>
1000cc5c:	1cc7883a 	add	r3,r3,r19
1000cc60:	003ecd06 	br	1000c798 <__alt_data_end+0xf800c798>
1000cc64:	8005883a 	mov	r2,r16
1000cc68:	003ef806 	br	1000c84c <__alt_data_end+0xf800c84c>
1000cc6c:	873fe736 	bltu	r16,fp,1000cc0c <__alt_data_end+0xf800cc0c>
1000cc70:	e00f883a 	mov	r7,fp
1000cc74:	0009883a 	mov	r4,zero
1000cc78:	003fad06 	br	1000cb30 <__alt_data_end+0xf800cb30>

1000cc7c <__mulsi3>:
1000cc7c:	0005883a 	mov	r2,zero
1000cc80:	20000726 	beq	r4,zero,1000cca0 <__mulsi3+0x24>
1000cc84:	20c0004c 	andi	r3,r4,1
1000cc88:	2008d07a 	srli	r4,r4,1
1000cc8c:	18000126 	beq	r3,zero,1000cc94 <__mulsi3+0x18>
1000cc90:	1145883a 	add	r2,r2,r5
1000cc94:	294b883a 	add	r5,r5,r5
1000cc98:	203ffa1e 	bne	r4,zero,1000cc84 <__alt_data_end+0xf800cc84>
1000cc9c:	f800283a 	ret
1000cca0:	f800283a 	ret

1000cca4 <__adddf3>:
1000cca4:	02c00434 	movhi	r11,16
1000cca8:	5affffc4 	addi	r11,r11,-1
1000ccac:	2806d7fa 	srli	r3,r5,31
1000ccb0:	2ad4703a 	and	r10,r5,r11
1000ccb4:	3ad2703a 	and	r9,r7,r11
1000ccb8:	3804d53a 	srli	r2,r7,20
1000ccbc:	3018d77a 	srli	r12,r6,29
1000ccc0:	280ad53a 	srli	r5,r5,20
1000ccc4:	501490fa 	slli	r10,r10,3
1000ccc8:	2010d77a 	srli	r8,r4,29
1000cccc:	481290fa 	slli	r9,r9,3
1000ccd0:	380ed7fa 	srli	r7,r7,31
1000ccd4:	defffb04 	addi	sp,sp,-20
1000ccd8:	dc800215 	stw	r18,8(sp)
1000ccdc:	dc400115 	stw	r17,4(sp)
1000cce0:	dc000015 	stw	r16,0(sp)
1000cce4:	dfc00415 	stw	ra,16(sp)
1000cce8:	dcc00315 	stw	r19,12(sp)
1000ccec:	1c803fcc 	andi	r18,r3,255
1000ccf0:	2c01ffcc 	andi	r16,r5,2047
1000ccf4:	5210b03a 	or	r8,r10,r8
1000ccf8:	202290fa 	slli	r17,r4,3
1000ccfc:	1081ffcc 	andi	r2,r2,2047
1000cd00:	4b12b03a 	or	r9,r9,r12
1000cd04:	300c90fa 	slli	r6,r6,3
1000cd08:	91c07526 	beq	r18,r7,1000cee0 <__adddf3+0x23c>
1000cd0c:	8087c83a 	sub	r3,r16,r2
1000cd10:	00c0ab0e 	bge	zero,r3,1000cfc0 <__adddf3+0x31c>
1000cd14:	10002a1e 	bne	r2,zero,1000cdc0 <__adddf3+0x11c>
1000cd18:	4984b03a 	or	r2,r9,r6
1000cd1c:	1000961e 	bne	r2,zero,1000cf78 <__adddf3+0x2d4>
1000cd20:	888001cc 	andi	r2,r17,7
1000cd24:	10000726 	beq	r2,zero,1000cd44 <__adddf3+0xa0>
1000cd28:	888003cc 	andi	r2,r17,15
1000cd2c:	00c00104 	movi	r3,4
1000cd30:	10c00426 	beq	r2,r3,1000cd44 <__adddf3+0xa0>
1000cd34:	88c7883a 	add	r3,r17,r3
1000cd38:	1c63803a 	cmpltu	r17,r3,r17
1000cd3c:	4451883a 	add	r8,r8,r17
1000cd40:	1823883a 	mov	r17,r3
1000cd44:	4080202c 	andhi	r2,r8,128
1000cd48:	10005926 	beq	r2,zero,1000ceb0 <__adddf3+0x20c>
1000cd4c:	84000044 	addi	r16,r16,1
1000cd50:	0081ffc4 	movi	r2,2047
1000cd54:	8080ba26 	beq	r16,r2,1000d040 <__adddf3+0x39c>
1000cd58:	00bfe034 	movhi	r2,65408
1000cd5c:	10bfffc4 	addi	r2,r2,-1
1000cd60:	4090703a 	and	r8,r8,r2
1000cd64:	4004977a 	slli	r2,r8,29
1000cd68:	4010927a 	slli	r8,r8,9
1000cd6c:	8822d0fa 	srli	r17,r17,3
1000cd70:	8401ffcc 	andi	r16,r16,2047
1000cd74:	4010d33a 	srli	r8,r8,12
1000cd78:	9007883a 	mov	r3,r18
1000cd7c:	1444b03a 	or	r2,r2,r17
1000cd80:	8401ffcc 	andi	r16,r16,2047
1000cd84:	8020953a 	slli	r16,r16,20
1000cd88:	18c03fcc 	andi	r3,r3,255
1000cd8c:	01000434 	movhi	r4,16
1000cd90:	213fffc4 	addi	r4,r4,-1
1000cd94:	180697fa 	slli	r3,r3,31
1000cd98:	4110703a 	and	r8,r8,r4
1000cd9c:	4410b03a 	or	r8,r8,r16
1000cda0:	40c6b03a 	or	r3,r8,r3
1000cda4:	dfc00417 	ldw	ra,16(sp)
1000cda8:	dcc00317 	ldw	r19,12(sp)
1000cdac:	dc800217 	ldw	r18,8(sp)
1000cdb0:	dc400117 	ldw	r17,4(sp)
1000cdb4:	dc000017 	ldw	r16,0(sp)
1000cdb8:	dec00504 	addi	sp,sp,20
1000cdbc:	f800283a 	ret
1000cdc0:	0081ffc4 	movi	r2,2047
1000cdc4:	80bfd626 	beq	r16,r2,1000cd20 <__alt_data_end+0xf800cd20>
1000cdc8:	4a402034 	orhi	r9,r9,128
1000cdcc:	00800e04 	movi	r2,56
1000cdd0:	10c09f16 	blt	r2,r3,1000d050 <__adddf3+0x3ac>
1000cdd4:	008007c4 	movi	r2,31
1000cdd8:	10c0c216 	blt	r2,r3,1000d0e4 <__adddf3+0x440>
1000cddc:	00800804 	movi	r2,32
1000cde0:	10c5c83a 	sub	r2,r2,r3
1000cde4:	488a983a 	sll	r5,r9,r2
1000cde8:	30c8d83a 	srl	r4,r6,r3
1000cdec:	3084983a 	sll	r2,r6,r2
1000cdf0:	48c6d83a 	srl	r3,r9,r3
1000cdf4:	290cb03a 	or	r6,r5,r4
1000cdf8:	1004c03a 	cmpne	r2,r2,zero
1000cdfc:	308cb03a 	or	r6,r6,r2
1000ce00:	898dc83a 	sub	r6,r17,r6
1000ce04:	89a3803a 	cmpltu	r17,r17,r6
1000ce08:	40d1c83a 	sub	r8,r8,r3
1000ce0c:	4451c83a 	sub	r8,r8,r17
1000ce10:	3023883a 	mov	r17,r6
1000ce14:	4080202c 	andhi	r2,r8,128
1000ce18:	10002326 	beq	r2,zero,1000cea8 <__adddf3+0x204>
1000ce1c:	04c02034 	movhi	r19,128
1000ce20:	9cffffc4 	addi	r19,r19,-1
1000ce24:	44e6703a 	and	r19,r8,r19
1000ce28:	98007626 	beq	r19,zero,1000d004 <__adddf3+0x360>
1000ce2c:	9809883a 	mov	r4,r19
1000ce30:	000f4e40 	call	1000f4e4 <__clzsi2>
1000ce34:	10fffe04 	addi	r3,r2,-8
1000ce38:	010007c4 	movi	r4,31
1000ce3c:	20c07716 	blt	r4,r3,1000d01c <__adddf3+0x378>
1000ce40:	00800804 	movi	r2,32
1000ce44:	10c5c83a 	sub	r2,r2,r3
1000ce48:	8884d83a 	srl	r2,r17,r2
1000ce4c:	98d0983a 	sll	r8,r19,r3
1000ce50:	88e2983a 	sll	r17,r17,r3
1000ce54:	1204b03a 	or	r2,r2,r8
1000ce58:	1c007416 	blt	r3,r16,1000d02c <__adddf3+0x388>
1000ce5c:	1c21c83a 	sub	r16,r3,r16
1000ce60:	82000044 	addi	r8,r16,1
1000ce64:	00c007c4 	movi	r3,31
1000ce68:	1a009116 	blt	r3,r8,1000d0b0 <__adddf3+0x40c>
1000ce6c:	00c00804 	movi	r3,32
1000ce70:	1a07c83a 	sub	r3,r3,r8
1000ce74:	8a08d83a 	srl	r4,r17,r8
1000ce78:	88e2983a 	sll	r17,r17,r3
1000ce7c:	10c6983a 	sll	r3,r2,r3
1000ce80:	1210d83a 	srl	r8,r2,r8
1000ce84:	8804c03a 	cmpne	r2,r17,zero
1000ce88:	1906b03a 	or	r3,r3,r4
1000ce8c:	18a2b03a 	or	r17,r3,r2
1000ce90:	0021883a 	mov	r16,zero
1000ce94:	003fa206 	br	1000cd20 <__alt_data_end+0xf800cd20>
1000ce98:	1890b03a 	or	r8,r3,r2
1000ce9c:	40017d26 	beq	r8,zero,1000d494 <__adddf3+0x7f0>
1000cea0:	1011883a 	mov	r8,r2
1000cea4:	1823883a 	mov	r17,r3
1000cea8:	888001cc 	andi	r2,r17,7
1000ceac:	103f9e1e 	bne	r2,zero,1000cd28 <__alt_data_end+0xf800cd28>
1000ceb0:	4004977a 	slli	r2,r8,29
1000ceb4:	8822d0fa 	srli	r17,r17,3
1000ceb8:	4010d0fa 	srli	r8,r8,3
1000cebc:	9007883a 	mov	r3,r18
1000cec0:	1444b03a 	or	r2,r2,r17
1000cec4:	0101ffc4 	movi	r4,2047
1000cec8:	81002426 	beq	r16,r4,1000cf5c <__adddf3+0x2b8>
1000cecc:	8120703a 	and	r16,r16,r4
1000ced0:	01000434 	movhi	r4,16
1000ced4:	213fffc4 	addi	r4,r4,-1
1000ced8:	4110703a 	and	r8,r8,r4
1000cedc:	003fa806 	br	1000cd80 <__alt_data_end+0xf800cd80>
1000cee0:	8089c83a 	sub	r4,r16,r2
1000cee4:	01005e0e 	bge	zero,r4,1000d060 <__adddf3+0x3bc>
1000cee8:	10002b26 	beq	r2,zero,1000cf98 <__adddf3+0x2f4>
1000ceec:	0081ffc4 	movi	r2,2047
1000cef0:	80bf8b26 	beq	r16,r2,1000cd20 <__alt_data_end+0xf800cd20>
1000cef4:	4a402034 	orhi	r9,r9,128
1000cef8:	00800e04 	movi	r2,56
1000cefc:	1100a40e 	bge	r2,r4,1000d190 <__adddf3+0x4ec>
1000cf00:	498cb03a 	or	r6,r9,r6
1000cf04:	300ac03a 	cmpne	r5,r6,zero
1000cf08:	0013883a 	mov	r9,zero
1000cf0c:	2c4b883a 	add	r5,r5,r17
1000cf10:	2c63803a 	cmpltu	r17,r5,r17
1000cf14:	4a11883a 	add	r8,r9,r8
1000cf18:	8a11883a 	add	r8,r17,r8
1000cf1c:	2823883a 	mov	r17,r5
1000cf20:	4080202c 	andhi	r2,r8,128
1000cf24:	103fe026 	beq	r2,zero,1000cea8 <__alt_data_end+0xf800cea8>
1000cf28:	84000044 	addi	r16,r16,1
1000cf2c:	0081ffc4 	movi	r2,2047
1000cf30:	8080d226 	beq	r16,r2,1000d27c <__adddf3+0x5d8>
1000cf34:	00bfe034 	movhi	r2,65408
1000cf38:	10bfffc4 	addi	r2,r2,-1
1000cf3c:	4090703a 	and	r8,r8,r2
1000cf40:	880ad07a 	srli	r5,r17,1
1000cf44:	400897fa 	slli	r4,r8,31
1000cf48:	88c0004c 	andi	r3,r17,1
1000cf4c:	28e2b03a 	or	r17,r5,r3
1000cf50:	4010d07a 	srli	r8,r8,1
1000cf54:	2462b03a 	or	r17,r4,r17
1000cf58:	003f7106 	br	1000cd20 <__alt_data_end+0xf800cd20>
1000cf5c:	4088b03a 	or	r4,r8,r2
1000cf60:	20014526 	beq	r4,zero,1000d478 <__adddf3+0x7d4>
1000cf64:	01000434 	movhi	r4,16
1000cf68:	42000234 	orhi	r8,r8,8
1000cf6c:	213fffc4 	addi	r4,r4,-1
1000cf70:	4110703a 	and	r8,r8,r4
1000cf74:	003f8206 	br	1000cd80 <__alt_data_end+0xf800cd80>
1000cf78:	18ffffc4 	addi	r3,r3,-1
1000cf7c:	1800491e 	bne	r3,zero,1000d0a4 <__adddf3+0x400>
1000cf80:	898bc83a 	sub	r5,r17,r6
1000cf84:	8963803a 	cmpltu	r17,r17,r5
1000cf88:	4251c83a 	sub	r8,r8,r9
1000cf8c:	4451c83a 	sub	r8,r8,r17
1000cf90:	2823883a 	mov	r17,r5
1000cf94:	003f9f06 	br	1000ce14 <__alt_data_end+0xf800ce14>
1000cf98:	4984b03a 	or	r2,r9,r6
1000cf9c:	103f6026 	beq	r2,zero,1000cd20 <__alt_data_end+0xf800cd20>
1000cfa0:	213fffc4 	addi	r4,r4,-1
1000cfa4:	2000931e 	bne	r4,zero,1000d1f4 <__adddf3+0x550>
1000cfa8:	898d883a 	add	r6,r17,r6
1000cfac:	3463803a 	cmpltu	r17,r6,r17
1000cfb0:	4251883a 	add	r8,r8,r9
1000cfb4:	8a11883a 	add	r8,r17,r8
1000cfb8:	3023883a 	mov	r17,r6
1000cfbc:	003fd806 	br	1000cf20 <__alt_data_end+0xf800cf20>
1000cfc0:	1800541e 	bne	r3,zero,1000d114 <__adddf3+0x470>
1000cfc4:	80800044 	addi	r2,r16,1
1000cfc8:	1081ffcc 	andi	r2,r2,2047
1000cfcc:	00c00044 	movi	r3,1
1000cfd0:	1880a00e 	bge	r3,r2,1000d254 <__adddf3+0x5b0>
1000cfd4:	8989c83a 	sub	r4,r17,r6
1000cfd8:	8905803a 	cmpltu	r2,r17,r4
1000cfdc:	4267c83a 	sub	r19,r8,r9
1000cfe0:	98a7c83a 	sub	r19,r19,r2
1000cfe4:	9880202c 	andhi	r2,r19,128
1000cfe8:	10006326 	beq	r2,zero,1000d178 <__adddf3+0x4d4>
1000cfec:	3463c83a 	sub	r17,r6,r17
1000cff0:	4a07c83a 	sub	r3,r9,r8
1000cff4:	344d803a 	cmpltu	r6,r6,r17
1000cff8:	19a7c83a 	sub	r19,r3,r6
1000cffc:	3825883a 	mov	r18,r7
1000d000:	983f8a1e 	bne	r19,zero,1000ce2c <__alt_data_end+0xf800ce2c>
1000d004:	8809883a 	mov	r4,r17
1000d008:	000f4e40 	call	1000f4e4 <__clzsi2>
1000d00c:	10800804 	addi	r2,r2,32
1000d010:	10fffe04 	addi	r3,r2,-8
1000d014:	010007c4 	movi	r4,31
1000d018:	20ff890e 	bge	r4,r3,1000ce40 <__alt_data_end+0xf800ce40>
1000d01c:	10bff604 	addi	r2,r2,-40
1000d020:	8884983a 	sll	r2,r17,r2
1000d024:	0023883a 	mov	r17,zero
1000d028:	1c3f8c0e 	bge	r3,r16,1000ce5c <__alt_data_end+0xf800ce5c>
1000d02c:	023fe034 	movhi	r8,65408
1000d030:	423fffc4 	addi	r8,r8,-1
1000d034:	80e1c83a 	sub	r16,r16,r3
1000d038:	1210703a 	and	r8,r2,r8
1000d03c:	003f3806 	br	1000cd20 <__alt_data_end+0xf800cd20>
1000d040:	9007883a 	mov	r3,r18
1000d044:	0011883a 	mov	r8,zero
1000d048:	0005883a 	mov	r2,zero
1000d04c:	003f4c06 	br	1000cd80 <__alt_data_end+0xf800cd80>
1000d050:	498cb03a 	or	r6,r9,r6
1000d054:	300cc03a 	cmpne	r6,r6,zero
1000d058:	0007883a 	mov	r3,zero
1000d05c:	003f6806 	br	1000ce00 <__alt_data_end+0xf800ce00>
1000d060:	20009c1e 	bne	r4,zero,1000d2d4 <__adddf3+0x630>
1000d064:	80800044 	addi	r2,r16,1
1000d068:	1141ffcc 	andi	r5,r2,2047
1000d06c:	01000044 	movi	r4,1
1000d070:	2140670e 	bge	r4,r5,1000d210 <__adddf3+0x56c>
1000d074:	0101ffc4 	movi	r4,2047
1000d078:	11007f26 	beq	r2,r4,1000d278 <__adddf3+0x5d4>
1000d07c:	898d883a 	add	r6,r17,r6
1000d080:	4247883a 	add	r3,r8,r9
1000d084:	3451803a 	cmpltu	r8,r6,r17
1000d088:	40d1883a 	add	r8,r8,r3
1000d08c:	402297fa 	slli	r17,r8,31
1000d090:	300cd07a 	srli	r6,r6,1
1000d094:	4010d07a 	srli	r8,r8,1
1000d098:	1021883a 	mov	r16,r2
1000d09c:	89a2b03a 	or	r17,r17,r6
1000d0a0:	003f1f06 	br	1000cd20 <__alt_data_end+0xf800cd20>
1000d0a4:	0081ffc4 	movi	r2,2047
1000d0a8:	80bf481e 	bne	r16,r2,1000cdcc <__alt_data_end+0xf800cdcc>
1000d0ac:	003f1c06 	br	1000cd20 <__alt_data_end+0xf800cd20>
1000d0b0:	843ff844 	addi	r16,r16,-31
1000d0b4:	01000804 	movi	r4,32
1000d0b8:	1406d83a 	srl	r3,r2,r16
1000d0bc:	41005026 	beq	r8,r4,1000d200 <__adddf3+0x55c>
1000d0c0:	01001004 	movi	r4,64
1000d0c4:	2211c83a 	sub	r8,r4,r8
1000d0c8:	1204983a 	sll	r2,r2,r8
1000d0cc:	88a2b03a 	or	r17,r17,r2
1000d0d0:	8822c03a 	cmpne	r17,r17,zero
1000d0d4:	1c62b03a 	or	r17,r3,r17
1000d0d8:	0011883a 	mov	r8,zero
1000d0dc:	0021883a 	mov	r16,zero
1000d0e0:	003f7106 	br	1000cea8 <__alt_data_end+0xf800cea8>
1000d0e4:	193ff804 	addi	r4,r3,-32
1000d0e8:	00800804 	movi	r2,32
1000d0ec:	4908d83a 	srl	r4,r9,r4
1000d0f0:	18804526 	beq	r3,r2,1000d208 <__adddf3+0x564>
1000d0f4:	00801004 	movi	r2,64
1000d0f8:	10c5c83a 	sub	r2,r2,r3
1000d0fc:	4886983a 	sll	r3,r9,r2
1000d100:	198cb03a 	or	r6,r3,r6
1000d104:	300cc03a 	cmpne	r6,r6,zero
1000d108:	218cb03a 	or	r6,r4,r6
1000d10c:	0007883a 	mov	r3,zero
1000d110:	003f3b06 	br	1000ce00 <__alt_data_end+0xf800ce00>
1000d114:	80002a26 	beq	r16,zero,1000d1c0 <__adddf3+0x51c>
1000d118:	0101ffc4 	movi	r4,2047
1000d11c:	11006826 	beq	r2,r4,1000d2c0 <__adddf3+0x61c>
1000d120:	00c7c83a 	sub	r3,zero,r3
1000d124:	42002034 	orhi	r8,r8,128
1000d128:	01000e04 	movi	r4,56
1000d12c:	20c07c16 	blt	r4,r3,1000d320 <__adddf3+0x67c>
1000d130:	010007c4 	movi	r4,31
1000d134:	20c0da16 	blt	r4,r3,1000d4a0 <__adddf3+0x7fc>
1000d138:	01000804 	movi	r4,32
1000d13c:	20c9c83a 	sub	r4,r4,r3
1000d140:	4114983a 	sll	r10,r8,r4
1000d144:	88cad83a 	srl	r5,r17,r3
1000d148:	8908983a 	sll	r4,r17,r4
1000d14c:	40c6d83a 	srl	r3,r8,r3
1000d150:	5162b03a 	or	r17,r10,r5
1000d154:	2008c03a 	cmpne	r4,r4,zero
1000d158:	8922b03a 	or	r17,r17,r4
1000d15c:	3463c83a 	sub	r17,r6,r17
1000d160:	48c7c83a 	sub	r3,r9,r3
1000d164:	344d803a 	cmpltu	r6,r6,r17
1000d168:	1991c83a 	sub	r8,r3,r6
1000d16c:	1021883a 	mov	r16,r2
1000d170:	3825883a 	mov	r18,r7
1000d174:	003f2706 	br	1000ce14 <__alt_data_end+0xf800ce14>
1000d178:	24d0b03a 	or	r8,r4,r19
1000d17c:	40001b1e 	bne	r8,zero,1000d1ec <__adddf3+0x548>
1000d180:	0005883a 	mov	r2,zero
1000d184:	0007883a 	mov	r3,zero
1000d188:	0021883a 	mov	r16,zero
1000d18c:	003f4d06 	br	1000cec4 <__alt_data_end+0xf800cec4>
1000d190:	008007c4 	movi	r2,31
1000d194:	11003c16 	blt	r2,r4,1000d288 <__adddf3+0x5e4>
1000d198:	00800804 	movi	r2,32
1000d19c:	1105c83a 	sub	r2,r2,r4
1000d1a0:	488e983a 	sll	r7,r9,r2
1000d1a4:	310ad83a 	srl	r5,r6,r4
1000d1a8:	3084983a 	sll	r2,r6,r2
1000d1ac:	4912d83a 	srl	r9,r9,r4
1000d1b0:	394ab03a 	or	r5,r7,r5
1000d1b4:	1004c03a 	cmpne	r2,r2,zero
1000d1b8:	288ab03a 	or	r5,r5,r2
1000d1bc:	003f5306 	br	1000cf0c <__alt_data_end+0xf800cf0c>
1000d1c0:	4448b03a 	or	r4,r8,r17
1000d1c4:	20003e26 	beq	r4,zero,1000d2c0 <__adddf3+0x61c>
1000d1c8:	00c6303a 	nor	r3,zero,r3
1000d1cc:	18003a1e 	bne	r3,zero,1000d2b8 <__adddf3+0x614>
1000d1d0:	3463c83a 	sub	r17,r6,r17
1000d1d4:	4a07c83a 	sub	r3,r9,r8
1000d1d8:	344d803a 	cmpltu	r6,r6,r17
1000d1dc:	1991c83a 	sub	r8,r3,r6
1000d1e0:	1021883a 	mov	r16,r2
1000d1e4:	3825883a 	mov	r18,r7
1000d1e8:	003f0a06 	br	1000ce14 <__alt_data_end+0xf800ce14>
1000d1ec:	2023883a 	mov	r17,r4
1000d1f0:	003f0d06 	br	1000ce28 <__alt_data_end+0xf800ce28>
1000d1f4:	0081ffc4 	movi	r2,2047
1000d1f8:	80bf3f1e 	bne	r16,r2,1000cef8 <__alt_data_end+0xf800cef8>
1000d1fc:	003ec806 	br	1000cd20 <__alt_data_end+0xf800cd20>
1000d200:	0005883a 	mov	r2,zero
1000d204:	003fb106 	br	1000d0cc <__alt_data_end+0xf800d0cc>
1000d208:	0007883a 	mov	r3,zero
1000d20c:	003fbc06 	br	1000d100 <__alt_data_end+0xf800d100>
1000d210:	4444b03a 	or	r2,r8,r17
1000d214:	8000871e 	bne	r16,zero,1000d434 <__adddf3+0x790>
1000d218:	1000ba26 	beq	r2,zero,1000d504 <__adddf3+0x860>
1000d21c:	4984b03a 	or	r2,r9,r6
1000d220:	103ebf26 	beq	r2,zero,1000cd20 <__alt_data_end+0xf800cd20>
1000d224:	8985883a 	add	r2,r17,r6
1000d228:	4247883a 	add	r3,r8,r9
1000d22c:	1451803a 	cmpltu	r8,r2,r17
1000d230:	40d1883a 	add	r8,r8,r3
1000d234:	40c0202c 	andhi	r3,r8,128
1000d238:	1023883a 	mov	r17,r2
1000d23c:	183f1a26 	beq	r3,zero,1000cea8 <__alt_data_end+0xf800cea8>
1000d240:	00bfe034 	movhi	r2,65408
1000d244:	10bfffc4 	addi	r2,r2,-1
1000d248:	2021883a 	mov	r16,r4
1000d24c:	4090703a 	and	r8,r8,r2
1000d250:	003eb306 	br	1000cd20 <__alt_data_end+0xf800cd20>
1000d254:	4444b03a 	or	r2,r8,r17
1000d258:	8000291e 	bne	r16,zero,1000d300 <__adddf3+0x65c>
1000d25c:	10004b1e 	bne	r2,zero,1000d38c <__adddf3+0x6e8>
1000d260:	4990b03a 	or	r8,r9,r6
1000d264:	40008b26 	beq	r8,zero,1000d494 <__adddf3+0x7f0>
1000d268:	4811883a 	mov	r8,r9
1000d26c:	3023883a 	mov	r17,r6
1000d270:	3825883a 	mov	r18,r7
1000d274:	003eaa06 	br	1000cd20 <__alt_data_end+0xf800cd20>
1000d278:	1021883a 	mov	r16,r2
1000d27c:	0011883a 	mov	r8,zero
1000d280:	0005883a 	mov	r2,zero
1000d284:	003f0f06 	br	1000cec4 <__alt_data_end+0xf800cec4>
1000d288:	217ff804 	addi	r5,r4,-32
1000d28c:	00800804 	movi	r2,32
1000d290:	494ad83a 	srl	r5,r9,r5
1000d294:	20807d26 	beq	r4,r2,1000d48c <__adddf3+0x7e8>
1000d298:	00801004 	movi	r2,64
1000d29c:	1109c83a 	sub	r4,r2,r4
1000d2a0:	4912983a 	sll	r9,r9,r4
1000d2a4:	498cb03a 	or	r6,r9,r6
1000d2a8:	300cc03a 	cmpne	r6,r6,zero
1000d2ac:	298ab03a 	or	r5,r5,r6
1000d2b0:	0013883a 	mov	r9,zero
1000d2b4:	003f1506 	br	1000cf0c <__alt_data_end+0xf800cf0c>
1000d2b8:	0101ffc4 	movi	r4,2047
1000d2bc:	113f9a1e 	bne	r2,r4,1000d128 <__alt_data_end+0xf800d128>
1000d2c0:	4811883a 	mov	r8,r9
1000d2c4:	3023883a 	mov	r17,r6
1000d2c8:	1021883a 	mov	r16,r2
1000d2cc:	3825883a 	mov	r18,r7
1000d2d0:	003e9306 	br	1000cd20 <__alt_data_end+0xf800cd20>
1000d2d4:	8000161e 	bne	r16,zero,1000d330 <__adddf3+0x68c>
1000d2d8:	444ab03a 	or	r5,r8,r17
1000d2dc:	28005126 	beq	r5,zero,1000d424 <__adddf3+0x780>
1000d2e0:	0108303a 	nor	r4,zero,r4
1000d2e4:	20004d1e 	bne	r4,zero,1000d41c <__adddf3+0x778>
1000d2e8:	89a3883a 	add	r17,r17,r6
1000d2ec:	4253883a 	add	r9,r8,r9
1000d2f0:	898d803a 	cmpltu	r6,r17,r6
1000d2f4:	3251883a 	add	r8,r6,r9
1000d2f8:	1021883a 	mov	r16,r2
1000d2fc:	003f0806 	br	1000cf20 <__alt_data_end+0xf800cf20>
1000d300:	1000301e 	bne	r2,zero,1000d3c4 <__adddf3+0x720>
1000d304:	4984b03a 	or	r2,r9,r6
1000d308:	10007126 	beq	r2,zero,1000d4d0 <__adddf3+0x82c>
1000d30c:	4811883a 	mov	r8,r9
1000d310:	3023883a 	mov	r17,r6
1000d314:	3825883a 	mov	r18,r7
1000d318:	0401ffc4 	movi	r16,2047
1000d31c:	003e8006 	br	1000cd20 <__alt_data_end+0xf800cd20>
1000d320:	4462b03a 	or	r17,r8,r17
1000d324:	8822c03a 	cmpne	r17,r17,zero
1000d328:	0007883a 	mov	r3,zero
1000d32c:	003f8b06 	br	1000d15c <__alt_data_end+0xf800d15c>
1000d330:	0141ffc4 	movi	r5,2047
1000d334:	11403b26 	beq	r2,r5,1000d424 <__adddf3+0x780>
1000d338:	0109c83a 	sub	r4,zero,r4
1000d33c:	42002034 	orhi	r8,r8,128
1000d340:	01400e04 	movi	r5,56
1000d344:	29006716 	blt	r5,r4,1000d4e4 <__adddf3+0x840>
1000d348:	014007c4 	movi	r5,31
1000d34c:	29007016 	blt	r5,r4,1000d510 <__adddf3+0x86c>
1000d350:	01400804 	movi	r5,32
1000d354:	290bc83a 	sub	r5,r5,r4
1000d358:	4154983a 	sll	r10,r8,r5
1000d35c:	890ed83a 	srl	r7,r17,r4
1000d360:	894a983a 	sll	r5,r17,r5
1000d364:	4108d83a 	srl	r4,r8,r4
1000d368:	51e2b03a 	or	r17,r10,r7
1000d36c:	280ac03a 	cmpne	r5,r5,zero
1000d370:	8962b03a 	or	r17,r17,r5
1000d374:	89a3883a 	add	r17,r17,r6
1000d378:	2253883a 	add	r9,r4,r9
1000d37c:	898d803a 	cmpltu	r6,r17,r6
1000d380:	3251883a 	add	r8,r6,r9
1000d384:	1021883a 	mov	r16,r2
1000d388:	003ee506 	br	1000cf20 <__alt_data_end+0xf800cf20>
1000d38c:	4984b03a 	or	r2,r9,r6
1000d390:	103e6326 	beq	r2,zero,1000cd20 <__alt_data_end+0xf800cd20>
1000d394:	8987c83a 	sub	r3,r17,r6
1000d398:	88c9803a 	cmpltu	r4,r17,r3
1000d39c:	4245c83a 	sub	r2,r8,r9
1000d3a0:	1105c83a 	sub	r2,r2,r4
1000d3a4:	1100202c 	andhi	r4,r2,128
1000d3a8:	203ebb26 	beq	r4,zero,1000ce98 <__alt_data_end+0xf800ce98>
1000d3ac:	3463c83a 	sub	r17,r6,r17
1000d3b0:	4a07c83a 	sub	r3,r9,r8
1000d3b4:	344d803a 	cmpltu	r6,r6,r17
1000d3b8:	1991c83a 	sub	r8,r3,r6
1000d3bc:	3825883a 	mov	r18,r7
1000d3c0:	003e5706 	br	1000cd20 <__alt_data_end+0xf800cd20>
1000d3c4:	4984b03a 	or	r2,r9,r6
1000d3c8:	10002e26 	beq	r2,zero,1000d484 <__adddf3+0x7e0>
1000d3cc:	4004d0fa 	srli	r2,r8,3
1000d3d0:	8822d0fa 	srli	r17,r17,3
1000d3d4:	4010977a 	slli	r8,r8,29
1000d3d8:	10c0022c 	andhi	r3,r2,8
1000d3dc:	4462b03a 	or	r17,r8,r17
1000d3e0:	18000826 	beq	r3,zero,1000d404 <__adddf3+0x760>
1000d3e4:	4808d0fa 	srli	r4,r9,3
1000d3e8:	20c0022c 	andhi	r3,r4,8
1000d3ec:	1800051e 	bne	r3,zero,1000d404 <__adddf3+0x760>
1000d3f0:	300cd0fa 	srli	r6,r6,3
1000d3f4:	4806977a 	slli	r3,r9,29
1000d3f8:	2005883a 	mov	r2,r4
1000d3fc:	3825883a 	mov	r18,r7
1000d400:	19a2b03a 	or	r17,r3,r6
1000d404:	8810d77a 	srli	r8,r17,29
1000d408:	100490fa 	slli	r2,r2,3
1000d40c:	882290fa 	slli	r17,r17,3
1000d410:	0401ffc4 	movi	r16,2047
1000d414:	4090b03a 	or	r8,r8,r2
1000d418:	003e4106 	br	1000cd20 <__alt_data_end+0xf800cd20>
1000d41c:	0141ffc4 	movi	r5,2047
1000d420:	117fc71e 	bne	r2,r5,1000d340 <__alt_data_end+0xf800d340>
1000d424:	4811883a 	mov	r8,r9
1000d428:	3023883a 	mov	r17,r6
1000d42c:	1021883a 	mov	r16,r2
1000d430:	003e3b06 	br	1000cd20 <__alt_data_end+0xf800cd20>
1000d434:	10002f26 	beq	r2,zero,1000d4f4 <__adddf3+0x850>
1000d438:	4984b03a 	or	r2,r9,r6
1000d43c:	10001126 	beq	r2,zero,1000d484 <__adddf3+0x7e0>
1000d440:	4004d0fa 	srli	r2,r8,3
1000d444:	8822d0fa 	srli	r17,r17,3
1000d448:	4010977a 	slli	r8,r8,29
1000d44c:	10c0022c 	andhi	r3,r2,8
1000d450:	4462b03a 	or	r17,r8,r17
1000d454:	183feb26 	beq	r3,zero,1000d404 <__alt_data_end+0xf800d404>
1000d458:	4808d0fa 	srli	r4,r9,3
1000d45c:	20c0022c 	andhi	r3,r4,8
1000d460:	183fe81e 	bne	r3,zero,1000d404 <__alt_data_end+0xf800d404>
1000d464:	300cd0fa 	srli	r6,r6,3
1000d468:	4806977a 	slli	r3,r9,29
1000d46c:	2005883a 	mov	r2,r4
1000d470:	19a2b03a 	or	r17,r3,r6
1000d474:	003fe306 	br	1000d404 <__alt_data_end+0xf800d404>
1000d478:	0011883a 	mov	r8,zero
1000d47c:	0005883a 	mov	r2,zero
1000d480:	003e3f06 	br	1000cd80 <__alt_data_end+0xf800cd80>
1000d484:	0401ffc4 	movi	r16,2047
1000d488:	003e2506 	br	1000cd20 <__alt_data_end+0xf800cd20>
1000d48c:	0013883a 	mov	r9,zero
1000d490:	003f8406 	br	1000d2a4 <__alt_data_end+0xf800d2a4>
1000d494:	0005883a 	mov	r2,zero
1000d498:	0007883a 	mov	r3,zero
1000d49c:	003e8906 	br	1000cec4 <__alt_data_end+0xf800cec4>
1000d4a0:	197ff804 	addi	r5,r3,-32
1000d4a4:	01000804 	movi	r4,32
1000d4a8:	414ad83a 	srl	r5,r8,r5
1000d4ac:	19002426 	beq	r3,r4,1000d540 <__adddf3+0x89c>
1000d4b0:	01001004 	movi	r4,64
1000d4b4:	20c7c83a 	sub	r3,r4,r3
1000d4b8:	40c6983a 	sll	r3,r8,r3
1000d4bc:	1c46b03a 	or	r3,r3,r17
1000d4c0:	1806c03a 	cmpne	r3,r3,zero
1000d4c4:	28e2b03a 	or	r17,r5,r3
1000d4c8:	0007883a 	mov	r3,zero
1000d4cc:	003f2306 	br	1000d15c <__alt_data_end+0xf800d15c>
1000d4d0:	0007883a 	mov	r3,zero
1000d4d4:	5811883a 	mov	r8,r11
1000d4d8:	00bfffc4 	movi	r2,-1
1000d4dc:	0401ffc4 	movi	r16,2047
1000d4e0:	003e7806 	br	1000cec4 <__alt_data_end+0xf800cec4>
1000d4e4:	4462b03a 	or	r17,r8,r17
1000d4e8:	8822c03a 	cmpne	r17,r17,zero
1000d4ec:	0009883a 	mov	r4,zero
1000d4f0:	003fa006 	br	1000d374 <__alt_data_end+0xf800d374>
1000d4f4:	4811883a 	mov	r8,r9
1000d4f8:	3023883a 	mov	r17,r6
1000d4fc:	0401ffc4 	movi	r16,2047
1000d500:	003e0706 	br	1000cd20 <__alt_data_end+0xf800cd20>
1000d504:	4811883a 	mov	r8,r9
1000d508:	3023883a 	mov	r17,r6
1000d50c:	003e0406 	br	1000cd20 <__alt_data_end+0xf800cd20>
1000d510:	21fff804 	addi	r7,r4,-32
1000d514:	01400804 	movi	r5,32
1000d518:	41ced83a 	srl	r7,r8,r7
1000d51c:	21400a26 	beq	r4,r5,1000d548 <__adddf3+0x8a4>
1000d520:	01401004 	movi	r5,64
1000d524:	2909c83a 	sub	r4,r5,r4
1000d528:	4108983a 	sll	r4,r8,r4
1000d52c:	2448b03a 	or	r4,r4,r17
1000d530:	2008c03a 	cmpne	r4,r4,zero
1000d534:	3922b03a 	or	r17,r7,r4
1000d538:	0009883a 	mov	r4,zero
1000d53c:	003f8d06 	br	1000d374 <__alt_data_end+0xf800d374>
1000d540:	0007883a 	mov	r3,zero
1000d544:	003fdd06 	br	1000d4bc <__alt_data_end+0xf800d4bc>
1000d548:	0009883a 	mov	r4,zero
1000d54c:	003ff706 	br	1000d52c <__alt_data_end+0xf800d52c>

1000d550 <__divdf3>:
1000d550:	defff004 	addi	sp,sp,-64
1000d554:	dc800815 	stw	r18,32(sp)
1000d558:	2824d53a 	srli	r18,r5,20
1000d55c:	dd800c15 	stw	r22,48(sp)
1000d560:	282cd7fa 	srli	r22,r5,31
1000d564:	dc000615 	stw	r16,24(sp)
1000d568:	04000434 	movhi	r16,16
1000d56c:	843fffc4 	addi	r16,r16,-1
1000d570:	dfc00f15 	stw	ra,60(sp)
1000d574:	df000e15 	stw	fp,56(sp)
1000d578:	ddc00d15 	stw	r23,52(sp)
1000d57c:	dd400b15 	stw	r21,44(sp)
1000d580:	dd000a15 	stw	r20,40(sp)
1000d584:	dcc00915 	stw	r19,36(sp)
1000d588:	dc400715 	stw	r17,28(sp)
1000d58c:	9481ffcc 	andi	r18,r18,2047
1000d590:	2c20703a 	and	r16,r5,r16
1000d594:	b2003fcc 	andi	r8,r22,255
1000d598:	90006126 	beq	r18,zero,1000d720 <__divdf3+0x1d0>
1000d59c:	0081ffc4 	movi	r2,2047
1000d5a0:	202b883a 	mov	r21,r4
1000d5a4:	90803726 	beq	r18,r2,1000d684 <__divdf3+0x134>
1000d5a8:	80800434 	orhi	r2,r16,16
1000d5ac:	100490fa 	slli	r2,r2,3
1000d5b0:	2020d77a 	srli	r16,r4,29
1000d5b4:	202a90fa 	slli	r21,r4,3
1000d5b8:	94bf0044 	addi	r18,r18,-1023
1000d5bc:	80a0b03a 	or	r16,r16,r2
1000d5c0:	0013883a 	mov	r9,zero
1000d5c4:	000b883a 	mov	r5,zero
1000d5c8:	3806d53a 	srli	r3,r7,20
1000d5cc:	382ed7fa 	srli	r23,r7,31
1000d5d0:	04400434 	movhi	r17,16
1000d5d4:	8c7fffc4 	addi	r17,r17,-1
1000d5d8:	18c1ffcc 	andi	r3,r3,2047
1000d5dc:	3029883a 	mov	r20,r6
1000d5e0:	3c62703a 	and	r17,r7,r17
1000d5e4:	bf003fcc 	andi	fp,r23,255
1000d5e8:	18006e26 	beq	r3,zero,1000d7a4 <__divdf3+0x254>
1000d5ec:	0081ffc4 	movi	r2,2047
1000d5f0:	18806626 	beq	r3,r2,1000d78c <__divdf3+0x23c>
1000d5f4:	88800434 	orhi	r2,r17,16
1000d5f8:	100490fa 	slli	r2,r2,3
1000d5fc:	3022d77a 	srli	r17,r6,29
1000d600:	302890fa 	slli	r20,r6,3
1000d604:	18ff0044 	addi	r3,r3,-1023
1000d608:	88a2b03a 	or	r17,r17,r2
1000d60c:	000f883a 	mov	r7,zero
1000d610:	b5e6f03a 	xor	r19,r22,r23
1000d614:	3a4cb03a 	or	r6,r7,r9
1000d618:	008003c4 	movi	r2,15
1000d61c:	9809883a 	mov	r4,r19
1000d620:	90c7c83a 	sub	r3,r18,r3
1000d624:	9cc03fcc 	andi	r19,r19,255
1000d628:	11809636 	bltu	r2,r6,1000d884 <__divdf3+0x334>
1000d62c:	300c90ba 	slli	r6,r6,2
1000d630:	00840074 	movhi	r2,4097
1000d634:	10b59104 	addi	r2,r2,-10684
1000d638:	308d883a 	add	r6,r6,r2
1000d63c:	30800017 	ldw	r2,0(r6)
1000d640:	1000683a 	jmp	r2
1000d644:	1000d884 	addi	zero,r2,866
1000d648:	1000d6bc 	xorhi	zero,r2,858
1000d64c:	1000d874 	orhi	zero,r2,865
1000d650:	1000d6b0 	cmpltui	zero,r2,858
1000d654:	1000d874 	orhi	zero,r2,865
1000d658:	1000d848 	cmpgei	zero,r2,865
1000d65c:	1000d874 	orhi	zero,r2,865
1000d660:	1000d6b0 	cmpltui	zero,r2,858
1000d664:	1000d6bc 	xorhi	zero,r2,858
1000d668:	1000d6bc 	xorhi	zero,r2,858
1000d66c:	1000d848 	cmpgei	zero,r2,865
1000d670:	1000d6b0 	cmpltui	zero,r2,858
1000d674:	1000d6a0 	cmpeqi	zero,r2,858
1000d678:	1000d6a0 	cmpeqi	zero,r2,858
1000d67c:	1000d6a0 	cmpeqi	zero,r2,858
1000d680:	1000dc0c 	andi	zero,r2,880
1000d684:	2404b03a 	or	r2,r4,r16
1000d688:	10006c1e 	bne	r2,zero,1000d83c <__divdf3+0x2ec>
1000d68c:	02400204 	movi	r9,8
1000d690:	0021883a 	mov	r16,zero
1000d694:	002b883a 	mov	r21,zero
1000d698:	01400084 	movi	r5,2
1000d69c:	003fca06 	br	1000d5c8 <__alt_data_end+0xf800d5c8>
1000d6a0:	8023883a 	mov	r17,r16
1000d6a4:	a829883a 	mov	r20,r21
1000d6a8:	4039883a 	mov	fp,r8
1000d6ac:	280f883a 	mov	r7,r5
1000d6b0:	00800084 	movi	r2,2
1000d6b4:	3881601e 	bne	r7,r2,1000dc38 <__divdf3+0x6e8>
1000d6b8:	e027883a 	mov	r19,fp
1000d6bc:	9900004c 	andi	r4,r19,1
1000d6c0:	0081ffc4 	movi	r2,2047
1000d6c4:	0021883a 	mov	r16,zero
1000d6c8:	002b883a 	mov	r21,zero
1000d6cc:	1004953a 	slli	r2,r2,20
1000d6d0:	20c03fcc 	andi	r3,r4,255
1000d6d4:	01400434 	movhi	r5,16
1000d6d8:	297fffc4 	addi	r5,r5,-1
1000d6dc:	180697fa 	slli	r3,r3,31
1000d6e0:	8160703a 	and	r16,r16,r5
1000d6e4:	80a0b03a 	or	r16,r16,r2
1000d6e8:	80c6b03a 	or	r3,r16,r3
1000d6ec:	a805883a 	mov	r2,r21
1000d6f0:	dfc00f17 	ldw	ra,60(sp)
1000d6f4:	df000e17 	ldw	fp,56(sp)
1000d6f8:	ddc00d17 	ldw	r23,52(sp)
1000d6fc:	dd800c17 	ldw	r22,48(sp)
1000d700:	dd400b17 	ldw	r21,44(sp)
1000d704:	dd000a17 	ldw	r20,40(sp)
1000d708:	dcc00917 	ldw	r19,36(sp)
1000d70c:	dc800817 	ldw	r18,32(sp)
1000d710:	dc400717 	ldw	r17,28(sp)
1000d714:	dc000617 	ldw	r16,24(sp)
1000d718:	dec01004 	addi	sp,sp,64
1000d71c:	f800283a 	ret
1000d720:	2404b03a 	or	r2,r4,r16
1000d724:	2023883a 	mov	r17,r4
1000d728:	10003f26 	beq	r2,zero,1000d828 <__divdf3+0x2d8>
1000d72c:	80015e26 	beq	r16,zero,1000dca8 <__divdf3+0x758>
1000d730:	8009883a 	mov	r4,r16
1000d734:	d9800215 	stw	r6,8(sp)
1000d738:	d9c00515 	stw	r7,20(sp)
1000d73c:	da000415 	stw	r8,16(sp)
1000d740:	000f4e40 	call	1000f4e4 <__clzsi2>
1000d744:	d9800217 	ldw	r6,8(sp)
1000d748:	d9c00517 	ldw	r7,20(sp)
1000d74c:	da000417 	ldw	r8,16(sp)
1000d750:	113ffd44 	addi	r4,r2,-11
1000d754:	00c00704 	movi	r3,28
1000d758:	19014f16 	blt	r3,r4,1000dc98 <__divdf3+0x748>
1000d75c:	00c00744 	movi	r3,29
1000d760:	157ffe04 	addi	r21,r2,-8
1000d764:	1907c83a 	sub	r3,r3,r4
1000d768:	8560983a 	sll	r16,r16,r21
1000d76c:	88c6d83a 	srl	r3,r17,r3
1000d770:	8d6a983a 	sll	r21,r17,r21
1000d774:	1c20b03a 	or	r16,r3,r16
1000d778:	1080fcc4 	addi	r2,r2,1011
1000d77c:	00a5c83a 	sub	r18,zero,r2
1000d780:	0013883a 	mov	r9,zero
1000d784:	000b883a 	mov	r5,zero
1000d788:	003f8f06 	br	1000d5c8 <__alt_data_end+0xf800d5c8>
1000d78c:	3444b03a 	or	r2,r6,r17
1000d790:	1000231e 	bne	r2,zero,1000d820 <__divdf3+0x2d0>
1000d794:	0023883a 	mov	r17,zero
1000d798:	0029883a 	mov	r20,zero
1000d79c:	01c00084 	movi	r7,2
1000d7a0:	003f9b06 	br	1000d610 <__alt_data_end+0xf800d610>
1000d7a4:	3444b03a 	or	r2,r6,r17
1000d7a8:	10001926 	beq	r2,zero,1000d810 <__divdf3+0x2c0>
1000d7ac:	88014b26 	beq	r17,zero,1000dcdc <__divdf3+0x78c>
1000d7b0:	8809883a 	mov	r4,r17
1000d7b4:	d9400115 	stw	r5,4(sp)
1000d7b8:	d9800215 	stw	r6,8(sp)
1000d7bc:	da000415 	stw	r8,16(sp)
1000d7c0:	da400315 	stw	r9,12(sp)
1000d7c4:	000f4e40 	call	1000f4e4 <__clzsi2>
1000d7c8:	d9400117 	ldw	r5,4(sp)
1000d7cc:	d9800217 	ldw	r6,8(sp)
1000d7d0:	da000417 	ldw	r8,16(sp)
1000d7d4:	da400317 	ldw	r9,12(sp)
1000d7d8:	113ffd44 	addi	r4,r2,-11
1000d7dc:	00c00704 	movi	r3,28
1000d7e0:	19013a16 	blt	r3,r4,1000dccc <__divdf3+0x77c>
1000d7e4:	00c00744 	movi	r3,29
1000d7e8:	153ffe04 	addi	r20,r2,-8
1000d7ec:	1907c83a 	sub	r3,r3,r4
1000d7f0:	8d22983a 	sll	r17,r17,r20
1000d7f4:	30c6d83a 	srl	r3,r6,r3
1000d7f8:	3528983a 	sll	r20,r6,r20
1000d7fc:	1c62b03a 	or	r17,r3,r17
1000d800:	1080fcc4 	addi	r2,r2,1011
1000d804:	0087c83a 	sub	r3,zero,r2
1000d808:	000f883a 	mov	r7,zero
1000d80c:	003f8006 	br	1000d610 <__alt_data_end+0xf800d610>
1000d810:	0023883a 	mov	r17,zero
1000d814:	0029883a 	mov	r20,zero
1000d818:	01c00044 	movi	r7,1
1000d81c:	003f7c06 	br	1000d610 <__alt_data_end+0xf800d610>
1000d820:	01c000c4 	movi	r7,3
1000d824:	003f7a06 	br	1000d610 <__alt_data_end+0xf800d610>
1000d828:	02400104 	movi	r9,4
1000d82c:	0021883a 	mov	r16,zero
1000d830:	002b883a 	mov	r21,zero
1000d834:	01400044 	movi	r5,1
1000d838:	003f6306 	br	1000d5c8 <__alt_data_end+0xf800d5c8>
1000d83c:	02400304 	movi	r9,12
1000d840:	014000c4 	movi	r5,3
1000d844:	003f6006 	br	1000d5c8 <__alt_data_end+0xf800d5c8>
1000d848:	04000434 	movhi	r16,16
1000d84c:	0009883a 	mov	r4,zero
1000d850:	843fffc4 	addi	r16,r16,-1
1000d854:	057fffc4 	movi	r21,-1
1000d858:	0081ffc4 	movi	r2,2047
1000d85c:	003f9b06 	br	1000d6cc <__alt_data_end+0xf800d6cc>
1000d860:	00c00044 	movi	r3,1
1000d864:	1887c83a 	sub	r3,r3,r2
1000d868:	01000e04 	movi	r4,56
1000d86c:	20c1530e 	bge	r4,r3,1000ddbc <__divdf3+0x86c>
1000d870:	9900004c 	andi	r4,r19,1
1000d874:	0005883a 	mov	r2,zero
1000d878:	0021883a 	mov	r16,zero
1000d87c:	002b883a 	mov	r21,zero
1000d880:	003f9206 	br	1000d6cc <__alt_data_end+0xf800d6cc>
1000d884:	8c012e36 	bltu	r17,r16,1000dd40 <__divdf3+0x7f0>
1000d888:	84412c26 	beq	r16,r17,1000dd3c <__divdf3+0x7ec>
1000d88c:	a82f883a 	mov	r23,r21
1000d890:	18ffffc4 	addi	r3,r3,-1
1000d894:	002b883a 	mov	r21,zero
1000d898:	a004d63a 	srli	r2,r20,24
1000d89c:	8822923a 	slli	r17,r17,8
1000d8a0:	a028923a 	slli	r20,r20,8
1000d8a4:	8009883a 	mov	r4,r16
1000d8a8:	88acb03a 	or	r22,r17,r2
1000d8ac:	dd000015 	stw	r20,0(sp)
1000d8b0:	b028d43a 	srli	r20,r22,16
1000d8b4:	d8c00215 	stw	r3,8(sp)
1000d8b8:	b4bfffcc 	andi	r18,r22,65535
1000d8bc:	a00b883a 	mov	r5,r20
1000d8c0:	00024cc0 	call	100024cc <__udivsi3>
1000d8c4:	100b883a 	mov	r5,r2
1000d8c8:	9009883a 	mov	r4,r18
1000d8cc:	1023883a 	mov	r17,r2
1000d8d0:	000cc7c0 	call	1000cc7c <__mulsi3>
1000d8d4:	8009883a 	mov	r4,r16
1000d8d8:	a00b883a 	mov	r5,r20
1000d8dc:	1039883a 	mov	fp,r2
1000d8e0:	00025300 	call	10002530 <__umodsi3>
1000d8e4:	1004943a 	slli	r2,r2,16
1000d8e8:	b808d43a 	srli	r4,r23,16
1000d8ec:	d8c00217 	ldw	r3,8(sp)
1000d8f0:	2084b03a 	or	r2,r4,r2
1000d8f4:	1700062e 	bgeu	r2,fp,1000d910 <__divdf3+0x3c0>
1000d8f8:	1585883a 	add	r2,r2,r22
1000d8fc:	893fffc4 	addi	r4,r17,-1
1000d900:	15811d36 	bltu	r2,r22,1000dd78 <__divdf3+0x828>
1000d904:	17011c2e 	bgeu	r2,fp,1000dd78 <__divdf3+0x828>
1000d908:	8c7fff84 	addi	r17,r17,-2
1000d90c:	1585883a 	add	r2,r2,r22
1000d910:	1739c83a 	sub	fp,r2,fp
1000d914:	a00b883a 	mov	r5,r20
1000d918:	e009883a 	mov	r4,fp
1000d91c:	d8c00215 	stw	r3,8(sp)
1000d920:	00024cc0 	call	100024cc <__udivsi3>
1000d924:	100b883a 	mov	r5,r2
1000d928:	9009883a 	mov	r4,r18
1000d92c:	1021883a 	mov	r16,r2
1000d930:	000cc7c0 	call	1000cc7c <__mulsi3>
1000d934:	a00b883a 	mov	r5,r20
1000d938:	e009883a 	mov	r4,fp
1000d93c:	d8800415 	stw	r2,16(sp)
1000d940:	00025300 	call	10002530 <__umodsi3>
1000d944:	1004943a 	slli	r2,r2,16
1000d948:	da000417 	ldw	r8,16(sp)
1000d94c:	bdffffcc 	andi	r23,r23,65535
1000d950:	b884b03a 	or	r2,r23,r2
1000d954:	d8c00217 	ldw	r3,8(sp)
1000d958:	1200062e 	bgeu	r2,r8,1000d974 <__divdf3+0x424>
1000d95c:	1585883a 	add	r2,r2,r22
1000d960:	813fffc4 	addi	r4,r16,-1
1000d964:	15810236 	bltu	r2,r22,1000dd70 <__divdf3+0x820>
1000d968:	1201012e 	bgeu	r2,r8,1000dd70 <__divdf3+0x820>
1000d96c:	843fff84 	addi	r16,r16,-2
1000d970:	1585883a 	add	r2,r2,r22
1000d974:	8822943a 	slli	r17,r17,16
1000d978:	d9800017 	ldw	r6,0(sp)
1000d97c:	1211c83a 	sub	r8,r2,r8
1000d980:	8c22b03a 	or	r17,r17,r16
1000d984:	373fffcc 	andi	fp,r6,65535
1000d988:	8abfffcc 	andi	r10,r17,65535
1000d98c:	8820d43a 	srli	r16,r17,16
1000d990:	5009883a 	mov	r4,r10
1000d994:	e00b883a 	mov	r5,fp
1000d998:	302ed43a 	srli	r23,r6,16
1000d99c:	d8c00215 	stw	r3,8(sp)
1000d9a0:	da000415 	stw	r8,16(sp)
1000d9a4:	da800115 	stw	r10,4(sp)
1000d9a8:	000cc7c0 	call	1000cc7c <__mulsi3>
1000d9ac:	800b883a 	mov	r5,r16
1000d9b0:	e009883a 	mov	r4,fp
1000d9b4:	d8800515 	stw	r2,20(sp)
1000d9b8:	000cc7c0 	call	1000cc7c <__mulsi3>
1000d9bc:	8009883a 	mov	r4,r16
1000d9c0:	b80b883a 	mov	r5,r23
1000d9c4:	d8800315 	stw	r2,12(sp)
1000d9c8:	000cc7c0 	call	1000cc7c <__mulsi3>
1000d9cc:	da800117 	ldw	r10,4(sp)
1000d9d0:	b80b883a 	mov	r5,r23
1000d9d4:	1021883a 	mov	r16,r2
1000d9d8:	5009883a 	mov	r4,r10
1000d9dc:	000cc7c0 	call	1000cc7c <__mulsi3>
1000d9e0:	d9c00517 	ldw	r7,20(sp)
1000d9e4:	da400317 	ldw	r9,12(sp)
1000d9e8:	d8c00217 	ldw	r3,8(sp)
1000d9ec:	3808d43a 	srli	r4,r7,16
1000d9f0:	1245883a 	add	r2,r2,r9
1000d9f4:	da000417 	ldw	r8,16(sp)
1000d9f8:	2085883a 	add	r2,r4,r2
1000d9fc:	1240022e 	bgeu	r2,r9,1000da08 <__divdf3+0x4b8>
1000da00:	01000074 	movhi	r4,1
1000da04:	8121883a 	add	r16,r16,r4
1000da08:	1008d43a 	srli	r4,r2,16
1000da0c:	1004943a 	slli	r2,r2,16
1000da10:	39ffffcc 	andi	r7,r7,65535
1000da14:	2409883a 	add	r4,r4,r16
1000da18:	11c5883a 	add	r2,r2,r7
1000da1c:	4100bb36 	bltu	r8,r4,1000dd0c <__divdf3+0x7bc>
1000da20:	4100d726 	beq	r8,r4,1000dd80 <__divdf3+0x830>
1000da24:	4109c83a 	sub	r4,r8,r4
1000da28:	a8a1c83a 	sub	r16,r21,r2
1000da2c:	ac2b803a 	cmpltu	r21,r21,r16
1000da30:	256bc83a 	sub	r21,r4,r21
1000da34:	b540d926 	beq	r22,r21,1000dd9c <__divdf3+0x84c>
1000da38:	a00b883a 	mov	r5,r20
1000da3c:	a809883a 	mov	r4,r21
1000da40:	d8c00215 	stw	r3,8(sp)
1000da44:	00024cc0 	call	100024cc <__udivsi3>
1000da48:	100b883a 	mov	r5,r2
1000da4c:	9009883a 	mov	r4,r18
1000da50:	d8800515 	stw	r2,20(sp)
1000da54:	000cc7c0 	call	1000cc7c <__mulsi3>
1000da58:	a809883a 	mov	r4,r21
1000da5c:	a00b883a 	mov	r5,r20
1000da60:	d8800415 	stw	r2,16(sp)
1000da64:	00025300 	call	10002530 <__umodsi3>
1000da68:	1004943a 	slli	r2,r2,16
1000da6c:	8008d43a 	srli	r4,r16,16
1000da70:	da000417 	ldw	r8,16(sp)
1000da74:	d8c00217 	ldw	r3,8(sp)
1000da78:	2084b03a 	or	r2,r4,r2
1000da7c:	d9c00517 	ldw	r7,20(sp)
1000da80:	1200062e 	bgeu	r2,r8,1000da9c <__divdf3+0x54c>
1000da84:	1585883a 	add	r2,r2,r22
1000da88:	393fffc4 	addi	r4,r7,-1
1000da8c:	1580c536 	bltu	r2,r22,1000dda4 <__divdf3+0x854>
1000da90:	1200c42e 	bgeu	r2,r8,1000dda4 <__divdf3+0x854>
1000da94:	39ffff84 	addi	r7,r7,-2
1000da98:	1585883a 	add	r2,r2,r22
1000da9c:	122bc83a 	sub	r21,r2,r8
1000daa0:	a00b883a 	mov	r5,r20
1000daa4:	a809883a 	mov	r4,r21
1000daa8:	d8c00215 	stw	r3,8(sp)
1000daac:	d9c00515 	stw	r7,20(sp)
1000dab0:	00024cc0 	call	100024cc <__udivsi3>
1000dab4:	9009883a 	mov	r4,r18
1000dab8:	100b883a 	mov	r5,r2
1000dabc:	d8800415 	stw	r2,16(sp)
1000dac0:	000cc7c0 	call	1000cc7c <__mulsi3>
1000dac4:	a809883a 	mov	r4,r21
1000dac8:	a00b883a 	mov	r5,r20
1000dacc:	1025883a 	mov	r18,r2
1000dad0:	00025300 	call	10002530 <__umodsi3>
1000dad4:	1004943a 	slli	r2,r2,16
1000dad8:	813fffcc 	andi	r4,r16,65535
1000dadc:	d8c00217 	ldw	r3,8(sp)
1000dae0:	20a0b03a 	or	r16,r4,r2
1000dae4:	d9c00517 	ldw	r7,20(sp)
1000dae8:	da000417 	ldw	r8,16(sp)
1000daec:	8480062e 	bgeu	r16,r18,1000db08 <__divdf3+0x5b8>
1000daf0:	85a1883a 	add	r16,r16,r22
1000daf4:	40bfffc4 	addi	r2,r8,-1
1000daf8:	8580ac36 	bltu	r16,r22,1000ddac <__divdf3+0x85c>
1000dafc:	8480ab2e 	bgeu	r16,r18,1000ddac <__divdf3+0x85c>
1000db00:	423fff84 	addi	r8,r8,-2
1000db04:	85a1883a 	add	r16,r16,r22
1000db08:	3804943a 	slli	r2,r7,16
1000db0c:	84a1c83a 	sub	r16,r16,r18
1000db10:	e009883a 	mov	r4,fp
1000db14:	1228b03a 	or	r20,r2,r8
1000db18:	a1ffffcc 	andi	r7,r20,65535
1000db1c:	a024d43a 	srli	r18,r20,16
1000db20:	380b883a 	mov	r5,r7
1000db24:	d8c00215 	stw	r3,8(sp)
1000db28:	d9c00515 	stw	r7,20(sp)
1000db2c:	000cc7c0 	call	1000cc7c <__mulsi3>
1000db30:	900b883a 	mov	r5,r18
1000db34:	e009883a 	mov	r4,fp
1000db38:	102b883a 	mov	r21,r2
1000db3c:	000cc7c0 	call	1000cc7c <__mulsi3>
1000db40:	900b883a 	mov	r5,r18
1000db44:	b809883a 	mov	r4,r23
1000db48:	1039883a 	mov	fp,r2
1000db4c:	000cc7c0 	call	1000cc7c <__mulsi3>
1000db50:	d9c00517 	ldw	r7,20(sp)
1000db54:	b80b883a 	mov	r5,r23
1000db58:	1025883a 	mov	r18,r2
1000db5c:	3809883a 	mov	r4,r7
1000db60:	000cc7c0 	call	1000cc7c <__mulsi3>
1000db64:	a808d43a 	srli	r4,r21,16
1000db68:	1705883a 	add	r2,r2,fp
1000db6c:	d8c00217 	ldw	r3,8(sp)
1000db70:	2085883a 	add	r2,r4,r2
1000db74:	1700022e 	bgeu	r2,fp,1000db80 <__divdf3+0x630>
1000db78:	01000074 	movhi	r4,1
1000db7c:	9125883a 	add	r18,r18,r4
1000db80:	1008d43a 	srli	r4,r2,16
1000db84:	1004943a 	slli	r2,r2,16
1000db88:	ad7fffcc 	andi	r21,r21,65535
1000db8c:	2489883a 	add	r4,r4,r18
1000db90:	1545883a 	add	r2,r2,r21
1000db94:	81003836 	bltu	r16,r4,1000dc78 <__divdf3+0x728>
1000db98:	81003626 	beq	r16,r4,1000dc74 <__divdf3+0x724>
1000db9c:	a5000054 	ori	r20,r20,1
1000dba0:	1880ffc4 	addi	r2,r3,1023
1000dba4:	00bf2e0e 	bge	zero,r2,1000d860 <__alt_data_end+0xf800d860>
1000dba8:	a10001cc 	andi	r4,r20,7
1000dbac:	20000726 	beq	r4,zero,1000dbcc <__divdf3+0x67c>
1000dbb0:	a10003cc 	andi	r4,r20,15
1000dbb4:	01400104 	movi	r5,4
1000dbb8:	21400426 	beq	r4,r5,1000dbcc <__divdf3+0x67c>
1000dbbc:	a149883a 	add	r4,r20,r5
1000dbc0:	2529803a 	cmpltu	r20,r4,r20
1000dbc4:	8d23883a 	add	r17,r17,r20
1000dbc8:	2029883a 	mov	r20,r4
1000dbcc:	8900402c 	andhi	r4,r17,256
1000dbd0:	20000426 	beq	r4,zero,1000dbe4 <__divdf3+0x694>
1000dbd4:	18810004 	addi	r2,r3,1024
1000dbd8:	00ffc034 	movhi	r3,65280
1000dbdc:	18ffffc4 	addi	r3,r3,-1
1000dbe0:	88e2703a 	and	r17,r17,r3
1000dbe4:	00c1ff84 	movi	r3,2046
1000dbe8:	18beb416 	blt	r3,r2,1000d6bc <__alt_data_end+0xf800d6bc>
1000dbec:	a028d0fa 	srli	r20,r20,3
1000dbf0:	882a977a 	slli	r21,r17,29
1000dbf4:	8820927a 	slli	r16,r17,9
1000dbf8:	1081ffcc 	andi	r2,r2,2047
1000dbfc:	ad2ab03a 	or	r21,r21,r20
1000dc00:	8020d33a 	srli	r16,r16,12
1000dc04:	9900004c 	andi	r4,r19,1
1000dc08:	003eb006 	br	1000d6cc <__alt_data_end+0xf800d6cc>
1000dc0c:	8080022c 	andhi	r2,r16,8
1000dc10:	10001226 	beq	r2,zero,1000dc5c <__divdf3+0x70c>
1000dc14:	8880022c 	andhi	r2,r17,8
1000dc18:	1000101e 	bne	r2,zero,1000dc5c <__divdf3+0x70c>
1000dc1c:	00800434 	movhi	r2,16
1000dc20:	8c000234 	orhi	r16,r17,8
1000dc24:	10bfffc4 	addi	r2,r2,-1
1000dc28:	b809883a 	mov	r4,r23
1000dc2c:	80a0703a 	and	r16,r16,r2
1000dc30:	a02b883a 	mov	r21,r20
1000dc34:	003f0806 	br	1000d858 <__alt_data_end+0xf800d858>
1000dc38:	008000c4 	movi	r2,3
1000dc3c:	3880b126 	beq	r7,r2,1000df04 <__divdf3+0x9b4>
1000dc40:	00800044 	movi	r2,1
1000dc44:	38805b1e 	bne	r7,r2,1000ddb4 <__divdf3+0x864>
1000dc48:	e009883a 	mov	r4,fp
1000dc4c:	0005883a 	mov	r2,zero
1000dc50:	0021883a 	mov	r16,zero
1000dc54:	002b883a 	mov	r21,zero
1000dc58:	003e9c06 	br	1000d6cc <__alt_data_end+0xf800d6cc>
1000dc5c:	00800434 	movhi	r2,16
1000dc60:	84000234 	orhi	r16,r16,8
1000dc64:	10bfffc4 	addi	r2,r2,-1
1000dc68:	b009883a 	mov	r4,r22
1000dc6c:	80a0703a 	and	r16,r16,r2
1000dc70:	003ef906 	br	1000d858 <__alt_data_end+0xf800d858>
1000dc74:	103fca26 	beq	r2,zero,1000dba0 <__alt_data_end+0xf800dba0>
1000dc78:	b421883a 	add	r16,r22,r16
1000dc7c:	a17fffc4 	addi	r5,r20,-1
1000dc80:	8580422e 	bgeu	r16,r22,1000dd8c <__divdf3+0x83c>
1000dc84:	2829883a 	mov	r20,r5
1000dc88:	813fc41e 	bne	r16,r4,1000db9c <__alt_data_end+0xf800db9c>
1000dc8c:	d9800017 	ldw	r6,0(sp)
1000dc90:	30bfc21e 	bne	r6,r2,1000db9c <__alt_data_end+0xf800db9c>
1000dc94:	003fc206 	br	1000dba0 <__alt_data_end+0xf800dba0>
1000dc98:	143ff604 	addi	r16,r2,-40
1000dc9c:	8c20983a 	sll	r16,r17,r16
1000dca0:	002b883a 	mov	r21,zero
1000dca4:	003eb406 	br	1000d778 <__alt_data_end+0xf800d778>
1000dca8:	d9800215 	stw	r6,8(sp)
1000dcac:	d9c00515 	stw	r7,20(sp)
1000dcb0:	da000415 	stw	r8,16(sp)
1000dcb4:	000f4e40 	call	1000f4e4 <__clzsi2>
1000dcb8:	10800804 	addi	r2,r2,32
1000dcbc:	da000417 	ldw	r8,16(sp)
1000dcc0:	d9c00517 	ldw	r7,20(sp)
1000dcc4:	d9800217 	ldw	r6,8(sp)
1000dcc8:	003ea106 	br	1000d750 <__alt_data_end+0xf800d750>
1000dccc:	147ff604 	addi	r17,r2,-40
1000dcd0:	3462983a 	sll	r17,r6,r17
1000dcd4:	0029883a 	mov	r20,zero
1000dcd8:	003ec906 	br	1000d800 <__alt_data_end+0xf800d800>
1000dcdc:	3009883a 	mov	r4,r6
1000dce0:	d9400115 	stw	r5,4(sp)
1000dce4:	d9800215 	stw	r6,8(sp)
1000dce8:	da000415 	stw	r8,16(sp)
1000dcec:	da400315 	stw	r9,12(sp)
1000dcf0:	000f4e40 	call	1000f4e4 <__clzsi2>
1000dcf4:	10800804 	addi	r2,r2,32
1000dcf8:	da400317 	ldw	r9,12(sp)
1000dcfc:	da000417 	ldw	r8,16(sp)
1000dd00:	d9800217 	ldw	r6,8(sp)
1000dd04:	d9400117 	ldw	r5,4(sp)
1000dd08:	003eb306 	br	1000d7d8 <__alt_data_end+0xf800d7d8>
1000dd0c:	d9800017 	ldw	r6,0(sp)
1000dd10:	a9ab883a 	add	r21,r21,r6
1000dd14:	a98b803a 	cmpltu	r5,r21,r6
1000dd18:	2d8b883a 	add	r5,r5,r22
1000dd1c:	2a11883a 	add	r8,r5,r8
1000dd20:	897fffc4 	addi	r5,r17,-1
1000dd24:	b2000c2e 	bgeu	r22,r8,1000dd58 <__divdf3+0x808>
1000dd28:	41003f36 	bltu	r8,r4,1000de28 <__divdf3+0x8d8>
1000dd2c:	22006c26 	beq	r4,r8,1000dee0 <__divdf3+0x990>
1000dd30:	4109c83a 	sub	r4,r8,r4
1000dd34:	2823883a 	mov	r17,r5
1000dd38:	003f3b06 	br	1000da28 <__alt_data_end+0xf800da28>
1000dd3c:	ad3ed336 	bltu	r21,r20,1000d88c <__alt_data_end+0xf800d88c>
1000dd40:	a804d07a 	srli	r2,r21,1
1000dd44:	802e97fa 	slli	r23,r16,31
1000dd48:	a82a97fa 	slli	r21,r21,31
1000dd4c:	8020d07a 	srli	r16,r16,1
1000dd50:	b8aeb03a 	or	r23,r23,r2
1000dd54:	003ed006 	br	1000d898 <__alt_data_end+0xf800d898>
1000dd58:	b23ff51e 	bne	r22,r8,1000dd30 <__alt_data_end+0xf800dd30>
1000dd5c:	d9800017 	ldw	r6,0(sp)
1000dd60:	a9bff12e 	bgeu	r21,r6,1000dd28 <__alt_data_end+0xf800dd28>
1000dd64:	b109c83a 	sub	r4,r22,r4
1000dd68:	2823883a 	mov	r17,r5
1000dd6c:	003f2e06 	br	1000da28 <__alt_data_end+0xf800da28>
1000dd70:	2021883a 	mov	r16,r4
1000dd74:	003eff06 	br	1000d974 <__alt_data_end+0xf800d974>
1000dd78:	2023883a 	mov	r17,r4
1000dd7c:	003ee406 	br	1000d910 <__alt_data_end+0xf800d910>
1000dd80:	a8bfe236 	bltu	r21,r2,1000dd0c <__alt_data_end+0xf800dd0c>
1000dd84:	0009883a 	mov	r4,zero
1000dd88:	003f2706 	br	1000da28 <__alt_data_end+0xf800da28>
1000dd8c:	81002d36 	bltu	r16,r4,1000de44 <__divdf3+0x8f4>
1000dd90:	24005626 	beq	r4,r16,1000deec <__divdf3+0x99c>
1000dd94:	2829883a 	mov	r20,r5
1000dd98:	003f8006 	br	1000db9c <__alt_data_end+0xf800db9c>
1000dd9c:	053fffc4 	movi	r20,-1
1000dda0:	003f7f06 	br	1000dba0 <__alt_data_end+0xf800dba0>
1000dda4:	200f883a 	mov	r7,r4
1000dda8:	003f3c06 	br	1000da9c <__alt_data_end+0xf800da9c>
1000ddac:	1011883a 	mov	r8,r2
1000ddb0:	003f5506 	br	1000db08 <__alt_data_end+0xf800db08>
1000ddb4:	e027883a 	mov	r19,fp
1000ddb8:	003f7906 	br	1000dba0 <__alt_data_end+0xf800dba0>
1000ddbc:	010007c4 	movi	r4,31
1000ddc0:	20c02816 	blt	r4,r3,1000de64 <__divdf3+0x914>
1000ddc4:	00800804 	movi	r2,32
1000ddc8:	10c5c83a 	sub	r2,r2,r3
1000ddcc:	888a983a 	sll	r5,r17,r2
1000ddd0:	a0c8d83a 	srl	r4,r20,r3
1000ddd4:	a084983a 	sll	r2,r20,r2
1000ddd8:	88e2d83a 	srl	r17,r17,r3
1000dddc:	2906b03a 	or	r3,r5,r4
1000dde0:	1004c03a 	cmpne	r2,r2,zero
1000dde4:	1886b03a 	or	r3,r3,r2
1000dde8:	188001cc 	andi	r2,r3,7
1000ddec:	10000726 	beq	r2,zero,1000de0c <__divdf3+0x8bc>
1000ddf0:	188003cc 	andi	r2,r3,15
1000ddf4:	01000104 	movi	r4,4
1000ddf8:	11000426 	beq	r2,r4,1000de0c <__divdf3+0x8bc>
1000ddfc:	1805883a 	mov	r2,r3
1000de00:	10c00104 	addi	r3,r2,4
1000de04:	1885803a 	cmpltu	r2,r3,r2
1000de08:	88a3883a 	add	r17,r17,r2
1000de0c:	8880202c 	andhi	r2,r17,128
1000de10:	10002926 	beq	r2,zero,1000deb8 <__divdf3+0x968>
1000de14:	9900004c 	andi	r4,r19,1
1000de18:	00800044 	movi	r2,1
1000de1c:	0021883a 	mov	r16,zero
1000de20:	002b883a 	mov	r21,zero
1000de24:	003e2906 	br	1000d6cc <__alt_data_end+0xf800d6cc>
1000de28:	d9800017 	ldw	r6,0(sp)
1000de2c:	8c7fff84 	addi	r17,r17,-2
1000de30:	a9ab883a 	add	r21,r21,r6
1000de34:	a98b803a 	cmpltu	r5,r21,r6
1000de38:	2d8b883a 	add	r5,r5,r22
1000de3c:	2a11883a 	add	r8,r5,r8
1000de40:	003ef806 	br	1000da24 <__alt_data_end+0xf800da24>
1000de44:	d9800017 	ldw	r6,0(sp)
1000de48:	318f883a 	add	r7,r6,r6
1000de4c:	398b803a 	cmpltu	r5,r7,r6
1000de50:	2d8d883a 	add	r6,r5,r22
1000de54:	81a1883a 	add	r16,r16,r6
1000de58:	a17fff84 	addi	r5,r20,-2
1000de5c:	d9c00015 	stw	r7,0(sp)
1000de60:	003f8806 	br	1000dc84 <__alt_data_end+0xf800dc84>
1000de64:	013ff844 	movi	r4,-31
1000de68:	2085c83a 	sub	r2,r4,r2
1000de6c:	8888d83a 	srl	r4,r17,r2
1000de70:	00800804 	movi	r2,32
1000de74:	18802126 	beq	r3,r2,1000defc <__divdf3+0x9ac>
1000de78:	04001004 	movi	r16,64
1000de7c:	80c7c83a 	sub	r3,r16,r3
1000de80:	88e0983a 	sll	r16,r17,r3
1000de84:	8504b03a 	or	r2,r16,r20
1000de88:	1004c03a 	cmpne	r2,r2,zero
1000de8c:	2084b03a 	or	r2,r4,r2
1000de90:	144001cc 	andi	r17,r2,7
1000de94:	88000d1e 	bne	r17,zero,1000decc <__divdf3+0x97c>
1000de98:	0021883a 	mov	r16,zero
1000de9c:	102ad0fa 	srli	r21,r2,3
1000dea0:	9900004c 	andi	r4,r19,1
1000dea4:	0005883a 	mov	r2,zero
1000dea8:	ac6ab03a 	or	r21,r21,r17
1000deac:	003e0706 	br	1000d6cc <__alt_data_end+0xf800d6cc>
1000deb0:	1007883a 	mov	r3,r2
1000deb4:	0023883a 	mov	r17,zero
1000deb8:	8820927a 	slli	r16,r17,9
1000debc:	1805883a 	mov	r2,r3
1000dec0:	8822977a 	slli	r17,r17,29
1000dec4:	8020d33a 	srli	r16,r16,12
1000dec8:	003ff406 	br	1000de9c <__alt_data_end+0xf800de9c>
1000decc:	10c003cc 	andi	r3,r2,15
1000ded0:	01000104 	movi	r4,4
1000ded4:	193ff626 	beq	r3,r4,1000deb0 <__alt_data_end+0xf800deb0>
1000ded8:	0023883a 	mov	r17,zero
1000dedc:	003fc806 	br	1000de00 <__alt_data_end+0xf800de00>
1000dee0:	a8bfd136 	bltu	r21,r2,1000de28 <__alt_data_end+0xf800de28>
1000dee4:	2823883a 	mov	r17,r5
1000dee8:	003fa606 	br	1000dd84 <__alt_data_end+0xf800dd84>
1000deec:	d9800017 	ldw	r6,0(sp)
1000def0:	30bfd436 	bltu	r6,r2,1000de44 <__alt_data_end+0xf800de44>
1000def4:	2829883a 	mov	r20,r5
1000def8:	003f6406 	br	1000dc8c <__alt_data_end+0xf800dc8c>
1000defc:	0021883a 	mov	r16,zero
1000df00:	003fe006 	br	1000de84 <__alt_data_end+0xf800de84>
1000df04:	00800434 	movhi	r2,16
1000df08:	8c000234 	orhi	r16,r17,8
1000df0c:	10bfffc4 	addi	r2,r2,-1
1000df10:	e009883a 	mov	r4,fp
1000df14:	80a0703a 	and	r16,r16,r2
1000df18:	a02b883a 	mov	r21,r20
1000df1c:	003e4e06 	br	1000d858 <__alt_data_end+0xf800d858>

1000df20 <__eqdf2>:
1000df20:	2804d53a 	srli	r2,r5,20
1000df24:	3806d53a 	srli	r3,r7,20
1000df28:	02000434 	movhi	r8,16
1000df2c:	423fffc4 	addi	r8,r8,-1
1000df30:	1081ffcc 	andi	r2,r2,2047
1000df34:	0281ffc4 	movi	r10,2047
1000df38:	2a12703a 	and	r9,r5,r8
1000df3c:	18c1ffcc 	andi	r3,r3,2047
1000df40:	3a10703a 	and	r8,r7,r8
1000df44:	280ad7fa 	srli	r5,r5,31
1000df48:	380ed7fa 	srli	r7,r7,31
1000df4c:	12801026 	beq	r2,r10,1000df90 <__eqdf2+0x70>
1000df50:	0281ffc4 	movi	r10,2047
1000df54:	1a800a26 	beq	r3,r10,1000df80 <__eqdf2+0x60>
1000df58:	10c00226 	beq	r2,r3,1000df64 <__eqdf2+0x44>
1000df5c:	00800044 	movi	r2,1
1000df60:	f800283a 	ret
1000df64:	4a3ffd1e 	bne	r9,r8,1000df5c <__alt_data_end+0xf800df5c>
1000df68:	21bffc1e 	bne	r4,r6,1000df5c <__alt_data_end+0xf800df5c>
1000df6c:	29c00c26 	beq	r5,r7,1000dfa0 <__eqdf2+0x80>
1000df70:	103ffa1e 	bne	r2,zero,1000df5c <__alt_data_end+0xf800df5c>
1000df74:	2244b03a 	or	r2,r4,r9
1000df78:	1004c03a 	cmpne	r2,r2,zero
1000df7c:	f800283a 	ret
1000df80:	3214b03a 	or	r10,r6,r8
1000df84:	503ff426 	beq	r10,zero,1000df58 <__alt_data_end+0xf800df58>
1000df88:	00800044 	movi	r2,1
1000df8c:	f800283a 	ret
1000df90:	2254b03a 	or	r10,r4,r9
1000df94:	503fee26 	beq	r10,zero,1000df50 <__alt_data_end+0xf800df50>
1000df98:	00800044 	movi	r2,1
1000df9c:	f800283a 	ret
1000dfa0:	0005883a 	mov	r2,zero
1000dfa4:	f800283a 	ret

1000dfa8 <__gedf2>:
1000dfa8:	2804d53a 	srli	r2,r5,20
1000dfac:	3806d53a 	srli	r3,r7,20
1000dfb0:	02000434 	movhi	r8,16
1000dfb4:	423fffc4 	addi	r8,r8,-1
1000dfb8:	1081ffcc 	andi	r2,r2,2047
1000dfbc:	0241ffc4 	movi	r9,2047
1000dfc0:	2a14703a 	and	r10,r5,r8
1000dfc4:	18c1ffcc 	andi	r3,r3,2047
1000dfc8:	3a10703a 	and	r8,r7,r8
1000dfcc:	280ad7fa 	srli	r5,r5,31
1000dfd0:	380ed7fa 	srli	r7,r7,31
1000dfd4:	12401d26 	beq	r2,r9,1000e04c <__gedf2+0xa4>
1000dfd8:	0241ffc4 	movi	r9,2047
1000dfdc:	1a401226 	beq	r3,r9,1000e028 <__gedf2+0x80>
1000dfe0:	1000081e 	bne	r2,zero,1000e004 <__gedf2+0x5c>
1000dfe4:	2296b03a 	or	r11,r4,r10
1000dfe8:	5813003a 	cmpeq	r9,r11,zero
1000dfec:	1800091e 	bne	r3,zero,1000e014 <__gedf2+0x6c>
1000dff0:	3218b03a 	or	r12,r6,r8
1000dff4:	6000071e 	bne	r12,zero,1000e014 <__gedf2+0x6c>
1000dff8:	0005883a 	mov	r2,zero
1000dffc:	5800101e 	bne	r11,zero,1000e040 <__gedf2+0x98>
1000e000:	f800283a 	ret
1000e004:	18000c1e 	bne	r3,zero,1000e038 <__gedf2+0x90>
1000e008:	3212b03a 	or	r9,r6,r8
1000e00c:	48000c26 	beq	r9,zero,1000e040 <__gedf2+0x98>
1000e010:	0013883a 	mov	r9,zero
1000e014:	39c03fcc 	andi	r7,r7,255
1000e018:	48000826 	beq	r9,zero,1000e03c <__gedf2+0x94>
1000e01c:	38000926 	beq	r7,zero,1000e044 <__gedf2+0x9c>
1000e020:	00800044 	movi	r2,1
1000e024:	f800283a 	ret
1000e028:	3212b03a 	or	r9,r6,r8
1000e02c:	483fec26 	beq	r9,zero,1000dfe0 <__alt_data_end+0xf800dfe0>
1000e030:	00bfff84 	movi	r2,-2
1000e034:	f800283a 	ret
1000e038:	39c03fcc 	andi	r7,r7,255
1000e03c:	29c00626 	beq	r5,r7,1000e058 <__gedf2+0xb0>
1000e040:	283ff726 	beq	r5,zero,1000e020 <__alt_data_end+0xf800e020>
1000e044:	00bfffc4 	movi	r2,-1
1000e048:	f800283a 	ret
1000e04c:	2292b03a 	or	r9,r4,r10
1000e050:	483fe126 	beq	r9,zero,1000dfd8 <__alt_data_end+0xf800dfd8>
1000e054:	003ff606 	br	1000e030 <__alt_data_end+0xf800e030>
1000e058:	18bff916 	blt	r3,r2,1000e040 <__alt_data_end+0xf800e040>
1000e05c:	10c00316 	blt	r2,r3,1000e06c <__gedf2+0xc4>
1000e060:	42bff736 	bltu	r8,r10,1000e040 <__alt_data_end+0xf800e040>
1000e064:	52000326 	beq	r10,r8,1000e074 <__gedf2+0xcc>
1000e068:	5200042e 	bgeu	r10,r8,1000e07c <__gedf2+0xd4>
1000e06c:	283fec1e 	bne	r5,zero,1000e020 <__alt_data_end+0xf800e020>
1000e070:	003ff406 	br	1000e044 <__alt_data_end+0xf800e044>
1000e074:	313ff236 	bltu	r6,r4,1000e040 <__alt_data_end+0xf800e040>
1000e078:	21bffc36 	bltu	r4,r6,1000e06c <__alt_data_end+0xf800e06c>
1000e07c:	0005883a 	mov	r2,zero
1000e080:	f800283a 	ret

1000e084 <__ledf2>:
1000e084:	2804d53a 	srli	r2,r5,20
1000e088:	3810d53a 	srli	r8,r7,20
1000e08c:	00c00434 	movhi	r3,16
1000e090:	18ffffc4 	addi	r3,r3,-1
1000e094:	1081ffcc 	andi	r2,r2,2047
1000e098:	0241ffc4 	movi	r9,2047
1000e09c:	28d4703a 	and	r10,r5,r3
1000e0a0:	4201ffcc 	andi	r8,r8,2047
1000e0a4:	38c6703a 	and	r3,r7,r3
1000e0a8:	280ad7fa 	srli	r5,r5,31
1000e0ac:	380ed7fa 	srli	r7,r7,31
1000e0b0:	12401f26 	beq	r2,r9,1000e130 <__ledf2+0xac>
1000e0b4:	0241ffc4 	movi	r9,2047
1000e0b8:	42401426 	beq	r8,r9,1000e10c <__ledf2+0x88>
1000e0bc:	1000091e 	bne	r2,zero,1000e0e4 <__ledf2+0x60>
1000e0c0:	2296b03a 	or	r11,r4,r10
1000e0c4:	5813003a 	cmpeq	r9,r11,zero
1000e0c8:	29403fcc 	andi	r5,r5,255
1000e0cc:	40000a1e 	bne	r8,zero,1000e0f8 <__ledf2+0x74>
1000e0d0:	30d8b03a 	or	r12,r6,r3
1000e0d4:	6000081e 	bne	r12,zero,1000e0f8 <__ledf2+0x74>
1000e0d8:	0005883a 	mov	r2,zero
1000e0dc:	5800111e 	bne	r11,zero,1000e124 <__ledf2+0xa0>
1000e0e0:	f800283a 	ret
1000e0e4:	29403fcc 	andi	r5,r5,255
1000e0e8:	40000c1e 	bne	r8,zero,1000e11c <__ledf2+0x98>
1000e0ec:	30d2b03a 	or	r9,r6,r3
1000e0f0:	48000c26 	beq	r9,zero,1000e124 <__ledf2+0xa0>
1000e0f4:	0013883a 	mov	r9,zero
1000e0f8:	39c03fcc 	andi	r7,r7,255
1000e0fc:	48000826 	beq	r9,zero,1000e120 <__ledf2+0x9c>
1000e100:	38001126 	beq	r7,zero,1000e148 <__ledf2+0xc4>
1000e104:	00800044 	movi	r2,1
1000e108:	f800283a 	ret
1000e10c:	30d2b03a 	or	r9,r6,r3
1000e110:	483fea26 	beq	r9,zero,1000e0bc <__alt_data_end+0xf800e0bc>
1000e114:	00800084 	movi	r2,2
1000e118:	f800283a 	ret
1000e11c:	39c03fcc 	andi	r7,r7,255
1000e120:	39400726 	beq	r7,r5,1000e140 <__ledf2+0xbc>
1000e124:	2800081e 	bne	r5,zero,1000e148 <__ledf2+0xc4>
1000e128:	00800044 	movi	r2,1
1000e12c:	f800283a 	ret
1000e130:	2292b03a 	or	r9,r4,r10
1000e134:	483fdf26 	beq	r9,zero,1000e0b4 <__alt_data_end+0xf800e0b4>
1000e138:	00800084 	movi	r2,2
1000e13c:	f800283a 	ret
1000e140:	4080030e 	bge	r8,r2,1000e150 <__ledf2+0xcc>
1000e144:	383fef26 	beq	r7,zero,1000e104 <__alt_data_end+0xf800e104>
1000e148:	00bfffc4 	movi	r2,-1
1000e14c:	f800283a 	ret
1000e150:	123feb16 	blt	r2,r8,1000e100 <__alt_data_end+0xf800e100>
1000e154:	1abff336 	bltu	r3,r10,1000e124 <__alt_data_end+0xf800e124>
1000e158:	50c00326 	beq	r10,r3,1000e168 <__ledf2+0xe4>
1000e15c:	50c0042e 	bgeu	r10,r3,1000e170 <__ledf2+0xec>
1000e160:	283fe81e 	bne	r5,zero,1000e104 <__alt_data_end+0xf800e104>
1000e164:	003ff806 	br	1000e148 <__alt_data_end+0xf800e148>
1000e168:	313fee36 	bltu	r6,r4,1000e124 <__alt_data_end+0xf800e124>
1000e16c:	21bffc36 	bltu	r4,r6,1000e160 <__alt_data_end+0xf800e160>
1000e170:	0005883a 	mov	r2,zero
1000e174:	f800283a 	ret

1000e178 <__muldf3>:
1000e178:	deffee04 	addi	sp,sp,-72
1000e17c:	dd000c15 	stw	r20,48(sp)
1000e180:	2828d53a 	srli	r20,r5,20
1000e184:	ddc00f15 	stw	r23,60(sp)
1000e188:	282ed7fa 	srli	r23,r5,31
1000e18c:	dc000815 	stw	r16,32(sp)
1000e190:	04000434 	movhi	r16,16
1000e194:	dcc00b15 	stw	r19,44(sp)
1000e198:	843fffc4 	addi	r16,r16,-1
1000e19c:	dfc01115 	stw	ra,68(sp)
1000e1a0:	df001015 	stw	fp,64(sp)
1000e1a4:	dd800e15 	stw	r22,56(sp)
1000e1a8:	dd400d15 	stw	r21,52(sp)
1000e1ac:	dc800a15 	stw	r18,40(sp)
1000e1b0:	dc400915 	stw	r17,36(sp)
1000e1b4:	a501ffcc 	andi	r20,r20,2047
1000e1b8:	2c20703a 	and	r16,r5,r16
1000e1bc:	b827883a 	mov	r19,r23
1000e1c0:	ba403fcc 	andi	r9,r23,255
1000e1c4:	a0006026 	beq	r20,zero,1000e348 <__muldf3+0x1d0>
1000e1c8:	0081ffc4 	movi	r2,2047
1000e1cc:	202d883a 	mov	r22,r4
1000e1d0:	a0803626 	beq	r20,r2,1000e2ac <__muldf3+0x134>
1000e1d4:	84000434 	orhi	r16,r16,16
1000e1d8:	200ad77a 	srli	r5,r4,29
1000e1dc:	800490fa 	slli	r2,r16,3
1000e1e0:	202c90fa 	slli	r22,r4,3
1000e1e4:	a53f0044 	addi	r20,r20,-1023
1000e1e8:	28a0b03a 	or	r16,r5,r2
1000e1ec:	002b883a 	mov	r21,zero
1000e1f0:	000b883a 	mov	r5,zero
1000e1f4:	3804d53a 	srli	r2,r7,20
1000e1f8:	3838d7fa 	srli	fp,r7,31
1000e1fc:	04400434 	movhi	r17,16
1000e200:	8c7fffc4 	addi	r17,r17,-1
1000e204:	1081ffcc 	andi	r2,r2,2047
1000e208:	3025883a 	mov	r18,r6
1000e20c:	3c62703a 	and	r17,r7,r17
1000e210:	e2803fcc 	andi	r10,fp,255
1000e214:	10006d26 	beq	r2,zero,1000e3cc <__muldf3+0x254>
1000e218:	00c1ffc4 	movi	r3,2047
1000e21c:	10c06526 	beq	r2,r3,1000e3b4 <__muldf3+0x23c>
1000e220:	8c400434 	orhi	r17,r17,16
1000e224:	300ed77a 	srli	r7,r6,29
1000e228:	880690fa 	slli	r3,r17,3
1000e22c:	302490fa 	slli	r18,r6,3
1000e230:	10bf0044 	addi	r2,r2,-1023
1000e234:	38e2b03a 	or	r17,r7,r3
1000e238:	000f883a 	mov	r7,zero
1000e23c:	a087883a 	add	r3,r20,r2
1000e240:	010003c4 	movi	r4,15
1000e244:	3d44b03a 	or	r2,r7,r21
1000e248:	e5ccf03a 	xor	r6,fp,r23
1000e24c:	1a000044 	addi	r8,r3,1
1000e250:	20809b36 	bltu	r4,r2,1000e4c0 <__muldf3+0x348>
1000e254:	100490ba 	slli	r2,r2,2
1000e258:	01040074 	movhi	r4,4097
1000e25c:	21389b04 	addi	r4,r4,-7572
1000e260:	1105883a 	add	r2,r2,r4
1000e264:	10800017 	ldw	r2,0(r2)
1000e268:	1000683a 	jmp	r2
1000e26c:	1000e4c0 	call	11000e4c <_gp+0xfe4988>
1000e270:	1000e2cc 	andi	zero,r2,907
1000e274:	1000e2cc 	andi	zero,r2,907
1000e278:	1000e2c8 	cmpgei	zero,r2,907
1000e27c:	1000e49c 	xori	zero,r2,914
1000e280:	1000e49c 	xori	zero,r2,914
1000e284:	1000e484 	addi	zero,r2,914
1000e288:	1000e2c8 	cmpgei	zero,r2,907
1000e28c:	1000e49c 	xori	zero,r2,914
1000e290:	1000e484 	addi	zero,r2,914
1000e294:	1000e49c 	xori	zero,r2,914
1000e298:	1000e2c8 	cmpgei	zero,r2,907
1000e29c:	1000e4ac 	andhi	zero,r2,914
1000e2a0:	1000e4ac 	andhi	zero,r2,914
1000e2a4:	1000e4ac 	andhi	zero,r2,914
1000e2a8:	1000e80c 	andi	zero,r2,928
1000e2ac:	2404b03a 	or	r2,r4,r16
1000e2b0:	1000711e 	bne	r2,zero,1000e478 <__muldf3+0x300>
1000e2b4:	05400204 	movi	r21,8
1000e2b8:	0021883a 	mov	r16,zero
1000e2bc:	002d883a 	mov	r22,zero
1000e2c0:	01400084 	movi	r5,2
1000e2c4:	003fcb06 	br	1000e1f4 <__alt_data_end+0xf800e1f4>
1000e2c8:	500d883a 	mov	r6,r10
1000e2cc:	00800084 	movi	r2,2
1000e2d0:	38805926 	beq	r7,r2,1000e438 <__muldf3+0x2c0>
1000e2d4:	008000c4 	movi	r2,3
1000e2d8:	3881bb26 	beq	r7,r2,1000e9c8 <__muldf3+0x850>
1000e2dc:	00800044 	movi	r2,1
1000e2e0:	3881961e 	bne	r7,r2,1000e93c <__muldf3+0x7c4>
1000e2e4:	3027883a 	mov	r19,r6
1000e2e8:	0005883a 	mov	r2,zero
1000e2ec:	0021883a 	mov	r16,zero
1000e2f0:	002d883a 	mov	r22,zero
1000e2f4:	1004953a 	slli	r2,r2,20
1000e2f8:	98c03fcc 	andi	r3,r19,255
1000e2fc:	04400434 	movhi	r17,16
1000e300:	8c7fffc4 	addi	r17,r17,-1
1000e304:	180697fa 	slli	r3,r3,31
1000e308:	8460703a 	and	r16,r16,r17
1000e30c:	80a0b03a 	or	r16,r16,r2
1000e310:	80c6b03a 	or	r3,r16,r3
1000e314:	b005883a 	mov	r2,r22
1000e318:	dfc01117 	ldw	ra,68(sp)
1000e31c:	df001017 	ldw	fp,64(sp)
1000e320:	ddc00f17 	ldw	r23,60(sp)
1000e324:	dd800e17 	ldw	r22,56(sp)
1000e328:	dd400d17 	ldw	r21,52(sp)
1000e32c:	dd000c17 	ldw	r20,48(sp)
1000e330:	dcc00b17 	ldw	r19,44(sp)
1000e334:	dc800a17 	ldw	r18,40(sp)
1000e338:	dc400917 	ldw	r17,36(sp)
1000e33c:	dc000817 	ldw	r16,32(sp)
1000e340:	dec01204 	addi	sp,sp,72
1000e344:	f800283a 	ret
1000e348:	2404b03a 	or	r2,r4,r16
1000e34c:	202b883a 	mov	r21,r4
1000e350:	10004426 	beq	r2,zero,1000e464 <__muldf3+0x2ec>
1000e354:	80015126 	beq	r16,zero,1000e89c <__muldf3+0x724>
1000e358:	8009883a 	mov	r4,r16
1000e35c:	d9800715 	stw	r6,28(sp)
1000e360:	d9c00215 	stw	r7,8(sp)
1000e364:	da400415 	stw	r9,16(sp)
1000e368:	000f4e40 	call	1000f4e4 <__clzsi2>
1000e36c:	d9800717 	ldw	r6,28(sp)
1000e370:	d9c00217 	ldw	r7,8(sp)
1000e374:	da400417 	ldw	r9,16(sp)
1000e378:	113ffd44 	addi	r4,r2,-11
1000e37c:	00c00704 	movi	r3,28
1000e380:	19014216 	blt	r3,r4,1000e88c <__muldf3+0x714>
1000e384:	00c00744 	movi	r3,29
1000e388:	15bffe04 	addi	r22,r2,-8
1000e38c:	1907c83a 	sub	r3,r3,r4
1000e390:	85a0983a 	sll	r16,r16,r22
1000e394:	a8c6d83a 	srl	r3,r21,r3
1000e398:	adac983a 	sll	r22,r21,r22
1000e39c:	1c20b03a 	or	r16,r3,r16
1000e3a0:	1080fcc4 	addi	r2,r2,1011
1000e3a4:	00a9c83a 	sub	r20,zero,r2
1000e3a8:	002b883a 	mov	r21,zero
1000e3ac:	000b883a 	mov	r5,zero
1000e3b0:	003f9006 	br	1000e1f4 <__alt_data_end+0xf800e1f4>
1000e3b4:	3446b03a 	or	r3,r6,r17
1000e3b8:	1800281e 	bne	r3,zero,1000e45c <__muldf3+0x2e4>
1000e3bc:	0023883a 	mov	r17,zero
1000e3c0:	0025883a 	mov	r18,zero
1000e3c4:	01c00084 	movi	r7,2
1000e3c8:	003f9c06 	br	1000e23c <__alt_data_end+0xf800e23c>
1000e3cc:	3446b03a 	or	r3,r6,r17
1000e3d0:	18001e26 	beq	r3,zero,1000e44c <__muldf3+0x2d4>
1000e3d4:	88012126 	beq	r17,zero,1000e85c <__muldf3+0x6e4>
1000e3d8:	8809883a 	mov	r4,r17
1000e3dc:	d9400215 	stw	r5,8(sp)
1000e3e0:	d9800715 	stw	r6,28(sp)
1000e3e4:	da400415 	stw	r9,16(sp)
1000e3e8:	da800315 	stw	r10,12(sp)
1000e3ec:	000f4e40 	call	1000f4e4 <__clzsi2>
1000e3f0:	d9400217 	ldw	r5,8(sp)
1000e3f4:	d9800717 	ldw	r6,28(sp)
1000e3f8:	da400417 	ldw	r9,16(sp)
1000e3fc:	da800317 	ldw	r10,12(sp)
1000e400:	113ffd44 	addi	r4,r2,-11
1000e404:	00c00704 	movi	r3,28
1000e408:	19011016 	blt	r3,r4,1000e84c <__muldf3+0x6d4>
1000e40c:	00c00744 	movi	r3,29
1000e410:	14bffe04 	addi	r18,r2,-8
1000e414:	1907c83a 	sub	r3,r3,r4
1000e418:	8ca2983a 	sll	r17,r17,r18
1000e41c:	30c6d83a 	srl	r3,r6,r3
1000e420:	34a4983a 	sll	r18,r6,r18
1000e424:	1c62b03a 	or	r17,r3,r17
1000e428:	1080fcc4 	addi	r2,r2,1011
1000e42c:	0085c83a 	sub	r2,zero,r2
1000e430:	000f883a 	mov	r7,zero
1000e434:	003f8106 	br	1000e23c <__alt_data_end+0xf800e23c>
1000e438:	3027883a 	mov	r19,r6
1000e43c:	0081ffc4 	movi	r2,2047
1000e440:	0021883a 	mov	r16,zero
1000e444:	002d883a 	mov	r22,zero
1000e448:	003faa06 	br	1000e2f4 <__alt_data_end+0xf800e2f4>
1000e44c:	0023883a 	mov	r17,zero
1000e450:	0025883a 	mov	r18,zero
1000e454:	01c00044 	movi	r7,1
1000e458:	003f7806 	br	1000e23c <__alt_data_end+0xf800e23c>
1000e45c:	01c000c4 	movi	r7,3
1000e460:	003f7606 	br	1000e23c <__alt_data_end+0xf800e23c>
1000e464:	05400104 	movi	r21,4
1000e468:	0021883a 	mov	r16,zero
1000e46c:	002d883a 	mov	r22,zero
1000e470:	01400044 	movi	r5,1
1000e474:	003f5f06 	br	1000e1f4 <__alt_data_end+0xf800e1f4>
1000e478:	05400304 	movi	r21,12
1000e47c:	014000c4 	movi	r5,3
1000e480:	003f5c06 	br	1000e1f4 <__alt_data_end+0xf800e1f4>
1000e484:	04000434 	movhi	r16,16
1000e488:	0027883a 	mov	r19,zero
1000e48c:	843fffc4 	addi	r16,r16,-1
1000e490:	05bfffc4 	movi	r22,-1
1000e494:	0081ffc4 	movi	r2,2047
1000e498:	003f9606 	br	1000e2f4 <__alt_data_end+0xf800e2f4>
1000e49c:	8023883a 	mov	r17,r16
1000e4a0:	b025883a 	mov	r18,r22
1000e4a4:	280f883a 	mov	r7,r5
1000e4a8:	003f8806 	br	1000e2cc <__alt_data_end+0xf800e2cc>
1000e4ac:	8023883a 	mov	r17,r16
1000e4b0:	b025883a 	mov	r18,r22
1000e4b4:	480d883a 	mov	r6,r9
1000e4b8:	280f883a 	mov	r7,r5
1000e4bc:	003f8306 	br	1000e2cc <__alt_data_end+0xf800e2cc>
1000e4c0:	b026d43a 	srli	r19,r22,16
1000e4c4:	902ed43a 	srli	r23,r18,16
1000e4c8:	b5bfffcc 	andi	r22,r22,65535
1000e4cc:	94bfffcc 	andi	r18,r18,65535
1000e4d0:	b00b883a 	mov	r5,r22
1000e4d4:	9009883a 	mov	r4,r18
1000e4d8:	d8c00515 	stw	r3,20(sp)
1000e4dc:	d9800715 	stw	r6,28(sp)
1000e4e0:	da000615 	stw	r8,24(sp)
1000e4e4:	000cc7c0 	call	1000cc7c <__mulsi3>
1000e4e8:	980b883a 	mov	r5,r19
1000e4ec:	9009883a 	mov	r4,r18
1000e4f0:	1029883a 	mov	r20,r2
1000e4f4:	000cc7c0 	call	1000cc7c <__mulsi3>
1000e4f8:	b80b883a 	mov	r5,r23
1000e4fc:	9809883a 	mov	r4,r19
1000e500:	102b883a 	mov	r21,r2
1000e504:	000cc7c0 	call	1000cc7c <__mulsi3>
1000e508:	b809883a 	mov	r4,r23
1000e50c:	b00b883a 	mov	r5,r22
1000e510:	1039883a 	mov	fp,r2
1000e514:	000cc7c0 	call	1000cc7c <__mulsi3>
1000e518:	a008d43a 	srli	r4,r20,16
1000e51c:	1545883a 	add	r2,r2,r21
1000e520:	d8c00517 	ldw	r3,20(sp)
1000e524:	2085883a 	add	r2,r4,r2
1000e528:	d9800717 	ldw	r6,28(sp)
1000e52c:	da000617 	ldw	r8,24(sp)
1000e530:	1540022e 	bgeu	r2,r21,1000e53c <__muldf3+0x3c4>
1000e534:	01000074 	movhi	r4,1
1000e538:	e139883a 	add	fp,fp,r4
1000e53c:	100e943a 	slli	r7,r2,16
1000e540:	1004d43a 	srli	r2,r2,16
1000e544:	882ad43a 	srli	r21,r17,16
1000e548:	a53fffcc 	andi	r20,r20,65535
1000e54c:	8c7fffcc 	andi	r17,r17,65535
1000e550:	3d29883a 	add	r20,r7,r20
1000e554:	b00b883a 	mov	r5,r22
1000e558:	8809883a 	mov	r4,r17
1000e55c:	d8c00515 	stw	r3,20(sp)
1000e560:	d9800715 	stw	r6,28(sp)
1000e564:	da000615 	stw	r8,24(sp)
1000e568:	dd000115 	stw	r20,4(sp)
1000e56c:	d8800015 	stw	r2,0(sp)
1000e570:	000cc7c0 	call	1000cc7c <__mulsi3>
1000e574:	980b883a 	mov	r5,r19
1000e578:	8809883a 	mov	r4,r17
1000e57c:	d8800215 	stw	r2,8(sp)
1000e580:	000cc7c0 	call	1000cc7c <__mulsi3>
1000e584:	9809883a 	mov	r4,r19
1000e588:	a80b883a 	mov	r5,r21
1000e58c:	1029883a 	mov	r20,r2
1000e590:	000cc7c0 	call	1000cc7c <__mulsi3>
1000e594:	b00b883a 	mov	r5,r22
1000e598:	a809883a 	mov	r4,r21
1000e59c:	d8800415 	stw	r2,16(sp)
1000e5a0:	000cc7c0 	call	1000cc7c <__mulsi3>
1000e5a4:	d9c00217 	ldw	r7,8(sp)
1000e5a8:	1505883a 	add	r2,r2,r20
1000e5ac:	d8c00517 	ldw	r3,20(sp)
1000e5b0:	3826d43a 	srli	r19,r7,16
1000e5b4:	d9800717 	ldw	r6,28(sp)
1000e5b8:	da000617 	ldw	r8,24(sp)
1000e5bc:	9885883a 	add	r2,r19,r2
1000e5c0:	da400417 	ldw	r9,16(sp)
1000e5c4:	1500022e 	bgeu	r2,r20,1000e5d0 <__muldf3+0x458>
1000e5c8:	01000074 	movhi	r4,1
1000e5cc:	4913883a 	add	r9,r9,r4
1000e5d0:	1028d43a 	srli	r20,r2,16
1000e5d4:	1004943a 	slli	r2,r2,16
1000e5d8:	802cd43a 	srli	r22,r16,16
1000e5dc:	843fffcc 	andi	r16,r16,65535
1000e5e0:	3cffffcc 	andi	r19,r7,65535
1000e5e4:	9009883a 	mov	r4,r18
1000e5e8:	800b883a 	mov	r5,r16
1000e5ec:	a269883a 	add	r20,r20,r9
1000e5f0:	d8c00515 	stw	r3,20(sp)
1000e5f4:	d9800715 	stw	r6,28(sp)
1000e5f8:	da000615 	stw	r8,24(sp)
1000e5fc:	14e7883a 	add	r19,r2,r19
1000e600:	000cc7c0 	call	1000cc7c <__mulsi3>
1000e604:	9009883a 	mov	r4,r18
1000e608:	b00b883a 	mov	r5,r22
1000e60c:	d8800315 	stw	r2,12(sp)
1000e610:	000cc7c0 	call	1000cc7c <__mulsi3>
1000e614:	b809883a 	mov	r4,r23
1000e618:	b00b883a 	mov	r5,r22
1000e61c:	d8800215 	stw	r2,8(sp)
1000e620:	000cc7c0 	call	1000cc7c <__mulsi3>
1000e624:	b80b883a 	mov	r5,r23
1000e628:	8009883a 	mov	r4,r16
1000e62c:	d8800415 	stw	r2,16(sp)
1000e630:	000cc7c0 	call	1000cc7c <__mulsi3>
1000e634:	da800317 	ldw	r10,12(sp)
1000e638:	d9c00217 	ldw	r7,8(sp)
1000e63c:	d9000017 	ldw	r4,0(sp)
1000e640:	502ed43a 	srli	r23,r10,16
1000e644:	11c5883a 	add	r2,r2,r7
1000e648:	24e5883a 	add	r18,r4,r19
1000e64c:	b885883a 	add	r2,r23,r2
1000e650:	d8c00517 	ldw	r3,20(sp)
1000e654:	d9800717 	ldw	r6,28(sp)
1000e658:	da000617 	ldw	r8,24(sp)
1000e65c:	da400417 	ldw	r9,16(sp)
1000e660:	11c0022e 	bgeu	r2,r7,1000e66c <__muldf3+0x4f4>
1000e664:	01000074 	movhi	r4,1
1000e668:	4913883a 	add	r9,r9,r4
1000e66c:	100ed43a 	srli	r7,r2,16
1000e670:	1004943a 	slli	r2,r2,16
1000e674:	55ffffcc 	andi	r23,r10,65535
1000e678:	3a53883a 	add	r9,r7,r9
1000e67c:	8809883a 	mov	r4,r17
1000e680:	800b883a 	mov	r5,r16
1000e684:	d8c00515 	stw	r3,20(sp)
1000e688:	d9800715 	stw	r6,28(sp)
1000e68c:	da000615 	stw	r8,24(sp)
1000e690:	da400415 	stw	r9,16(sp)
1000e694:	15ef883a 	add	r23,r2,r23
1000e698:	000cc7c0 	call	1000cc7c <__mulsi3>
1000e69c:	8809883a 	mov	r4,r17
1000e6a0:	b00b883a 	mov	r5,r22
1000e6a4:	d8800215 	stw	r2,8(sp)
1000e6a8:	000cc7c0 	call	1000cc7c <__mulsi3>
1000e6ac:	b00b883a 	mov	r5,r22
1000e6b0:	a809883a 	mov	r4,r21
1000e6b4:	d8800315 	stw	r2,12(sp)
1000e6b8:	000cc7c0 	call	1000cc7c <__mulsi3>
1000e6bc:	8009883a 	mov	r4,r16
1000e6c0:	a80b883a 	mov	r5,r21
1000e6c4:	1023883a 	mov	r17,r2
1000e6c8:	000cc7c0 	call	1000cc7c <__mulsi3>
1000e6cc:	d9c00217 	ldw	r7,8(sp)
1000e6d0:	da800317 	ldw	r10,12(sp)
1000e6d4:	d8c00517 	ldw	r3,20(sp)
1000e6d8:	3808d43a 	srli	r4,r7,16
1000e6dc:	1285883a 	add	r2,r2,r10
1000e6e0:	d9800717 	ldw	r6,28(sp)
1000e6e4:	2085883a 	add	r2,r4,r2
1000e6e8:	da000617 	ldw	r8,24(sp)
1000e6ec:	da400417 	ldw	r9,16(sp)
1000e6f0:	1280022e 	bgeu	r2,r10,1000e6fc <__muldf3+0x584>
1000e6f4:	01000074 	movhi	r4,1
1000e6f8:	8923883a 	add	r17,r17,r4
1000e6fc:	1008943a 	slli	r4,r2,16
1000e700:	39ffffcc 	andi	r7,r7,65535
1000e704:	e4b9883a 	add	fp,fp,r18
1000e708:	21cf883a 	add	r7,r4,r7
1000e70c:	e4e7803a 	cmpltu	r19,fp,r19
1000e710:	3d0f883a 	add	r7,r7,r20
1000e714:	bf39883a 	add	fp,r23,fp
1000e718:	99c9883a 	add	r4,r19,r7
1000e71c:	e5ef803a 	cmpltu	r23,fp,r23
1000e720:	490b883a 	add	r5,r9,r4
1000e724:	1004d43a 	srli	r2,r2,16
1000e728:	b965883a 	add	r18,r23,r5
1000e72c:	24c9803a 	cmpltu	r4,r4,r19
1000e730:	3d29803a 	cmpltu	r20,r7,r20
1000e734:	a128b03a 	or	r20,r20,r4
1000e738:	95ef803a 	cmpltu	r23,r18,r23
1000e73c:	2a53803a 	cmpltu	r9,r5,r9
1000e740:	a0a9883a 	add	r20,r20,r2
1000e744:	4deeb03a 	or	r23,r9,r23
1000e748:	a5ef883a 	add	r23,r20,r23
1000e74c:	bc63883a 	add	r17,r23,r17
1000e750:	e004927a 	slli	r2,fp,9
1000e754:	d9000117 	ldw	r4,4(sp)
1000e758:	882e927a 	slli	r23,r17,9
1000e75c:	9022d5fa 	srli	r17,r18,23
1000e760:	e038d5fa 	srli	fp,fp,23
1000e764:	1104b03a 	or	r2,r2,r4
1000e768:	9024927a 	slli	r18,r18,9
1000e76c:	1004c03a 	cmpne	r2,r2,zero
1000e770:	bc62b03a 	or	r17,r23,r17
1000e774:	1738b03a 	or	fp,r2,fp
1000e778:	8880402c 	andhi	r2,r17,256
1000e77c:	e4a4b03a 	or	r18,fp,r18
1000e780:	10000726 	beq	r2,zero,1000e7a0 <__muldf3+0x628>
1000e784:	9006d07a 	srli	r3,r18,1
1000e788:	880497fa 	slli	r2,r17,31
1000e78c:	9480004c 	andi	r18,r18,1
1000e790:	8822d07a 	srli	r17,r17,1
1000e794:	1ca4b03a 	or	r18,r3,r18
1000e798:	14a4b03a 	or	r18,r2,r18
1000e79c:	4007883a 	mov	r3,r8
1000e7a0:	1880ffc4 	addi	r2,r3,1023
1000e7a4:	0080460e 	bge	zero,r2,1000e8c0 <__muldf3+0x748>
1000e7a8:	910001cc 	andi	r4,r18,7
1000e7ac:	20000726 	beq	r4,zero,1000e7cc <__muldf3+0x654>
1000e7b0:	910003cc 	andi	r4,r18,15
1000e7b4:	01400104 	movi	r5,4
1000e7b8:	21400426 	beq	r4,r5,1000e7cc <__muldf3+0x654>
1000e7bc:	9149883a 	add	r4,r18,r5
1000e7c0:	24a5803a 	cmpltu	r18,r4,r18
1000e7c4:	8ca3883a 	add	r17,r17,r18
1000e7c8:	2025883a 	mov	r18,r4
1000e7cc:	8900402c 	andhi	r4,r17,256
1000e7d0:	20000426 	beq	r4,zero,1000e7e4 <__muldf3+0x66c>
1000e7d4:	18810004 	addi	r2,r3,1024
1000e7d8:	00ffc034 	movhi	r3,65280
1000e7dc:	18ffffc4 	addi	r3,r3,-1
1000e7e0:	88e2703a 	and	r17,r17,r3
1000e7e4:	00c1ff84 	movi	r3,2046
1000e7e8:	18bf1316 	blt	r3,r2,1000e438 <__alt_data_end+0xf800e438>
1000e7ec:	882c977a 	slli	r22,r17,29
1000e7f0:	9024d0fa 	srli	r18,r18,3
1000e7f4:	8822927a 	slli	r17,r17,9
1000e7f8:	1081ffcc 	andi	r2,r2,2047
1000e7fc:	b4acb03a 	or	r22,r22,r18
1000e800:	8820d33a 	srli	r16,r17,12
1000e804:	3027883a 	mov	r19,r6
1000e808:	003eba06 	br	1000e2f4 <__alt_data_end+0xf800e2f4>
1000e80c:	8080022c 	andhi	r2,r16,8
1000e810:	10000926 	beq	r2,zero,1000e838 <__muldf3+0x6c0>
1000e814:	8880022c 	andhi	r2,r17,8
1000e818:	1000071e 	bne	r2,zero,1000e838 <__muldf3+0x6c0>
1000e81c:	00800434 	movhi	r2,16
1000e820:	8c000234 	orhi	r16,r17,8
1000e824:	10bfffc4 	addi	r2,r2,-1
1000e828:	e027883a 	mov	r19,fp
1000e82c:	80a0703a 	and	r16,r16,r2
1000e830:	902d883a 	mov	r22,r18
1000e834:	003f1706 	br	1000e494 <__alt_data_end+0xf800e494>
1000e838:	00800434 	movhi	r2,16
1000e83c:	84000234 	orhi	r16,r16,8
1000e840:	10bfffc4 	addi	r2,r2,-1
1000e844:	80a0703a 	and	r16,r16,r2
1000e848:	003f1206 	br	1000e494 <__alt_data_end+0xf800e494>
1000e84c:	147ff604 	addi	r17,r2,-40
1000e850:	3462983a 	sll	r17,r6,r17
1000e854:	0025883a 	mov	r18,zero
1000e858:	003ef306 	br	1000e428 <__alt_data_end+0xf800e428>
1000e85c:	3009883a 	mov	r4,r6
1000e860:	d9400215 	stw	r5,8(sp)
1000e864:	d9800715 	stw	r6,28(sp)
1000e868:	da400415 	stw	r9,16(sp)
1000e86c:	da800315 	stw	r10,12(sp)
1000e870:	000f4e40 	call	1000f4e4 <__clzsi2>
1000e874:	10800804 	addi	r2,r2,32
1000e878:	da800317 	ldw	r10,12(sp)
1000e87c:	da400417 	ldw	r9,16(sp)
1000e880:	d9800717 	ldw	r6,28(sp)
1000e884:	d9400217 	ldw	r5,8(sp)
1000e888:	003edd06 	br	1000e400 <__alt_data_end+0xf800e400>
1000e88c:	143ff604 	addi	r16,r2,-40
1000e890:	ac20983a 	sll	r16,r21,r16
1000e894:	002d883a 	mov	r22,zero
1000e898:	003ec106 	br	1000e3a0 <__alt_data_end+0xf800e3a0>
1000e89c:	d9800715 	stw	r6,28(sp)
1000e8a0:	d9c00215 	stw	r7,8(sp)
1000e8a4:	da400415 	stw	r9,16(sp)
1000e8a8:	000f4e40 	call	1000f4e4 <__clzsi2>
1000e8ac:	10800804 	addi	r2,r2,32
1000e8b0:	da400417 	ldw	r9,16(sp)
1000e8b4:	d9c00217 	ldw	r7,8(sp)
1000e8b8:	d9800717 	ldw	r6,28(sp)
1000e8bc:	003eae06 	br	1000e378 <__alt_data_end+0xf800e378>
1000e8c0:	00c00044 	movi	r3,1
1000e8c4:	1887c83a 	sub	r3,r3,r2
1000e8c8:	01000e04 	movi	r4,56
1000e8cc:	20fe8516 	blt	r4,r3,1000e2e4 <__alt_data_end+0xf800e2e4>
1000e8d0:	010007c4 	movi	r4,31
1000e8d4:	20c01b16 	blt	r4,r3,1000e944 <__muldf3+0x7cc>
1000e8d8:	00800804 	movi	r2,32
1000e8dc:	10c5c83a 	sub	r2,r2,r3
1000e8e0:	888a983a 	sll	r5,r17,r2
1000e8e4:	90c8d83a 	srl	r4,r18,r3
1000e8e8:	9084983a 	sll	r2,r18,r2
1000e8ec:	88e2d83a 	srl	r17,r17,r3
1000e8f0:	2906b03a 	or	r3,r5,r4
1000e8f4:	1004c03a 	cmpne	r2,r2,zero
1000e8f8:	1886b03a 	or	r3,r3,r2
1000e8fc:	188001cc 	andi	r2,r3,7
1000e900:	10000726 	beq	r2,zero,1000e920 <__muldf3+0x7a8>
1000e904:	188003cc 	andi	r2,r3,15
1000e908:	01000104 	movi	r4,4
1000e90c:	11000426 	beq	r2,r4,1000e920 <__muldf3+0x7a8>
1000e910:	1805883a 	mov	r2,r3
1000e914:	10c00104 	addi	r3,r2,4
1000e918:	1885803a 	cmpltu	r2,r3,r2
1000e91c:	88a3883a 	add	r17,r17,r2
1000e920:	8880202c 	andhi	r2,r17,128
1000e924:	10001c26 	beq	r2,zero,1000e998 <__muldf3+0x820>
1000e928:	3027883a 	mov	r19,r6
1000e92c:	00800044 	movi	r2,1
1000e930:	0021883a 	mov	r16,zero
1000e934:	002d883a 	mov	r22,zero
1000e938:	003e6e06 	br	1000e2f4 <__alt_data_end+0xf800e2f4>
1000e93c:	4007883a 	mov	r3,r8
1000e940:	003f9706 	br	1000e7a0 <__alt_data_end+0xf800e7a0>
1000e944:	017ff844 	movi	r5,-31
1000e948:	2885c83a 	sub	r2,r5,r2
1000e94c:	888ad83a 	srl	r5,r17,r2
1000e950:	00800804 	movi	r2,32
1000e954:	18801a26 	beq	r3,r2,1000e9c0 <__muldf3+0x848>
1000e958:	01001004 	movi	r4,64
1000e95c:	20c7c83a 	sub	r3,r4,r3
1000e960:	88e2983a 	sll	r17,r17,r3
1000e964:	8ca4b03a 	or	r18,r17,r18
1000e968:	9004c03a 	cmpne	r2,r18,zero
1000e96c:	2884b03a 	or	r2,r5,r2
1000e970:	144001cc 	andi	r17,r2,7
1000e974:	88000d1e 	bne	r17,zero,1000e9ac <__muldf3+0x834>
1000e978:	0021883a 	mov	r16,zero
1000e97c:	102cd0fa 	srli	r22,r2,3
1000e980:	3027883a 	mov	r19,r6
1000e984:	0005883a 	mov	r2,zero
1000e988:	b46cb03a 	or	r22,r22,r17
1000e98c:	003e5906 	br	1000e2f4 <__alt_data_end+0xf800e2f4>
1000e990:	1007883a 	mov	r3,r2
1000e994:	0023883a 	mov	r17,zero
1000e998:	8820927a 	slli	r16,r17,9
1000e99c:	1805883a 	mov	r2,r3
1000e9a0:	8822977a 	slli	r17,r17,29
1000e9a4:	8020d33a 	srli	r16,r16,12
1000e9a8:	003ff406 	br	1000e97c <__alt_data_end+0xf800e97c>
1000e9ac:	10c003cc 	andi	r3,r2,15
1000e9b0:	01000104 	movi	r4,4
1000e9b4:	193ff626 	beq	r3,r4,1000e990 <__alt_data_end+0xf800e990>
1000e9b8:	0023883a 	mov	r17,zero
1000e9bc:	003fd506 	br	1000e914 <__alt_data_end+0xf800e914>
1000e9c0:	0023883a 	mov	r17,zero
1000e9c4:	003fe706 	br	1000e964 <__alt_data_end+0xf800e964>
1000e9c8:	00800434 	movhi	r2,16
1000e9cc:	8c000234 	orhi	r16,r17,8
1000e9d0:	10bfffc4 	addi	r2,r2,-1
1000e9d4:	3027883a 	mov	r19,r6
1000e9d8:	80a0703a 	and	r16,r16,r2
1000e9dc:	902d883a 	mov	r22,r18
1000e9e0:	003eac06 	br	1000e494 <__alt_data_end+0xf800e494>

1000e9e4 <__subdf3>:
1000e9e4:	02000434 	movhi	r8,16
1000e9e8:	423fffc4 	addi	r8,r8,-1
1000e9ec:	defffb04 	addi	sp,sp,-20
1000e9f0:	2a14703a 	and	r10,r5,r8
1000e9f4:	3812d53a 	srli	r9,r7,20
1000e9f8:	3a10703a 	and	r8,r7,r8
1000e9fc:	2006d77a 	srli	r3,r4,29
1000ea00:	3004d77a 	srli	r2,r6,29
1000ea04:	dc000015 	stw	r16,0(sp)
1000ea08:	501490fa 	slli	r10,r10,3
1000ea0c:	2820d53a 	srli	r16,r5,20
1000ea10:	401090fa 	slli	r8,r8,3
1000ea14:	dc800215 	stw	r18,8(sp)
1000ea18:	dc400115 	stw	r17,4(sp)
1000ea1c:	dfc00415 	stw	ra,16(sp)
1000ea20:	202290fa 	slli	r17,r4,3
1000ea24:	dcc00315 	stw	r19,12(sp)
1000ea28:	4a41ffcc 	andi	r9,r9,2047
1000ea2c:	0101ffc4 	movi	r4,2047
1000ea30:	2824d7fa 	srli	r18,r5,31
1000ea34:	8401ffcc 	andi	r16,r16,2047
1000ea38:	50c6b03a 	or	r3,r10,r3
1000ea3c:	380ed7fa 	srli	r7,r7,31
1000ea40:	408ab03a 	or	r5,r8,r2
1000ea44:	300c90fa 	slli	r6,r6,3
1000ea48:	49009626 	beq	r9,r4,1000eca4 <__subdf3+0x2c0>
1000ea4c:	39c0005c 	xori	r7,r7,1
1000ea50:	8245c83a 	sub	r2,r16,r9
1000ea54:	3c807426 	beq	r7,r18,1000ec28 <__subdf3+0x244>
1000ea58:	0080af0e 	bge	zero,r2,1000ed18 <__subdf3+0x334>
1000ea5c:	48002a1e 	bne	r9,zero,1000eb08 <__subdf3+0x124>
1000ea60:	2988b03a 	or	r4,r5,r6
1000ea64:	20009a1e 	bne	r4,zero,1000ecd0 <__subdf3+0x2ec>
1000ea68:	888001cc 	andi	r2,r17,7
1000ea6c:	10000726 	beq	r2,zero,1000ea8c <__subdf3+0xa8>
1000ea70:	888003cc 	andi	r2,r17,15
1000ea74:	01000104 	movi	r4,4
1000ea78:	11000426 	beq	r2,r4,1000ea8c <__subdf3+0xa8>
1000ea7c:	890b883a 	add	r5,r17,r4
1000ea80:	2c63803a 	cmpltu	r17,r5,r17
1000ea84:	1c47883a 	add	r3,r3,r17
1000ea88:	2823883a 	mov	r17,r5
1000ea8c:	1880202c 	andhi	r2,r3,128
1000ea90:	10005926 	beq	r2,zero,1000ebf8 <__subdf3+0x214>
1000ea94:	84000044 	addi	r16,r16,1
1000ea98:	0081ffc4 	movi	r2,2047
1000ea9c:	8080be26 	beq	r16,r2,1000ed98 <__subdf3+0x3b4>
1000eaa0:	017fe034 	movhi	r5,65408
1000eaa4:	297fffc4 	addi	r5,r5,-1
1000eaa8:	1946703a 	and	r3,r3,r5
1000eaac:	1804977a 	slli	r2,r3,29
1000eab0:	1806927a 	slli	r3,r3,9
1000eab4:	8822d0fa 	srli	r17,r17,3
1000eab8:	8401ffcc 	andi	r16,r16,2047
1000eabc:	180ad33a 	srli	r5,r3,12
1000eac0:	9100004c 	andi	r4,r18,1
1000eac4:	1444b03a 	or	r2,r2,r17
1000eac8:	80c1ffcc 	andi	r3,r16,2047
1000eacc:	1820953a 	slli	r16,r3,20
1000ead0:	20c03fcc 	andi	r3,r4,255
1000ead4:	180897fa 	slli	r4,r3,31
1000ead8:	00c00434 	movhi	r3,16
1000eadc:	18ffffc4 	addi	r3,r3,-1
1000eae0:	28c6703a 	and	r3,r5,r3
1000eae4:	1c06b03a 	or	r3,r3,r16
1000eae8:	1906b03a 	or	r3,r3,r4
1000eaec:	dfc00417 	ldw	ra,16(sp)
1000eaf0:	dcc00317 	ldw	r19,12(sp)
1000eaf4:	dc800217 	ldw	r18,8(sp)
1000eaf8:	dc400117 	ldw	r17,4(sp)
1000eafc:	dc000017 	ldw	r16,0(sp)
1000eb00:	dec00504 	addi	sp,sp,20
1000eb04:	f800283a 	ret
1000eb08:	0101ffc4 	movi	r4,2047
1000eb0c:	813fd626 	beq	r16,r4,1000ea68 <__alt_data_end+0xf800ea68>
1000eb10:	29402034 	orhi	r5,r5,128
1000eb14:	01000e04 	movi	r4,56
1000eb18:	2080a316 	blt	r4,r2,1000eda8 <__subdf3+0x3c4>
1000eb1c:	010007c4 	movi	r4,31
1000eb20:	2080c616 	blt	r4,r2,1000ee3c <__subdf3+0x458>
1000eb24:	01000804 	movi	r4,32
1000eb28:	2089c83a 	sub	r4,r4,r2
1000eb2c:	2910983a 	sll	r8,r5,r4
1000eb30:	308ed83a 	srl	r7,r6,r2
1000eb34:	3108983a 	sll	r4,r6,r4
1000eb38:	2884d83a 	srl	r2,r5,r2
1000eb3c:	41ccb03a 	or	r6,r8,r7
1000eb40:	2008c03a 	cmpne	r4,r4,zero
1000eb44:	310cb03a 	or	r6,r6,r4
1000eb48:	898dc83a 	sub	r6,r17,r6
1000eb4c:	89a3803a 	cmpltu	r17,r17,r6
1000eb50:	1887c83a 	sub	r3,r3,r2
1000eb54:	1c47c83a 	sub	r3,r3,r17
1000eb58:	3023883a 	mov	r17,r6
1000eb5c:	1880202c 	andhi	r2,r3,128
1000eb60:	10002326 	beq	r2,zero,1000ebf0 <__subdf3+0x20c>
1000eb64:	04c02034 	movhi	r19,128
1000eb68:	9cffffc4 	addi	r19,r19,-1
1000eb6c:	1ce6703a 	and	r19,r3,r19
1000eb70:	98007a26 	beq	r19,zero,1000ed5c <__subdf3+0x378>
1000eb74:	9809883a 	mov	r4,r19
1000eb78:	000f4e40 	call	1000f4e4 <__clzsi2>
1000eb7c:	113ffe04 	addi	r4,r2,-8
1000eb80:	00c007c4 	movi	r3,31
1000eb84:	19007b16 	blt	r3,r4,1000ed74 <__subdf3+0x390>
1000eb88:	00800804 	movi	r2,32
1000eb8c:	1105c83a 	sub	r2,r2,r4
1000eb90:	8884d83a 	srl	r2,r17,r2
1000eb94:	9906983a 	sll	r3,r19,r4
1000eb98:	8922983a 	sll	r17,r17,r4
1000eb9c:	10c4b03a 	or	r2,r2,r3
1000eba0:	24007816 	blt	r4,r16,1000ed84 <__subdf3+0x3a0>
1000eba4:	2421c83a 	sub	r16,r4,r16
1000eba8:	80c00044 	addi	r3,r16,1
1000ebac:	010007c4 	movi	r4,31
1000ebb0:	20c09516 	blt	r4,r3,1000ee08 <__subdf3+0x424>
1000ebb4:	01400804 	movi	r5,32
1000ebb8:	28cbc83a 	sub	r5,r5,r3
1000ebbc:	88c8d83a 	srl	r4,r17,r3
1000ebc0:	8962983a 	sll	r17,r17,r5
1000ebc4:	114a983a 	sll	r5,r2,r5
1000ebc8:	10c6d83a 	srl	r3,r2,r3
1000ebcc:	8804c03a 	cmpne	r2,r17,zero
1000ebd0:	290ab03a 	or	r5,r5,r4
1000ebd4:	28a2b03a 	or	r17,r5,r2
1000ebd8:	0021883a 	mov	r16,zero
1000ebdc:	003fa206 	br	1000ea68 <__alt_data_end+0xf800ea68>
1000ebe0:	2090b03a 	or	r8,r4,r2
1000ebe4:	40018e26 	beq	r8,zero,1000f220 <__subdf3+0x83c>
1000ebe8:	1007883a 	mov	r3,r2
1000ebec:	2023883a 	mov	r17,r4
1000ebf0:	888001cc 	andi	r2,r17,7
1000ebf4:	103f9e1e 	bne	r2,zero,1000ea70 <__alt_data_end+0xf800ea70>
1000ebf8:	1804977a 	slli	r2,r3,29
1000ebfc:	8822d0fa 	srli	r17,r17,3
1000ec00:	1810d0fa 	srli	r8,r3,3
1000ec04:	9100004c 	andi	r4,r18,1
1000ec08:	1444b03a 	or	r2,r2,r17
1000ec0c:	00c1ffc4 	movi	r3,2047
1000ec10:	80c02826 	beq	r16,r3,1000ecb4 <__subdf3+0x2d0>
1000ec14:	01400434 	movhi	r5,16
1000ec18:	297fffc4 	addi	r5,r5,-1
1000ec1c:	80e0703a 	and	r16,r16,r3
1000ec20:	414a703a 	and	r5,r8,r5
1000ec24:	003fa806 	br	1000eac8 <__alt_data_end+0xf800eac8>
1000ec28:	0080630e 	bge	zero,r2,1000edb8 <__subdf3+0x3d4>
1000ec2c:	48003026 	beq	r9,zero,1000ecf0 <__subdf3+0x30c>
1000ec30:	0101ffc4 	movi	r4,2047
1000ec34:	813f8c26 	beq	r16,r4,1000ea68 <__alt_data_end+0xf800ea68>
1000ec38:	29402034 	orhi	r5,r5,128
1000ec3c:	01000e04 	movi	r4,56
1000ec40:	2080a90e 	bge	r4,r2,1000eee8 <__subdf3+0x504>
1000ec44:	298cb03a 	or	r6,r5,r6
1000ec48:	3012c03a 	cmpne	r9,r6,zero
1000ec4c:	0005883a 	mov	r2,zero
1000ec50:	4c53883a 	add	r9,r9,r17
1000ec54:	4c63803a 	cmpltu	r17,r9,r17
1000ec58:	10c7883a 	add	r3,r2,r3
1000ec5c:	88c7883a 	add	r3,r17,r3
1000ec60:	4823883a 	mov	r17,r9
1000ec64:	1880202c 	andhi	r2,r3,128
1000ec68:	1000d026 	beq	r2,zero,1000efac <__subdf3+0x5c8>
1000ec6c:	84000044 	addi	r16,r16,1
1000ec70:	0081ffc4 	movi	r2,2047
1000ec74:	8080fe26 	beq	r16,r2,1000f070 <__subdf3+0x68c>
1000ec78:	00bfe034 	movhi	r2,65408
1000ec7c:	10bfffc4 	addi	r2,r2,-1
1000ec80:	1886703a 	and	r3,r3,r2
1000ec84:	880ad07a 	srli	r5,r17,1
1000ec88:	180497fa 	slli	r2,r3,31
1000ec8c:	8900004c 	andi	r4,r17,1
1000ec90:	2922b03a 	or	r17,r5,r4
1000ec94:	1806d07a 	srli	r3,r3,1
1000ec98:	1462b03a 	or	r17,r2,r17
1000ec9c:	3825883a 	mov	r18,r7
1000eca0:	003f7106 	br	1000ea68 <__alt_data_end+0xf800ea68>
1000eca4:	2984b03a 	or	r2,r5,r6
1000eca8:	103f6826 	beq	r2,zero,1000ea4c <__alt_data_end+0xf800ea4c>
1000ecac:	39c03fcc 	andi	r7,r7,255
1000ecb0:	003f6706 	br	1000ea50 <__alt_data_end+0xf800ea50>
1000ecb4:	4086b03a 	or	r3,r8,r2
1000ecb8:	18015226 	beq	r3,zero,1000f204 <__subdf3+0x820>
1000ecbc:	00c00434 	movhi	r3,16
1000ecc0:	41400234 	orhi	r5,r8,8
1000ecc4:	18ffffc4 	addi	r3,r3,-1
1000ecc8:	28ca703a 	and	r5,r5,r3
1000eccc:	003f7e06 	br	1000eac8 <__alt_data_end+0xf800eac8>
1000ecd0:	10bfffc4 	addi	r2,r2,-1
1000ecd4:	1000491e 	bne	r2,zero,1000edfc <__subdf3+0x418>
1000ecd8:	898fc83a 	sub	r7,r17,r6
1000ecdc:	89e3803a 	cmpltu	r17,r17,r7
1000ece0:	1947c83a 	sub	r3,r3,r5
1000ece4:	1c47c83a 	sub	r3,r3,r17
1000ece8:	3823883a 	mov	r17,r7
1000ecec:	003f9b06 	br	1000eb5c <__alt_data_end+0xf800eb5c>
1000ecf0:	2988b03a 	or	r4,r5,r6
1000ecf4:	203f5c26 	beq	r4,zero,1000ea68 <__alt_data_end+0xf800ea68>
1000ecf8:	10bfffc4 	addi	r2,r2,-1
1000ecfc:	1000931e 	bne	r2,zero,1000ef4c <__subdf3+0x568>
1000ed00:	898d883a 	add	r6,r17,r6
1000ed04:	3463803a 	cmpltu	r17,r6,r17
1000ed08:	1947883a 	add	r3,r3,r5
1000ed0c:	88c7883a 	add	r3,r17,r3
1000ed10:	3023883a 	mov	r17,r6
1000ed14:	003fd306 	br	1000ec64 <__alt_data_end+0xf800ec64>
1000ed18:	1000541e 	bne	r2,zero,1000ee6c <__subdf3+0x488>
1000ed1c:	80800044 	addi	r2,r16,1
1000ed20:	1081ffcc 	andi	r2,r2,2047
1000ed24:	01000044 	movi	r4,1
1000ed28:	2080a20e 	bge	r4,r2,1000efb4 <__subdf3+0x5d0>
1000ed2c:	8989c83a 	sub	r4,r17,r6
1000ed30:	8905803a 	cmpltu	r2,r17,r4
1000ed34:	1967c83a 	sub	r19,r3,r5
1000ed38:	98a7c83a 	sub	r19,r19,r2
1000ed3c:	9880202c 	andhi	r2,r19,128
1000ed40:	10006326 	beq	r2,zero,1000eed0 <__subdf3+0x4ec>
1000ed44:	3463c83a 	sub	r17,r6,r17
1000ed48:	28c7c83a 	sub	r3,r5,r3
1000ed4c:	344d803a 	cmpltu	r6,r6,r17
1000ed50:	19a7c83a 	sub	r19,r3,r6
1000ed54:	3825883a 	mov	r18,r7
1000ed58:	983f861e 	bne	r19,zero,1000eb74 <__alt_data_end+0xf800eb74>
1000ed5c:	8809883a 	mov	r4,r17
1000ed60:	000f4e40 	call	1000f4e4 <__clzsi2>
1000ed64:	10800804 	addi	r2,r2,32
1000ed68:	113ffe04 	addi	r4,r2,-8
1000ed6c:	00c007c4 	movi	r3,31
1000ed70:	193f850e 	bge	r3,r4,1000eb88 <__alt_data_end+0xf800eb88>
1000ed74:	10bff604 	addi	r2,r2,-40
1000ed78:	8884983a 	sll	r2,r17,r2
1000ed7c:	0023883a 	mov	r17,zero
1000ed80:	243f880e 	bge	r4,r16,1000eba4 <__alt_data_end+0xf800eba4>
1000ed84:	00ffe034 	movhi	r3,65408
1000ed88:	18ffffc4 	addi	r3,r3,-1
1000ed8c:	8121c83a 	sub	r16,r16,r4
1000ed90:	10c6703a 	and	r3,r2,r3
1000ed94:	003f3406 	br	1000ea68 <__alt_data_end+0xf800ea68>
1000ed98:	9100004c 	andi	r4,r18,1
1000ed9c:	000b883a 	mov	r5,zero
1000eda0:	0005883a 	mov	r2,zero
1000eda4:	003f4806 	br	1000eac8 <__alt_data_end+0xf800eac8>
1000eda8:	298cb03a 	or	r6,r5,r6
1000edac:	300cc03a 	cmpne	r6,r6,zero
1000edb0:	0005883a 	mov	r2,zero
1000edb4:	003f6406 	br	1000eb48 <__alt_data_end+0xf800eb48>
1000edb8:	10009a1e 	bne	r2,zero,1000f024 <__subdf3+0x640>
1000edbc:	82400044 	addi	r9,r16,1
1000edc0:	4881ffcc 	andi	r2,r9,2047
1000edc4:	02800044 	movi	r10,1
1000edc8:	5080670e 	bge	r10,r2,1000ef68 <__subdf3+0x584>
1000edcc:	0081ffc4 	movi	r2,2047
1000edd0:	4880af26 	beq	r9,r2,1000f090 <__subdf3+0x6ac>
1000edd4:	898d883a 	add	r6,r17,r6
1000edd8:	1945883a 	add	r2,r3,r5
1000eddc:	3447803a 	cmpltu	r3,r6,r17
1000ede0:	1887883a 	add	r3,r3,r2
1000ede4:	182297fa 	slli	r17,r3,31
1000ede8:	300cd07a 	srli	r6,r6,1
1000edec:	1806d07a 	srli	r3,r3,1
1000edf0:	4821883a 	mov	r16,r9
1000edf4:	89a2b03a 	or	r17,r17,r6
1000edf8:	003f1b06 	br	1000ea68 <__alt_data_end+0xf800ea68>
1000edfc:	0101ffc4 	movi	r4,2047
1000ee00:	813f441e 	bne	r16,r4,1000eb14 <__alt_data_end+0xf800eb14>
1000ee04:	003f1806 	br	1000ea68 <__alt_data_end+0xf800ea68>
1000ee08:	843ff844 	addi	r16,r16,-31
1000ee0c:	01400804 	movi	r5,32
1000ee10:	1408d83a 	srl	r4,r2,r16
1000ee14:	19405026 	beq	r3,r5,1000ef58 <__subdf3+0x574>
1000ee18:	01401004 	movi	r5,64
1000ee1c:	28c7c83a 	sub	r3,r5,r3
1000ee20:	10c4983a 	sll	r2,r2,r3
1000ee24:	88a2b03a 	or	r17,r17,r2
1000ee28:	8822c03a 	cmpne	r17,r17,zero
1000ee2c:	2462b03a 	or	r17,r4,r17
1000ee30:	0007883a 	mov	r3,zero
1000ee34:	0021883a 	mov	r16,zero
1000ee38:	003f6d06 	br	1000ebf0 <__alt_data_end+0xf800ebf0>
1000ee3c:	11fff804 	addi	r7,r2,-32
1000ee40:	01000804 	movi	r4,32
1000ee44:	29ced83a 	srl	r7,r5,r7
1000ee48:	11004526 	beq	r2,r4,1000ef60 <__subdf3+0x57c>
1000ee4c:	01001004 	movi	r4,64
1000ee50:	2089c83a 	sub	r4,r4,r2
1000ee54:	2904983a 	sll	r2,r5,r4
1000ee58:	118cb03a 	or	r6,r2,r6
1000ee5c:	300cc03a 	cmpne	r6,r6,zero
1000ee60:	398cb03a 	or	r6,r7,r6
1000ee64:	0005883a 	mov	r2,zero
1000ee68:	003f3706 	br	1000eb48 <__alt_data_end+0xf800eb48>
1000ee6c:	80002a26 	beq	r16,zero,1000ef18 <__subdf3+0x534>
1000ee70:	0101ffc4 	movi	r4,2047
1000ee74:	49006626 	beq	r9,r4,1000f010 <__subdf3+0x62c>
1000ee78:	0085c83a 	sub	r2,zero,r2
1000ee7c:	18c02034 	orhi	r3,r3,128
1000ee80:	01000e04 	movi	r4,56
1000ee84:	20807e16 	blt	r4,r2,1000f080 <__subdf3+0x69c>
1000ee88:	010007c4 	movi	r4,31
1000ee8c:	2080e716 	blt	r4,r2,1000f22c <__subdf3+0x848>
1000ee90:	01000804 	movi	r4,32
1000ee94:	2089c83a 	sub	r4,r4,r2
1000ee98:	1914983a 	sll	r10,r3,r4
1000ee9c:	8890d83a 	srl	r8,r17,r2
1000eea0:	8908983a 	sll	r4,r17,r4
1000eea4:	1884d83a 	srl	r2,r3,r2
1000eea8:	5222b03a 	or	r17,r10,r8
1000eeac:	2006c03a 	cmpne	r3,r4,zero
1000eeb0:	88e2b03a 	or	r17,r17,r3
1000eeb4:	3463c83a 	sub	r17,r6,r17
1000eeb8:	2885c83a 	sub	r2,r5,r2
1000eebc:	344d803a 	cmpltu	r6,r6,r17
1000eec0:	1187c83a 	sub	r3,r2,r6
1000eec4:	4821883a 	mov	r16,r9
1000eec8:	3825883a 	mov	r18,r7
1000eecc:	003f2306 	br	1000eb5c <__alt_data_end+0xf800eb5c>
1000eed0:	24d0b03a 	or	r8,r4,r19
1000eed4:	40001b1e 	bne	r8,zero,1000ef44 <__subdf3+0x560>
1000eed8:	0005883a 	mov	r2,zero
1000eedc:	0009883a 	mov	r4,zero
1000eee0:	0021883a 	mov	r16,zero
1000eee4:	003f4906 	br	1000ec0c <__alt_data_end+0xf800ec0c>
1000eee8:	010007c4 	movi	r4,31
1000eeec:	20803a16 	blt	r4,r2,1000efd8 <__subdf3+0x5f4>
1000eef0:	01000804 	movi	r4,32
1000eef4:	2089c83a 	sub	r4,r4,r2
1000eef8:	2912983a 	sll	r9,r5,r4
1000eefc:	3090d83a 	srl	r8,r6,r2
1000ef00:	3108983a 	sll	r4,r6,r4
1000ef04:	2884d83a 	srl	r2,r5,r2
1000ef08:	4a12b03a 	or	r9,r9,r8
1000ef0c:	2008c03a 	cmpne	r4,r4,zero
1000ef10:	4912b03a 	or	r9,r9,r4
1000ef14:	003f4e06 	br	1000ec50 <__alt_data_end+0xf800ec50>
1000ef18:	1c48b03a 	or	r4,r3,r17
1000ef1c:	20003c26 	beq	r4,zero,1000f010 <__subdf3+0x62c>
1000ef20:	0084303a 	nor	r2,zero,r2
1000ef24:	1000381e 	bne	r2,zero,1000f008 <__subdf3+0x624>
1000ef28:	3463c83a 	sub	r17,r6,r17
1000ef2c:	28c5c83a 	sub	r2,r5,r3
1000ef30:	344d803a 	cmpltu	r6,r6,r17
1000ef34:	1187c83a 	sub	r3,r2,r6
1000ef38:	4821883a 	mov	r16,r9
1000ef3c:	3825883a 	mov	r18,r7
1000ef40:	003f0606 	br	1000eb5c <__alt_data_end+0xf800eb5c>
1000ef44:	2023883a 	mov	r17,r4
1000ef48:	003f0906 	br	1000eb70 <__alt_data_end+0xf800eb70>
1000ef4c:	0101ffc4 	movi	r4,2047
1000ef50:	813f3a1e 	bne	r16,r4,1000ec3c <__alt_data_end+0xf800ec3c>
1000ef54:	003ec406 	br	1000ea68 <__alt_data_end+0xf800ea68>
1000ef58:	0005883a 	mov	r2,zero
1000ef5c:	003fb106 	br	1000ee24 <__alt_data_end+0xf800ee24>
1000ef60:	0005883a 	mov	r2,zero
1000ef64:	003fbc06 	br	1000ee58 <__alt_data_end+0xf800ee58>
1000ef68:	1c44b03a 	or	r2,r3,r17
1000ef6c:	80008e1e 	bne	r16,zero,1000f1a8 <__subdf3+0x7c4>
1000ef70:	1000c826 	beq	r2,zero,1000f294 <__subdf3+0x8b0>
1000ef74:	2984b03a 	or	r2,r5,r6
1000ef78:	103ebb26 	beq	r2,zero,1000ea68 <__alt_data_end+0xf800ea68>
1000ef7c:	8989883a 	add	r4,r17,r6
1000ef80:	1945883a 	add	r2,r3,r5
1000ef84:	2447803a 	cmpltu	r3,r4,r17
1000ef88:	1887883a 	add	r3,r3,r2
1000ef8c:	1880202c 	andhi	r2,r3,128
1000ef90:	2023883a 	mov	r17,r4
1000ef94:	103f1626 	beq	r2,zero,1000ebf0 <__alt_data_end+0xf800ebf0>
1000ef98:	00bfe034 	movhi	r2,65408
1000ef9c:	10bfffc4 	addi	r2,r2,-1
1000efa0:	5021883a 	mov	r16,r10
1000efa4:	1886703a 	and	r3,r3,r2
1000efa8:	003eaf06 	br	1000ea68 <__alt_data_end+0xf800ea68>
1000efac:	3825883a 	mov	r18,r7
1000efb0:	003f0f06 	br	1000ebf0 <__alt_data_end+0xf800ebf0>
1000efb4:	1c44b03a 	or	r2,r3,r17
1000efb8:	8000251e 	bne	r16,zero,1000f050 <__subdf3+0x66c>
1000efbc:	1000661e 	bne	r2,zero,1000f158 <__subdf3+0x774>
1000efc0:	2990b03a 	or	r8,r5,r6
1000efc4:	40009626 	beq	r8,zero,1000f220 <__subdf3+0x83c>
1000efc8:	2807883a 	mov	r3,r5
1000efcc:	3023883a 	mov	r17,r6
1000efd0:	3825883a 	mov	r18,r7
1000efd4:	003ea406 	br	1000ea68 <__alt_data_end+0xf800ea68>
1000efd8:	127ff804 	addi	r9,r2,-32
1000efdc:	01000804 	movi	r4,32
1000efe0:	2a52d83a 	srl	r9,r5,r9
1000efe4:	11008c26 	beq	r2,r4,1000f218 <__subdf3+0x834>
1000efe8:	01001004 	movi	r4,64
1000efec:	2085c83a 	sub	r2,r4,r2
1000eff0:	2884983a 	sll	r2,r5,r2
1000eff4:	118cb03a 	or	r6,r2,r6
1000eff8:	300cc03a 	cmpne	r6,r6,zero
1000effc:	4992b03a 	or	r9,r9,r6
1000f000:	0005883a 	mov	r2,zero
1000f004:	003f1206 	br	1000ec50 <__alt_data_end+0xf800ec50>
1000f008:	0101ffc4 	movi	r4,2047
1000f00c:	493f9c1e 	bne	r9,r4,1000ee80 <__alt_data_end+0xf800ee80>
1000f010:	2807883a 	mov	r3,r5
1000f014:	3023883a 	mov	r17,r6
1000f018:	4821883a 	mov	r16,r9
1000f01c:	3825883a 	mov	r18,r7
1000f020:	003e9106 	br	1000ea68 <__alt_data_end+0xf800ea68>
1000f024:	80001f1e 	bne	r16,zero,1000f0a4 <__subdf3+0x6c0>
1000f028:	1c48b03a 	or	r4,r3,r17
1000f02c:	20005a26 	beq	r4,zero,1000f198 <__subdf3+0x7b4>
1000f030:	0084303a 	nor	r2,zero,r2
1000f034:	1000561e 	bne	r2,zero,1000f190 <__subdf3+0x7ac>
1000f038:	89a3883a 	add	r17,r17,r6
1000f03c:	1945883a 	add	r2,r3,r5
1000f040:	898d803a 	cmpltu	r6,r17,r6
1000f044:	3087883a 	add	r3,r6,r2
1000f048:	4821883a 	mov	r16,r9
1000f04c:	003f0506 	br	1000ec64 <__alt_data_end+0xf800ec64>
1000f050:	10002b1e 	bne	r2,zero,1000f100 <__subdf3+0x71c>
1000f054:	2984b03a 	or	r2,r5,r6
1000f058:	10008026 	beq	r2,zero,1000f25c <__subdf3+0x878>
1000f05c:	2807883a 	mov	r3,r5
1000f060:	3023883a 	mov	r17,r6
1000f064:	3825883a 	mov	r18,r7
1000f068:	0401ffc4 	movi	r16,2047
1000f06c:	003e7e06 	br	1000ea68 <__alt_data_end+0xf800ea68>
1000f070:	3809883a 	mov	r4,r7
1000f074:	0011883a 	mov	r8,zero
1000f078:	0005883a 	mov	r2,zero
1000f07c:	003ee306 	br	1000ec0c <__alt_data_end+0xf800ec0c>
1000f080:	1c62b03a 	or	r17,r3,r17
1000f084:	8822c03a 	cmpne	r17,r17,zero
1000f088:	0005883a 	mov	r2,zero
1000f08c:	003f8906 	br	1000eeb4 <__alt_data_end+0xf800eeb4>
1000f090:	3809883a 	mov	r4,r7
1000f094:	4821883a 	mov	r16,r9
1000f098:	0011883a 	mov	r8,zero
1000f09c:	0005883a 	mov	r2,zero
1000f0a0:	003eda06 	br	1000ec0c <__alt_data_end+0xf800ec0c>
1000f0a4:	0101ffc4 	movi	r4,2047
1000f0a8:	49003b26 	beq	r9,r4,1000f198 <__subdf3+0x7b4>
1000f0ac:	0085c83a 	sub	r2,zero,r2
1000f0b0:	18c02034 	orhi	r3,r3,128
1000f0b4:	01000e04 	movi	r4,56
1000f0b8:	20806e16 	blt	r4,r2,1000f274 <__subdf3+0x890>
1000f0bc:	010007c4 	movi	r4,31
1000f0c0:	20807716 	blt	r4,r2,1000f2a0 <__subdf3+0x8bc>
1000f0c4:	01000804 	movi	r4,32
1000f0c8:	2089c83a 	sub	r4,r4,r2
1000f0cc:	1914983a 	sll	r10,r3,r4
1000f0d0:	8890d83a 	srl	r8,r17,r2
1000f0d4:	8908983a 	sll	r4,r17,r4
1000f0d8:	1884d83a 	srl	r2,r3,r2
1000f0dc:	5222b03a 	or	r17,r10,r8
1000f0e0:	2006c03a 	cmpne	r3,r4,zero
1000f0e4:	88e2b03a 	or	r17,r17,r3
1000f0e8:	89a3883a 	add	r17,r17,r6
1000f0ec:	1145883a 	add	r2,r2,r5
1000f0f0:	898d803a 	cmpltu	r6,r17,r6
1000f0f4:	3087883a 	add	r3,r6,r2
1000f0f8:	4821883a 	mov	r16,r9
1000f0fc:	003ed906 	br	1000ec64 <__alt_data_end+0xf800ec64>
1000f100:	2984b03a 	or	r2,r5,r6
1000f104:	10004226 	beq	r2,zero,1000f210 <__subdf3+0x82c>
1000f108:	1808d0fa 	srli	r4,r3,3
1000f10c:	8822d0fa 	srli	r17,r17,3
1000f110:	1806977a 	slli	r3,r3,29
1000f114:	2080022c 	andhi	r2,r4,8
1000f118:	1c62b03a 	or	r17,r3,r17
1000f11c:	10000826 	beq	r2,zero,1000f140 <__subdf3+0x75c>
1000f120:	2812d0fa 	srli	r9,r5,3
1000f124:	4880022c 	andhi	r2,r9,8
1000f128:	1000051e 	bne	r2,zero,1000f140 <__subdf3+0x75c>
1000f12c:	300cd0fa 	srli	r6,r6,3
1000f130:	2804977a 	slli	r2,r5,29
1000f134:	4809883a 	mov	r4,r9
1000f138:	3825883a 	mov	r18,r7
1000f13c:	11a2b03a 	or	r17,r2,r6
1000f140:	8806d77a 	srli	r3,r17,29
1000f144:	200890fa 	slli	r4,r4,3
1000f148:	882290fa 	slli	r17,r17,3
1000f14c:	0401ffc4 	movi	r16,2047
1000f150:	1906b03a 	or	r3,r3,r4
1000f154:	003e4406 	br	1000ea68 <__alt_data_end+0xf800ea68>
1000f158:	2984b03a 	or	r2,r5,r6
1000f15c:	103e4226 	beq	r2,zero,1000ea68 <__alt_data_end+0xf800ea68>
1000f160:	8989c83a 	sub	r4,r17,r6
1000f164:	8911803a 	cmpltu	r8,r17,r4
1000f168:	1945c83a 	sub	r2,r3,r5
1000f16c:	1205c83a 	sub	r2,r2,r8
1000f170:	1200202c 	andhi	r8,r2,128
1000f174:	403e9a26 	beq	r8,zero,1000ebe0 <__alt_data_end+0xf800ebe0>
1000f178:	3463c83a 	sub	r17,r6,r17
1000f17c:	28c5c83a 	sub	r2,r5,r3
1000f180:	344d803a 	cmpltu	r6,r6,r17
1000f184:	1187c83a 	sub	r3,r2,r6
1000f188:	3825883a 	mov	r18,r7
1000f18c:	003e3606 	br	1000ea68 <__alt_data_end+0xf800ea68>
1000f190:	0101ffc4 	movi	r4,2047
1000f194:	493fc71e 	bne	r9,r4,1000f0b4 <__alt_data_end+0xf800f0b4>
1000f198:	2807883a 	mov	r3,r5
1000f19c:	3023883a 	mov	r17,r6
1000f1a0:	4821883a 	mov	r16,r9
1000f1a4:	003e3006 	br	1000ea68 <__alt_data_end+0xf800ea68>
1000f1a8:	10003626 	beq	r2,zero,1000f284 <__subdf3+0x8a0>
1000f1ac:	2984b03a 	or	r2,r5,r6
1000f1b0:	10001726 	beq	r2,zero,1000f210 <__subdf3+0x82c>
1000f1b4:	1808d0fa 	srli	r4,r3,3
1000f1b8:	8822d0fa 	srli	r17,r17,3
1000f1bc:	1806977a 	slli	r3,r3,29
1000f1c0:	2080022c 	andhi	r2,r4,8
1000f1c4:	1c62b03a 	or	r17,r3,r17
1000f1c8:	10000726 	beq	r2,zero,1000f1e8 <__subdf3+0x804>
1000f1cc:	2812d0fa 	srli	r9,r5,3
1000f1d0:	4880022c 	andhi	r2,r9,8
1000f1d4:	1000041e 	bne	r2,zero,1000f1e8 <__subdf3+0x804>
1000f1d8:	300cd0fa 	srli	r6,r6,3
1000f1dc:	2804977a 	slli	r2,r5,29
1000f1e0:	4809883a 	mov	r4,r9
1000f1e4:	11a2b03a 	or	r17,r2,r6
1000f1e8:	8806d77a 	srli	r3,r17,29
1000f1ec:	200890fa 	slli	r4,r4,3
1000f1f0:	882290fa 	slli	r17,r17,3
1000f1f4:	3825883a 	mov	r18,r7
1000f1f8:	1906b03a 	or	r3,r3,r4
1000f1fc:	0401ffc4 	movi	r16,2047
1000f200:	003e1906 	br	1000ea68 <__alt_data_end+0xf800ea68>
1000f204:	000b883a 	mov	r5,zero
1000f208:	0005883a 	mov	r2,zero
1000f20c:	003e2e06 	br	1000eac8 <__alt_data_end+0xf800eac8>
1000f210:	0401ffc4 	movi	r16,2047
1000f214:	003e1406 	br	1000ea68 <__alt_data_end+0xf800ea68>
1000f218:	0005883a 	mov	r2,zero
1000f21c:	003f7506 	br	1000eff4 <__alt_data_end+0xf800eff4>
1000f220:	0005883a 	mov	r2,zero
1000f224:	0009883a 	mov	r4,zero
1000f228:	003e7806 	br	1000ec0c <__alt_data_end+0xf800ec0c>
1000f22c:	123ff804 	addi	r8,r2,-32
1000f230:	01000804 	movi	r4,32
1000f234:	1a10d83a 	srl	r8,r3,r8
1000f238:	11002526 	beq	r2,r4,1000f2d0 <__subdf3+0x8ec>
1000f23c:	01001004 	movi	r4,64
1000f240:	2085c83a 	sub	r2,r4,r2
1000f244:	1884983a 	sll	r2,r3,r2
1000f248:	1444b03a 	or	r2,r2,r17
1000f24c:	1004c03a 	cmpne	r2,r2,zero
1000f250:	40a2b03a 	or	r17,r8,r2
1000f254:	0005883a 	mov	r2,zero
1000f258:	003f1606 	br	1000eeb4 <__alt_data_end+0xf800eeb4>
1000f25c:	02000434 	movhi	r8,16
1000f260:	0009883a 	mov	r4,zero
1000f264:	423fffc4 	addi	r8,r8,-1
1000f268:	00bfffc4 	movi	r2,-1
1000f26c:	0401ffc4 	movi	r16,2047
1000f270:	003e6606 	br	1000ec0c <__alt_data_end+0xf800ec0c>
1000f274:	1c62b03a 	or	r17,r3,r17
1000f278:	8822c03a 	cmpne	r17,r17,zero
1000f27c:	0005883a 	mov	r2,zero
1000f280:	003f9906 	br	1000f0e8 <__alt_data_end+0xf800f0e8>
1000f284:	2807883a 	mov	r3,r5
1000f288:	3023883a 	mov	r17,r6
1000f28c:	0401ffc4 	movi	r16,2047
1000f290:	003df506 	br	1000ea68 <__alt_data_end+0xf800ea68>
1000f294:	2807883a 	mov	r3,r5
1000f298:	3023883a 	mov	r17,r6
1000f29c:	003df206 	br	1000ea68 <__alt_data_end+0xf800ea68>
1000f2a0:	123ff804 	addi	r8,r2,-32
1000f2a4:	01000804 	movi	r4,32
1000f2a8:	1a10d83a 	srl	r8,r3,r8
1000f2ac:	11000a26 	beq	r2,r4,1000f2d8 <__subdf3+0x8f4>
1000f2b0:	01001004 	movi	r4,64
1000f2b4:	2085c83a 	sub	r2,r4,r2
1000f2b8:	1884983a 	sll	r2,r3,r2
1000f2bc:	1444b03a 	or	r2,r2,r17
1000f2c0:	1004c03a 	cmpne	r2,r2,zero
1000f2c4:	40a2b03a 	or	r17,r8,r2
1000f2c8:	0005883a 	mov	r2,zero
1000f2cc:	003f8606 	br	1000f0e8 <__alt_data_end+0xf800f0e8>
1000f2d0:	0005883a 	mov	r2,zero
1000f2d4:	003fdc06 	br	1000f248 <__alt_data_end+0xf800f248>
1000f2d8:	0005883a 	mov	r2,zero
1000f2dc:	003ff706 	br	1000f2bc <__alt_data_end+0xf800f2bc>

1000f2e0 <__fixdfsi>:
1000f2e0:	280cd53a 	srli	r6,r5,20
1000f2e4:	00c00434 	movhi	r3,16
1000f2e8:	18ffffc4 	addi	r3,r3,-1
1000f2ec:	3181ffcc 	andi	r6,r6,2047
1000f2f0:	01c0ff84 	movi	r7,1022
1000f2f4:	28c6703a 	and	r3,r5,r3
1000f2f8:	280ad7fa 	srli	r5,r5,31
1000f2fc:	3980120e 	bge	r7,r6,1000f348 <__fixdfsi+0x68>
1000f300:	00810744 	movi	r2,1053
1000f304:	11800c16 	blt	r2,r6,1000f338 <__fixdfsi+0x58>
1000f308:	00810cc4 	movi	r2,1075
1000f30c:	1185c83a 	sub	r2,r2,r6
1000f310:	01c007c4 	movi	r7,31
1000f314:	18c00434 	orhi	r3,r3,16
1000f318:	38800d16 	blt	r7,r2,1000f350 <__fixdfsi+0x70>
1000f31c:	31befb44 	addi	r6,r6,-1043
1000f320:	2084d83a 	srl	r2,r4,r2
1000f324:	1986983a 	sll	r3,r3,r6
1000f328:	1884b03a 	or	r2,r3,r2
1000f32c:	28000726 	beq	r5,zero,1000f34c <__fixdfsi+0x6c>
1000f330:	0085c83a 	sub	r2,zero,r2
1000f334:	f800283a 	ret
1000f338:	00a00034 	movhi	r2,32768
1000f33c:	10bfffc4 	addi	r2,r2,-1
1000f340:	2885883a 	add	r2,r5,r2
1000f344:	f800283a 	ret
1000f348:	0005883a 	mov	r2,zero
1000f34c:	f800283a 	ret
1000f350:	008104c4 	movi	r2,1043
1000f354:	1185c83a 	sub	r2,r2,r6
1000f358:	1884d83a 	srl	r2,r3,r2
1000f35c:	003ff306 	br	1000f32c <__alt_data_end+0xf800f32c>

1000f360 <__floatsidf>:
1000f360:	defffd04 	addi	sp,sp,-12
1000f364:	dfc00215 	stw	ra,8(sp)
1000f368:	dc400115 	stw	r17,4(sp)
1000f36c:	dc000015 	stw	r16,0(sp)
1000f370:	20002b26 	beq	r4,zero,1000f420 <__floatsidf+0xc0>
1000f374:	2023883a 	mov	r17,r4
1000f378:	2020d7fa 	srli	r16,r4,31
1000f37c:	20002d16 	blt	r4,zero,1000f434 <__floatsidf+0xd4>
1000f380:	8809883a 	mov	r4,r17
1000f384:	000f4e40 	call	1000f4e4 <__clzsi2>
1000f388:	01410784 	movi	r5,1054
1000f38c:	288bc83a 	sub	r5,r5,r2
1000f390:	01010cc4 	movi	r4,1075
1000f394:	2149c83a 	sub	r4,r4,r5
1000f398:	00c007c4 	movi	r3,31
1000f39c:	1900160e 	bge	r3,r4,1000f3f8 <__floatsidf+0x98>
1000f3a0:	00c104c4 	movi	r3,1043
1000f3a4:	1947c83a 	sub	r3,r3,r5
1000f3a8:	88c6983a 	sll	r3,r17,r3
1000f3ac:	00800434 	movhi	r2,16
1000f3b0:	10bfffc4 	addi	r2,r2,-1
1000f3b4:	1886703a 	and	r3,r3,r2
1000f3b8:	2941ffcc 	andi	r5,r5,2047
1000f3bc:	800d883a 	mov	r6,r16
1000f3c0:	0005883a 	mov	r2,zero
1000f3c4:	280a953a 	slli	r5,r5,20
1000f3c8:	31803fcc 	andi	r6,r6,255
1000f3cc:	01000434 	movhi	r4,16
1000f3d0:	300c97fa 	slli	r6,r6,31
1000f3d4:	213fffc4 	addi	r4,r4,-1
1000f3d8:	1906703a 	and	r3,r3,r4
1000f3dc:	1946b03a 	or	r3,r3,r5
1000f3e0:	1986b03a 	or	r3,r3,r6
1000f3e4:	dfc00217 	ldw	ra,8(sp)
1000f3e8:	dc400117 	ldw	r17,4(sp)
1000f3ec:	dc000017 	ldw	r16,0(sp)
1000f3f0:	dec00304 	addi	sp,sp,12
1000f3f4:	f800283a 	ret
1000f3f8:	00c002c4 	movi	r3,11
1000f3fc:	1887c83a 	sub	r3,r3,r2
1000f400:	88c6d83a 	srl	r3,r17,r3
1000f404:	8904983a 	sll	r2,r17,r4
1000f408:	01000434 	movhi	r4,16
1000f40c:	213fffc4 	addi	r4,r4,-1
1000f410:	2941ffcc 	andi	r5,r5,2047
1000f414:	1906703a 	and	r3,r3,r4
1000f418:	800d883a 	mov	r6,r16
1000f41c:	003fe906 	br	1000f3c4 <__alt_data_end+0xf800f3c4>
1000f420:	000d883a 	mov	r6,zero
1000f424:	000b883a 	mov	r5,zero
1000f428:	0007883a 	mov	r3,zero
1000f42c:	0005883a 	mov	r2,zero
1000f430:	003fe406 	br	1000f3c4 <__alt_data_end+0xf800f3c4>
1000f434:	0123c83a 	sub	r17,zero,r4
1000f438:	003fd106 	br	1000f380 <__alt_data_end+0xf800f380>

1000f43c <__floatunsidf>:
1000f43c:	defffe04 	addi	sp,sp,-8
1000f440:	dc000015 	stw	r16,0(sp)
1000f444:	dfc00115 	stw	ra,4(sp)
1000f448:	2021883a 	mov	r16,r4
1000f44c:	20002226 	beq	r4,zero,1000f4d8 <__floatunsidf+0x9c>
1000f450:	000f4e40 	call	1000f4e4 <__clzsi2>
1000f454:	01010784 	movi	r4,1054
1000f458:	2089c83a 	sub	r4,r4,r2
1000f45c:	01810cc4 	movi	r6,1075
1000f460:	310dc83a 	sub	r6,r6,r4
1000f464:	00c007c4 	movi	r3,31
1000f468:	1980120e 	bge	r3,r6,1000f4b4 <__floatunsidf+0x78>
1000f46c:	00c104c4 	movi	r3,1043
1000f470:	1907c83a 	sub	r3,r3,r4
1000f474:	80ca983a 	sll	r5,r16,r3
1000f478:	00800434 	movhi	r2,16
1000f47c:	10bfffc4 	addi	r2,r2,-1
1000f480:	2101ffcc 	andi	r4,r4,2047
1000f484:	0021883a 	mov	r16,zero
1000f488:	288a703a 	and	r5,r5,r2
1000f48c:	2008953a 	slli	r4,r4,20
1000f490:	00c00434 	movhi	r3,16
1000f494:	18ffffc4 	addi	r3,r3,-1
1000f498:	28c6703a 	and	r3,r5,r3
1000f49c:	8005883a 	mov	r2,r16
1000f4a0:	1906b03a 	or	r3,r3,r4
1000f4a4:	dfc00117 	ldw	ra,4(sp)
1000f4a8:	dc000017 	ldw	r16,0(sp)
1000f4ac:	dec00204 	addi	sp,sp,8
1000f4b0:	f800283a 	ret
1000f4b4:	00c002c4 	movi	r3,11
1000f4b8:	188bc83a 	sub	r5,r3,r2
1000f4bc:	814ad83a 	srl	r5,r16,r5
1000f4c0:	00c00434 	movhi	r3,16
1000f4c4:	18ffffc4 	addi	r3,r3,-1
1000f4c8:	81a0983a 	sll	r16,r16,r6
1000f4cc:	2101ffcc 	andi	r4,r4,2047
1000f4d0:	28ca703a 	and	r5,r5,r3
1000f4d4:	003fed06 	br	1000f48c <__alt_data_end+0xf800f48c>
1000f4d8:	0009883a 	mov	r4,zero
1000f4dc:	000b883a 	mov	r5,zero
1000f4e0:	003fea06 	br	1000f48c <__alt_data_end+0xf800f48c>

1000f4e4 <__clzsi2>:
1000f4e4:	00bfffd4 	movui	r2,65535
1000f4e8:	11000536 	bltu	r2,r4,1000f500 <__clzsi2+0x1c>
1000f4ec:	00803fc4 	movi	r2,255
1000f4f0:	11000f36 	bltu	r2,r4,1000f530 <__clzsi2+0x4c>
1000f4f4:	00800804 	movi	r2,32
1000f4f8:	0007883a 	mov	r3,zero
1000f4fc:	00000506 	br	1000f514 <__clzsi2+0x30>
1000f500:	00804034 	movhi	r2,256
1000f504:	10bfffc4 	addi	r2,r2,-1
1000f508:	11000c2e 	bgeu	r2,r4,1000f53c <__clzsi2+0x58>
1000f50c:	00800204 	movi	r2,8
1000f510:	00c00604 	movi	r3,24
1000f514:	20c8d83a 	srl	r4,r4,r3
1000f518:	00c40074 	movhi	r3,4097
1000f51c:	18ca3904 	addi	r3,r3,10468
1000f520:	1909883a 	add	r4,r3,r4
1000f524:	20c00003 	ldbu	r3,0(r4)
1000f528:	10c5c83a 	sub	r2,r2,r3
1000f52c:	f800283a 	ret
1000f530:	00800604 	movi	r2,24
1000f534:	00c00204 	movi	r3,8
1000f538:	003ff606 	br	1000f514 <__alt_data_end+0xf800f514>
1000f53c:	00800404 	movi	r2,16
1000f540:	1007883a 	mov	r3,r2
1000f544:	003ff306 	br	1000f514 <__alt_data_end+0xf800f514>

1000f548 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f548:	defffe04 	addi	sp,sp,-8
1000f54c:	dfc00115 	stw	ra,4(sp)
1000f550:	df000015 	stw	fp,0(sp)
1000f554:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f558:	d0a00b17 	ldw	r2,-32724(gp)
1000f55c:	10000326 	beq	r2,zero,1000f56c <alt_get_errno+0x24>
1000f560:	d0a00b17 	ldw	r2,-32724(gp)
1000f564:	103ee83a 	callr	r2
1000f568:	00000106 	br	1000f570 <alt_get_errno+0x28>
1000f56c:	d0a6cc04 	addi	r2,gp,-25808
}
1000f570:	e037883a 	mov	sp,fp
1000f574:	dfc00117 	ldw	ra,4(sp)
1000f578:	df000017 	ldw	fp,0(sp)
1000f57c:	dec00204 	addi	sp,sp,8
1000f580:	f800283a 	ret

1000f584 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000f584:	defffb04 	addi	sp,sp,-20
1000f588:	dfc00415 	stw	ra,16(sp)
1000f58c:	df000315 	stw	fp,12(sp)
1000f590:	df000304 	addi	fp,sp,12
1000f594:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000f598:	e0bfff17 	ldw	r2,-4(fp)
1000f59c:	10000816 	blt	r2,zero,1000f5c0 <close+0x3c>
1000f5a0:	01400304 	movi	r5,12
1000f5a4:	e13fff17 	ldw	r4,-4(fp)
1000f5a8:	000cc7c0 	call	1000cc7c <__mulsi3>
1000f5ac:	1007883a 	mov	r3,r2
1000f5b0:	00840074 	movhi	r2,4097
1000f5b4:	108cb904 	addi	r2,r2,13028
1000f5b8:	1885883a 	add	r2,r3,r2
1000f5bc:	00000106 	br	1000f5c4 <close+0x40>
1000f5c0:	0005883a 	mov	r2,zero
1000f5c4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000f5c8:	e0bffd17 	ldw	r2,-12(fp)
1000f5cc:	10001926 	beq	r2,zero,1000f634 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000f5d0:	e0bffd17 	ldw	r2,-12(fp)
1000f5d4:	10800017 	ldw	r2,0(r2)
1000f5d8:	10800417 	ldw	r2,16(r2)
1000f5dc:	10000626 	beq	r2,zero,1000f5f8 <close+0x74>
1000f5e0:	e0bffd17 	ldw	r2,-12(fp)
1000f5e4:	10800017 	ldw	r2,0(r2)
1000f5e8:	10800417 	ldw	r2,16(r2)
1000f5ec:	e13ffd17 	ldw	r4,-12(fp)
1000f5f0:	103ee83a 	callr	r2
1000f5f4:	00000106 	br	1000f5fc <close+0x78>
1000f5f8:	0005883a 	mov	r2,zero
1000f5fc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000f600:	e13fff17 	ldw	r4,-4(fp)
1000f604:	000fe600 	call	1000fe60 <alt_release_fd>
    if (rval < 0)
1000f608:	e0bffe17 	ldw	r2,-8(fp)
1000f60c:	1000070e 	bge	r2,zero,1000f62c <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000f610:	000f5480 	call	1000f548 <alt_get_errno>
1000f614:	1007883a 	mov	r3,r2
1000f618:	e0bffe17 	ldw	r2,-8(fp)
1000f61c:	0085c83a 	sub	r2,zero,r2
1000f620:	18800015 	stw	r2,0(r3)
      return -1;
1000f624:	00bfffc4 	movi	r2,-1
1000f628:	00000706 	br	1000f648 <close+0xc4>
    }
    return 0;
1000f62c:	0005883a 	mov	r2,zero
1000f630:	00000506 	br	1000f648 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f634:	000f5480 	call	1000f548 <alt_get_errno>
1000f638:	1007883a 	mov	r3,r2
1000f63c:	00801444 	movi	r2,81
1000f640:	18800015 	stw	r2,0(r3)
    return -1;
1000f644:	00bfffc4 	movi	r2,-1
  }
}
1000f648:	e037883a 	mov	sp,fp
1000f64c:	dfc00117 	ldw	ra,4(sp)
1000f650:	df000017 	ldw	fp,0(sp)
1000f654:	dec00204 	addi	sp,sp,8
1000f658:	f800283a 	ret

1000f65c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000f65c:	defffc04 	addi	sp,sp,-16
1000f660:	df000315 	stw	fp,12(sp)
1000f664:	df000304 	addi	fp,sp,12
1000f668:	e13ffd15 	stw	r4,-12(fp)
1000f66c:	e17ffe15 	stw	r5,-8(fp)
1000f670:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000f674:	e0bfff17 	ldw	r2,-4(fp)
}
1000f678:	e037883a 	mov	sp,fp
1000f67c:	df000017 	ldw	fp,0(sp)
1000f680:	dec00104 	addi	sp,sp,4
1000f684:	f800283a 	ret

1000f688 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f688:	defffe04 	addi	sp,sp,-8
1000f68c:	dfc00115 	stw	ra,4(sp)
1000f690:	df000015 	stw	fp,0(sp)
1000f694:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f698:	d0a00b17 	ldw	r2,-32724(gp)
1000f69c:	10000326 	beq	r2,zero,1000f6ac <alt_get_errno+0x24>
1000f6a0:	d0a00b17 	ldw	r2,-32724(gp)
1000f6a4:	103ee83a 	callr	r2
1000f6a8:	00000106 	br	1000f6b0 <alt_get_errno+0x28>
1000f6ac:	d0a6cc04 	addi	r2,gp,-25808
}
1000f6b0:	e037883a 	mov	sp,fp
1000f6b4:	dfc00117 	ldw	ra,4(sp)
1000f6b8:	df000017 	ldw	fp,0(sp)
1000f6bc:	dec00204 	addi	sp,sp,8
1000f6c0:	f800283a 	ret

1000f6c4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000f6c4:	defffb04 	addi	sp,sp,-20
1000f6c8:	dfc00415 	stw	ra,16(sp)
1000f6cc:	df000315 	stw	fp,12(sp)
1000f6d0:	df000304 	addi	fp,sp,12
1000f6d4:	e13ffe15 	stw	r4,-8(fp)
1000f6d8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f6dc:	e0bffe17 	ldw	r2,-8(fp)
1000f6e0:	10000816 	blt	r2,zero,1000f704 <fstat+0x40>
1000f6e4:	01400304 	movi	r5,12
1000f6e8:	e13ffe17 	ldw	r4,-8(fp)
1000f6ec:	000cc7c0 	call	1000cc7c <__mulsi3>
1000f6f0:	1007883a 	mov	r3,r2
1000f6f4:	00840074 	movhi	r2,4097
1000f6f8:	108cb904 	addi	r2,r2,13028
1000f6fc:	1885883a 	add	r2,r3,r2
1000f700:	00000106 	br	1000f708 <fstat+0x44>
1000f704:	0005883a 	mov	r2,zero
1000f708:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000f70c:	e0bffd17 	ldw	r2,-12(fp)
1000f710:	10001026 	beq	r2,zero,1000f754 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000f714:	e0bffd17 	ldw	r2,-12(fp)
1000f718:	10800017 	ldw	r2,0(r2)
1000f71c:	10800817 	ldw	r2,32(r2)
1000f720:	10000726 	beq	r2,zero,1000f740 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000f724:	e0bffd17 	ldw	r2,-12(fp)
1000f728:	10800017 	ldw	r2,0(r2)
1000f72c:	10800817 	ldw	r2,32(r2)
1000f730:	e17fff17 	ldw	r5,-4(fp)
1000f734:	e13ffd17 	ldw	r4,-12(fp)
1000f738:	103ee83a 	callr	r2
1000f73c:	00000a06 	br	1000f768 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000f740:	e0bfff17 	ldw	r2,-4(fp)
1000f744:	00c80004 	movi	r3,8192
1000f748:	10c00115 	stw	r3,4(r2)
      return 0;
1000f74c:	0005883a 	mov	r2,zero
1000f750:	00000506 	br	1000f768 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f754:	000f6880 	call	1000f688 <alt_get_errno>
1000f758:	1007883a 	mov	r3,r2
1000f75c:	00801444 	movi	r2,81
1000f760:	18800015 	stw	r2,0(r3)
    return -1;
1000f764:	00bfffc4 	movi	r2,-1
  }
}
1000f768:	e037883a 	mov	sp,fp
1000f76c:	dfc00117 	ldw	ra,4(sp)
1000f770:	df000017 	ldw	fp,0(sp)
1000f774:	dec00204 	addi	sp,sp,8
1000f778:	f800283a 	ret

1000f77c <gettimeofday>:
1000f77c:	defff404 	addi	sp,sp,-48
1000f780:	dfc00b15 	stw	ra,44(sp)
1000f784:	df000a15 	stw	fp,40(sp)
1000f788:	dd000915 	stw	r20,36(sp)
1000f78c:	dcc00815 	stw	r19,32(sp)
1000f790:	dc800715 	stw	r18,28(sp)
1000f794:	dc400615 	stw	r17,24(sp)
1000f798:	dc000515 	stw	r16,20(sp)
1000f79c:	df000a04 	addi	fp,sp,40
1000f7a0:	e13ff915 	stw	r4,-28(fp)
1000f7a4:	e17ffa15 	stw	r5,-24(fp)
1000f7a8:	e0bffa17 	ldw	r2,-24(fp)
1000f7ac:	e0bff615 	stw	r2,-40(fp)
1000f7b0:	d0a6db17 	ldw	r2,-25748(gp)
1000f7b4:	e0bff715 	stw	r2,-36(fp)
1000f7b8:	d0a6da17 	ldw	r2,-25752(gp)
1000f7bc:	e0bff815 	stw	r2,-32(fp)
1000f7c0:	e0bff817 	ldw	r2,-32(fp)
1000f7c4:	10005f26 	beq	r2,zero,1000f944 <gettimeofday+0x1c8>
1000f7c8:	d0a6d517 	ldw	r2,-25772(gp)
1000f7cc:	1029883a 	mov	r20,r2
1000f7d0:	e17ff817 	ldw	r5,-32(fp)
1000f7d4:	e13ff717 	ldw	r4,-36(fp)
1000f7d8:	00024cc0 	call	100024cc <__udivsi3>
1000f7dc:	a085883a 	add	r2,r20,r2
1000f7e0:	1007883a 	mov	r3,r2
1000f7e4:	e0bff917 	ldw	r2,-28(fp)
1000f7e8:	10c00015 	stw	r3,0(r2)
1000f7ec:	d0a6d617 	ldw	r2,-25768(gp)
1000f7f0:	1029883a 	mov	r20,r2
1000f7f4:	e0bff717 	ldw	r2,-36(fp)
1000f7f8:	1021883a 	mov	r16,r2
1000f7fc:	0023883a 	mov	r17,zero
1000f800:	e17ff817 	ldw	r5,-32(fp)
1000f804:	010003f4 	movhi	r4,15
1000f808:	21109004 	addi	r4,r4,16960
1000f80c:	00024cc0 	call	100024cc <__udivsi3>
1000f810:	1025883a 	mov	r18,r2
1000f814:	0027883a 	mov	r19,zero
1000f818:	900d883a 	mov	r6,r18
1000f81c:	980f883a 	mov	r7,r19
1000f820:	8009883a 	mov	r4,r16
1000f824:	880b883a 	mov	r5,r17
1000f828:	000bfb00 	call	1000bfb0 <__muldi3>
1000f82c:	1009883a 	mov	r4,r2
1000f830:	180b883a 	mov	r5,r3
1000f834:	2005883a 	mov	r2,r4
1000f838:	2807883a 	mov	r3,r5
1000f83c:	018003f4 	movhi	r6,15
1000f840:	31909004 	addi	r6,r6,16960
1000f844:	000f883a 	mov	r7,zero
1000f848:	1009883a 	mov	r4,r2
1000f84c:	180b883a 	mov	r5,r3
1000f850:	000c6b80 	call	1000c6b8 <__umoddi3>
1000f854:	1009883a 	mov	r4,r2
1000f858:	180b883a 	mov	r5,r3
1000f85c:	2005883a 	mov	r2,r4
1000f860:	2807883a 	mov	r3,r5
1000f864:	a085883a 	add	r2,r20,r2
1000f868:	1007883a 	mov	r3,r2
1000f86c:	e0bff917 	ldw	r2,-28(fp)
1000f870:	10c00115 	stw	r3,4(r2)
1000f874:	00001406 	br	1000f8c8 <gettimeofday+0x14c>
1000f878:	e0bff917 	ldw	r2,-28(fp)
1000f87c:	10800017 	ldw	r2,0(r2)
1000f880:	00800516 	blt	zero,r2,1000f898 <gettimeofday+0x11c>
1000f884:	e0bff917 	ldw	r2,-28(fp)
1000f888:	10000015 	stw	zero,0(r2)
1000f88c:	e0bff917 	ldw	r2,-28(fp)
1000f890:	10000115 	stw	zero,4(r2)
1000f894:	00000f06 	br	1000f8d4 <gettimeofday+0x158>
1000f898:	e0bff917 	ldw	r2,-28(fp)
1000f89c:	10800017 	ldw	r2,0(r2)
1000f8a0:	10ffffc4 	addi	r3,r2,-1
1000f8a4:	e0bff917 	ldw	r2,-28(fp)
1000f8a8:	10c00015 	stw	r3,0(r2)
1000f8ac:	e0bff917 	ldw	r2,-28(fp)
1000f8b0:	10c00117 	ldw	r3,4(r2)
1000f8b4:	008003f4 	movhi	r2,15
1000f8b8:	10909004 	addi	r2,r2,16960
1000f8bc:	1887883a 	add	r3,r3,r2
1000f8c0:	e0bff917 	ldw	r2,-28(fp)
1000f8c4:	10c00115 	stw	r3,4(r2)
1000f8c8:	e0bff917 	ldw	r2,-28(fp)
1000f8cc:	10800117 	ldw	r2,4(r2)
1000f8d0:	103fe916 	blt	r2,zero,1000f878 <__alt_data_end+0xf800f878>
1000f8d4:	00000c06 	br	1000f908 <gettimeofday+0x18c>
1000f8d8:	e0bff917 	ldw	r2,-28(fp)
1000f8dc:	10800017 	ldw	r2,0(r2)
1000f8e0:	10c00044 	addi	r3,r2,1
1000f8e4:	e0bff917 	ldw	r2,-28(fp)
1000f8e8:	10c00015 	stw	r3,0(r2)
1000f8ec:	e0bff917 	ldw	r2,-28(fp)
1000f8f0:	10c00117 	ldw	r3,4(r2)
1000f8f4:	00bffc74 	movhi	r2,65521
1000f8f8:	10af7004 	addi	r2,r2,-16960
1000f8fc:	1887883a 	add	r3,r3,r2
1000f900:	e0bff917 	ldw	r2,-28(fp)
1000f904:	10c00115 	stw	r3,4(r2)
1000f908:	e0bff917 	ldw	r2,-28(fp)
1000f90c:	10c00117 	ldw	r3,4(r2)
1000f910:	008003f4 	movhi	r2,15
1000f914:	10908fc4 	addi	r2,r2,16959
1000f918:	10ffef16 	blt	r2,r3,1000f8d8 <__alt_data_end+0xf800f8d8>
1000f91c:	e0bff617 	ldw	r2,-40(fp)
1000f920:	10000626 	beq	r2,zero,1000f93c <gettimeofday+0x1c0>
1000f924:	d0e6d317 	ldw	r3,-25780(gp)
1000f928:	e0bff617 	ldw	r2,-40(fp)
1000f92c:	10c00015 	stw	r3,0(r2)
1000f930:	d0e6d417 	ldw	r3,-25776(gp)
1000f934:	e0bff617 	ldw	r2,-40(fp)
1000f938:	10c00115 	stw	r3,4(r2)
1000f93c:	0005883a 	mov	r2,zero
1000f940:	00000106 	br	1000f948 <gettimeofday+0x1cc>
1000f944:	00bfde84 	movi	r2,-134
1000f948:	e6fffb04 	addi	sp,fp,-20
1000f94c:	dfc00617 	ldw	ra,24(sp)
1000f950:	df000517 	ldw	fp,20(sp)
1000f954:	dd000417 	ldw	r20,16(sp)
1000f958:	dcc00317 	ldw	r19,12(sp)
1000f95c:	dc800217 	ldw	r18,8(sp)
1000f960:	dc400117 	ldw	r17,4(sp)
1000f964:	dc000017 	ldw	r16,0(sp)
1000f968:	dec00704 	addi	sp,sp,28
1000f96c:	f800283a 	ret

1000f970 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f970:	defffe04 	addi	sp,sp,-8
1000f974:	dfc00115 	stw	ra,4(sp)
1000f978:	df000015 	stw	fp,0(sp)
1000f97c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f980:	d0a00b17 	ldw	r2,-32724(gp)
1000f984:	10000326 	beq	r2,zero,1000f994 <alt_get_errno+0x24>
1000f988:	d0a00b17 	ldw	r2,-32724(gp)
1000f98c:	103ee83a 	callr	r2
1000f990:	00000106 	br	1000f998 <alt_get_errno+0x28>
1000f994:	d0a6cc04 	addi	r2,gp,-25808
}
1000f998:	e037883a 	mov	sp,fp
1000f99c:	dfc00117 	ldw	ra,4(sp)
1000f9a0:	df000017 	ldw	fp,0(sp)
1000f9a4:	dec00204 	addi	sp,sp,8
1000f9a8:	f800283a 	ret

1000f9ac <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000f9ac:	deffed04 	addi	sp,sp,-76
1000f9b0:	dfc01215 	stw	ra,72(sp)
1000f9b4:	df001115 	stw	fp,68(sp)
1000f9b8:	df001104 	addi	fp,sp,68
1000f9bc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f9c0:	e0bfff17 	ldw	r2,-4(fp)
1000f9c4:	10000816 	blt	r2,zero,1000f9e8 <isatty+0x3c>
1000f9c8:	01400304 	movi	r5,12
1000f9cc:	e13fff17 	ldw	r4,-4(fp)
1000f9d0:	000cc7c0 	call	1000cc7c <__mulsi3>
1000f9d4:	1007883a 	mov	r3,r2
1000f9d8:	00840074 	movhi	r2,4097
1000f9dc:	108cb904 	addi	r2,r2,13028
1000f9e0:	1885883a 	add	r2,r3,r2
1000f9e4:	00000106 	br	1000f9ec <isatty+0x40>
1000f9e8:	0005883a 	mov	r2,zero
1000f9ec:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000f9f0:	e0bfef17 	ldw	r2,-68(fp)
1000f9f4:	10000e26 	beq	r2,zero,1000fa30 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000f9f8:	e0bfef17 	ldw	r2,-68(fp)
1000f9fc:	10800017 	ldw	r2,0(r2)
1000fa00:	10800817 	ldw	r2,32(r2)
1000fa04:	1000021e 	bne	r2,zero,1000fa10 <isatty+0x64>
    {
      return 1;
1000fa08:	00800044 	movi	r2,1
1000fa0c:	00000d06 	br	1000fa44 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000fa10:	e0bff004 	addi	r2,fp,-64
1000fa14:	100b883a 	mov	r5,r2
1000fa18:	e13fff17 	ldw	r4,-4(fp)
1000fa1c:	000f6c40 	call	1000f6c4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000fa20:	e0bff117 	ldw	r2,-60(fp)
1000fa24:	10880020 	cmpeqi	r2,r2,8192
1000fa28:	10803fcc 	andi	r2,r2,255
1000fa2c:	00000506 	br	1000fa44 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000fa30:	000f9700 	call	1000f970 <alt_get_errno>
1000fa34:	1007883a 	mov	r3,r2
1000fa38:	00801444 	movi	r2,81
1000fa3c:	18800015 	stw	r2,0(r3)
    return 0;
1000fa40:	0005883a 	mov	r2,zero
  }
}
1000fa44:	e037883a 	mov	sp,fp
1000fa48:	dfc00117 	ldw	ra,4(sp)
1000fa4c:	df000017 	ldw	fp,0(sp)
1000fa50:	dec00204 	addi	sp,sp,8
1000fa54:	f800283a 	ret

1000fa58 <alt_load_section>:
1000fa58:	defffc04 	addi	sp,sp,-16
1000fa5c:	df000315 	stw	fp,12(sp)
1000fa60:	df000304 	addi	fp,sp,12
1000fa64:	e13ffd15 	stw	r4,-12(fp)
1000fa68:	e17ffe15 	stw	r5,-8(fp)
1000fa6c:	e1bfff15 	stw	r6,-4(fp)
1000fa70:	e0fffe17 	ldw	r3,-8(fp)
1000fa74:	e0bffd17 	ldw	r2,-12(fp)
1000fa78:	18800c26 	beq	r3,r2,1000faac <alt_load_section+0x54>
1000fa7c:	00000806 	br	1000faa0 <alt_load_section+0x48>
1000fa80:	e0bffe17 	ldw	r2,-8(fp)
1000fa84:	10c00104 	addi	r3,r2,4
1000fa88:	e0fffe15 	stw	r3,-8(fp)
1000fa8c:	e0fffd17 	ldw	r3,-12(fp)
1000fa90:	19000104 	addi	r4,r3,4
1000fa94:	e13ffd15 	stw	r4,-12(fp)
1000fa98:	18c00017 	ldw	r3,0(r3)
1000fa9c:	10c00015 	stw	r3,0(r2)
1000faa0:	e0fffe17 	ldw	r3,-8(fp)
1000faa4:	e0bfff17 	ldw	r2,-4(fp)
1000faa8:	18bff51e 	bne	r3,r2,1000fa80 <__alt_data_end+0xf800fa80>
1000faac:	0001883a 	nop
1000fab0:	e037883a 	mov	sp,fp
1000fab4:	df000017 	ldw	fp,0(sp)
1000fab8:	dec00104 	addi	sp,sp,4
1000fabc:	f800283a 	ret

1000fac0 <alt_load>:
1000fac0:	defffe04 	addi	sp,sp,-8
1000fac4:	dfc00115 	stw	ra,4(sp)
1000fac8:	df000015 	stw	fp,0(sp)
1000facc:	d839883a 	mov	fp,sp
1000fad0:	01840074 	movhi	r6,4097
1000fad4:	31914104 	addi	r6,r6,17668
1000fad8:	01440074 	movhi	r5,4097
1000fadc:	294a8604 	addi	r5,r5,10776
1000fae0:	01040074 	movhi	r4,4097
1000fae4:	21114104 	addi	r4,r4,17668
1000fae8:	000fa580 	call	1000fa58 <alt_load_section>
1000faec:	01840034 	movhi	r6,4096
1000faf0:	31808c04 	addi	r6,r6,560
1000faf4:	01440034 	movhi	r5,4096
1000faf8:	29400804 	addi	r5,r5,32
1000fafc:	01040034 	movhi	r4,4096
1000fb00:	21000804 	addi	r4,r4,32
1000fb04:	000fa580 	call	1000fa58 <alt_load_section>
1000fb08:	01840074 	movhi	r6,4097
1000fb0c:	318a8604 	addi	r6,r6,10776
1000fb10:	01440074 	movhi	r5,4097
1000fb14:	2947d704 	addi	r5,r5,8028
1000fb18:	01040074 	movhi	r4,4097
1000fb1c:	2107d704 	addi	r4,r4,8028
1000fb20:	000fa580 	call	1000fa58 <alt_load_section>
1000fb24:	00110480 	call	10011048 <alt_dcache_flush_all>
1000fb28:	00112080 	call	10011208 <alt_icache_flush_all>
1000fb2c:	0001883a 	nop
1000fb30:	e037883a 	mov	sp,fp
1000fb34:	dfc00117 	ldw	ra,4(sp)
1000fb38:	df000017 	ldw	fp,0(sp)
1000fb3c:	dec00204 	addi	sp,sp,8
1000fb40:	f800283a 	ret

1000fb44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fb44:	defffe04 	addi	sp,sp,-8
1000fb48:	dfc00115 	stw	ra,4(sp)
1000fb4c:	df000015 	stw	fp,0(sp)
1000fb50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fb54:	d0a00b17 	ldw	r2,-32724(gp)
1000fb58:	10000326 	beq	r2,zero,1000fb68 <alt_get_errno+0x24>
1000fb5c:	d0a00b17 	ldw	r2,-32724(gp)
1000fb60:	103ee83a 	callr	r2
1000fb64:	00000106 	br	1000fb6c <alt_get_errno+0x28>
1000fb68:	d0a6cc04 	addi	r2,gp,-25808
}
1000fb6c:	e037883a 	mov	sp,fp
1000fb70:	dfc00117 	ldw	ra,4(sp)
1000fb74:	df000017 	ldw	fp,0(sp)
1000fb78:	dec00204 	addi	sp,sp,8
1000fb7c:	f800283a 	ret

1000fb80 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000fb80:	defff904 	addi	sp,sp,-28
1000fb84:	dfc00615 	stw	ra,24(sp)
1000fb88:	df000515 	stw	fp,20(sp)
1000fb8c:	df000504 	addi	fp,sp,20
1000fb90:	e13ffd15 	stw	r4,-12(fp)
1000fb94:	e17ffe15 	stw	r5,-8(fp)
1000fb98:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000fb9c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fba0:	e0bffd17 	ldw	r2,-12(fp)
1000fba4:	10000816 	blt	r2,zero,1000fbc8 <lseek+0x48>
1000fba8:	01400304 	movi	r5,12
1000fbac:	e13ffd17 	ldw	r4,-12(fp)
1000fbb0:	000cc7c0 	call	1000cc7c <__mulsi3>
1000fbb4:	1007883a 	mov	r3,r2
1000fbb8:	00840074 	movhi	r2,4097
1000fbbc:	108cb904 	addi	r2,r2,13028
1000fbc0:	1885883a 	add	r2,r3,r2
1000fbc4:	00000106 	br	1000fbcc <lseek+0x4c>
1000fbc8:	0005883a 	mov	r2,zero
1000fbcc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000fbd0:	e0bffc17 	ldw	r2,-16(fp)
1000fbd4:	10001026 	beq	r2,zero,1000fc18 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000fbd8:	e0bffc17 	ldw	r2,-16(fp)
1000fbdc:	10800017 	ldw	r2,0(r2)
1000fbe0:	10800717 	ldw	r2,28(r2)
1000fbe4:	10000926 	beq	r2,zero,1000fc0c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000fbe8:	e0bffc17 	ldw	r2,-16(fp)
1000fbec:	10800017 	ldw	r2,0(r2)
1000fbf0:	10800717 	ldw	r2,28(r2)
1000fbf4:	e1bfff17 	ldw	r6,-4(fp)
1000fbf8:	e17ffe17 	ldw	r5,-8(fp)
1000fbfc:	e13ffc17 	ldw	r4,-16(fp)
1000fc00:	103ee83a 	callr	r2
1000fc04:	e0bffb15 	stw	r2,-20(fp)
1000fc08:	00000506 	br	1000fc20 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000fc0c:	00bfde84 	movi	r2,-134
1000fc10:	e0bffb15 	stw	r2,-20(fp)
1000fc14:	00000206 	br	1000fc20 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000fc18:	00bfebc4 	movi	r2,-81
1000fc1c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000fc20:	e0bffb17 	ldw	r2,-20(fp)
1000fc24:	1000070e 	bge	r2,zero,1000fc44 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000fc28:	000fb440 	call	1000fb44 <alt_get_errno>
1000fc2c:	1007883a 	mov	r3,r2
1000fc30:	e0bffb17 	ldw	r2,-20(fp)
1000fc34:	0085c83a 	sub	r2,zero,r2
1000fc38:	18800015 	stw	r2,0(r3)
    rc = -1;
1000fc3c:	00bfffc4 	movi	r2,-1
1000fc40:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000fc44:	e0bffb17 	ldw	r2,-20(fp)
}
1000fc48:	e037883a 	mov	sp,fp
1000fc4c:	dfc00117 	ldw	ra,4(sp)
1000fc50:	df000017 	ldw	fp,0(sp)
1000fc54:	dec00204 	addi	sp,sp,8
1000fc58:	f800283a 	ret

1000fc5c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000fc5c:	defffd04 	addi	sp,sp,-12
1000fc60:	dfc00215 	stw	ra,8(sp)
1000fc64:	df000115 	stw	fp,4(sp)
1000fc68:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000fc6c:	0009883a 	mov	r4,zero
1000fc70:	00102d80 	call	100102d8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000fc74:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000fc78:	00103100 	call	10010310 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000fc7c:	01840074 	movhi	r6,4097
1000fc80:	318a7c04 	addi	r6,r6,10736
1000fc84:	01440074 	movhi	r5,4097
1000fc88:	294a7c04 	addi	r5,r5,10736
1000fc8c:	01040074 	movhi	r4,4097
1000fc90:	210a7c04 	addi	r4,r4,10736
1000fc94:	00115ac0 	call	100115ac <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000fc98:	00111480 	call	10011148 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000fc9c:	01040074 	movhi	r4,4097
1000fca0:	21046a04 	addi	r4,r4,4520
1000fca4:	0011bc80 	call	10011bc8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000fca8:	d0a6d717 	ldw	r2,-25764(gp)
1000fcac:	d0e6d817 	ldw	r3,-25760(gp)
1000fcb0:	d126d917 	ldw	r4,-25756(gp)
1000fcb4:	200d883a 	mov	r6,r4
1000fcb8:	180b883a 	mov	r5,r3
1000fcbc:	1009883a 	mov	r4,r2
1000fcc0:	00003cc0 	call	100003cc <main>
1000fcc4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000fcc8:	01000044 	movi	r4,1
1000fccc:	000f5840 	call	1000f584 <close>
  exit (result);
1000fcd0:	e13fff17 	ldw	r4,-4(fp)
1000fcd4:	0011bdc0 	call	10011bdc <exit>

1000fcd8 <__malloc_lock>:
1000fcd8:	defffe04 	addi	sp,sp,-8
1000fcdc:	df000115 	stw	fp,4(sp)
1000fce0:	df000104 	addi	fp,sp,4
1000fce4:	e13fff15 	stw	r4,-4(fp)
1000fce8:	0001883a 	nop
1000fcec:	e037883a 	mov	sp,fp
1000fcf0:	df000017 	ldw	fp,0(sp)
1000fcf4:	dec00104 	addi	sp,sp,4
1000fcf8:	f800283a 	ret

1000fcfc <__malloc_unlock>:
1000fcfc:	defffe04 	addi	sp,sp,-8
1000fd00:	df000115 	stw	fp,4(sp)
1000fd04:	df000104 	addi	fp,sp,4
1000fd08:	e13fff15 	stw	r4,-4(fp)
1000fd0c:	0001883a 	nop
1000fd10:	e037883a 	mov	sp,fp
1000fd14:	df000017 	ldw	fp,0(sp)
1000fd18:	dec00104 	addi	sp,sp,4
1000fd1c:	f800283a 	ret

1000fd20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fd20:	defffe04 	addi	sp,sp,-8
1000fd24:	dfc00115 	stw	ra,4(sp)
1000fd28:	df000015 	stw	fp,0(sp)
1000fd2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fd30:	d0a00b17 	ldw	r2,-32724(gp)
1000fd34:	10000326 	beq	r2,zero,1000fd44 <alt_get_errno+0x24>
1000fd38:	d0a00b17 	ldw	r2,-32724(gp)
1000fd3c:	103ee83a 	callr	r2
1000fd40:	00000106 	br	1000fd48 <alt_get_errno+0x28>
1000fd44:	d0a6cc04 	addi	r2,gp,-25808
}
1000fd48:	e037883a 	mov	sp,fp
1000fd4c:	dfc00117 	ldw	ra,4(sp)
1000fd50:	df000017 	ldw	fp,0(sp)
1000fd54:	dec00204 	addi	sp,sp,8
1000fd58:	f800283a 	ret

1000fd5c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000fd5c:	defff904 	addi	sp,sp,-28
1000fd60:	dfc00615 	stw	ra,24(sp)
1000fd64:	df000515 	stw	fp,20(sp)
1000fd68:	df000504 	addi	fp,sp,20
1000fd6c:	e13ffd15 	stw	r4,-12(fp)
1000fd70:	e17ffe15 	stw	r5,-8(fp)
1000fd74:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fd78:	e0bffd17 	ldw	r2,-12(fp)
1000fd7c:	10000816 	blt	r2,zero,1000fda0 <read+0x44>
1000fd80:	01400304 	movi	r5,12
1000fd84:	e13ffd17 	ldw	r4,-12(fp)
1000fd88:	000cc7c0 	call	1000cc7c <__mulsi3>
1000fd8c:	1007883a 	mov	r3,r2
1000fd90:	00840074 	movhi	r2,4097
1000fd94:	108cb904 	addi	r2,r2,13028
1000fd98:	1885883a 	add	r2,r3,r2
1000fd9c:	00000106 	br	1000fda4 <read+0x48>
1000fda0:	0005883a 	mov	r2,zero
1000fda4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000fda8:	e0bffb17 	ldw	r2,-20(fp)
1000fdac:	10002226 	beq	r2,zero,1000fe38 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000fdb0:	e0bffb17 	ldw	r2,-20(fp)
1000fdb4:	10800217 	ldw	r2,8(r2)
1000fdb8:	108000cc 	andi	r2,r2,3
1000fdbc:	10800060 	cmpeqi	r2,r2,1
1000fdc0:	1000181e 	bne	r2,zero,1000fe24 <read+0xc8>
        (fd->dev->read))
1000fdc4:	e0bffb17 	ldw	r2,-20(fp)
1000fdc8:	10800017 	ldw	r2,0(r2)
1000fdcc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000fdd0:	10001426 	beq	r2,zero,1000fe24 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000fdd4:	e0bffb17 	ldw	r2,-20(fp)
1000fdd8:	10800017 	ldw	r2,0(r2)
1000fddc:	10800517 	ldw	r2,20(r2)
1000fde0:	e0ffff17 	ldw	r3,-4(fp)
1000fde4:	180d883a 	mov	r6,r3
1000fde8:	e17ffe17 	ldw	r5,-8(fp)
1000fdec:	e13ffb17 	ldw	r4,-20(fp)
1000fdf0:	103ee83a 	callr	r2
1000fdf4:	e0bffc15 	stw	r2,-16(fp)
1000fdf8:	e0bffc17 	ldw	r2,-16(fp)
1000fdfc:	1000070e 	bge	r2,zero,1000fe1c <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000fe00:	000fd200 	call	1000fd20 <alt_get_errno>
1000fe04:	1007883a 	mov	r3,r2
1000fe08:	e0bffc17 	ldw	r2,-16(fp)
1000fe0c:	0085c83a 	sub	r2,zero,r2
1000fe10:	18800015 	stw	r2,0(r3)
          return -1;
1000fe14:	00bfffc4 	movi	r2,-1
1000fe18:	00000c06 	br	1000fe4c <read+0xf0>
        }
        return rval;
1000fe1c:	e0bffc17 	ldw	r2,-16(fp)
1000fe20:	00000a06 	br	1000fe4c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000fe24:	000fd200 	call	1000fd20 <alt_get_errno>
1000fe28:	1007883a 	mov	r3,r2
1000fe2c:	00800344 	movi	r2,13
1000fe30:	18800015 	stw	r2,0(r3)
1000fe34:	00000406 	br	1000fe48 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000fe38:	000fd200 	call	1000fd20 <alt_get_errno>
1000fe3c:	1007883a 	mov	r3,r2
1000fe40:	00801444 	movi	r2,81
1000fe44:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000fe48:	00bfffc4 	movi	r2,-1
}
1000fe4c:	e037883a 	mov	sp,fp
1000fe50:	dfc00117 	ldw	ra,4(sp)
1000fe54:	df000017 	ldw	fp,0(sp)
1000fe58:	dec00204 	addi	sp,sp,8
1000fe5c:	f800283a 	ret

1000fe60 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000fe60:	defffc04 	addi	sp,sp,-16
1000fe64:	dfc00315 	stw	ra,12(sp)
1000fe68:	df000215 	stw	fp,8(sp)
1000fe6c:	dc000115 	stw	r16,4(sp)
1000fe70:	df000204 	addi	fp,sp,8
1000fe74:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000fe78:	e0bffe17 	ldw	r2,-8(fp)
1000fe7c:	108000d0 	cmplti	r2,r2,3
1000fe80:	1000111e 	bne	r2,zero,1000fec8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000fe84:	04040074 	movhi	r16,4097
1000fe88:	840cb904 	addi	r16,r16,13028
1000fe8c:	e0bffe17 	ldw	r2,-8(fp)
1000fe90:	01400304 	movi	r5,12
1000fe94:	1009883a 	mov	r4,r2
1000fe98:	000cc7c0 	call	1000cc7c <__mulsi3>
1000fe9c:	8085883a 	add	r2,r16,r2
1000fea0:	10800204 	addi	r2,r2,8
1000fea4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000fea8:	04040074 	movhi	r16,4097
1000feac:	840cb904 	addi	r16,r16,13028
1000feb0:	e0bffe17 	ldw	r2,-8(fp)
1000feb4:	01400304 	movi	r5,12
1000feb8:	1009883a 	mov	r4,r2
1000febc:	000cc7c0 	call	1000cc7c <__mulsi3>
1000fec0:	8085883a 	add	r2,r16,r2
1000fec4:	10000015 	stw	zero,0(r2)
  }
}
1000fec8:	0001883a 	nop
1000fecc:	e6ffff04 	addi	sp,fp,-4
1000fed0:	dfc00217 	ldw	ra,8(sp)
1000fed4:	df000117 	ldw	fp,4(sp)
1000fed8:	dc000017 	ldw	r16,0(sp)
1000fedc:	dec00304 	addi	sp,sp,12
1000fee0:	f800283a 	ret

1000fee4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000fee4:	defff904 	addi	sp,sp,-28
1000fee8:	df000615 	stw	fp,24(sp)
1000feec:	df000604 	addi	fp,sp,24
1000fef0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fef4:	0005303a 	rdctl	r2,status
1000fef8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fefc:	e0fffe17 	ldw	r3,-8(fp)
1000ff00:	00bfff84 	movi	r2,-2
1000ff04:	1884703a 	and	r2,r3,r2
1000ff08:	1001703a 	wrctl	status,r2
  
  return context;
1000ff0c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000ff10:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000ff14:	d0a00c17 	ldw	r2,-32720(gp)
1000ff18:	10c000c4 	addi	r3,r2,3
1000ff1c:	00bfff04 	movi	r2,-4
1000ff20:	1884703a 	and	r2,r3,r2
1000ff24:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000ff28:	d0e00c17 	ldw	r3,-32720(gp)
1000ff2c:	e0bfff17 	ldw	r2,-4(fp)
1000ff30:	1887883a 	add	r3,r3,r2
1000ff34:	00860034 	movhi	r2,6144
1000ff38:	10800004 	addi	r2,r2,0
1000ff3c:	10c0062e 	bgeu	r2,r3,1000ff58 <sbrk+0x74>
1000ff40:	e0bffb17 	ldw	r2,-20(fp)
1000ff44:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ff48:	e0bffa17 	ldw	r2,-24(fp)
1000ff4c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000ff50:	00bfffc4 	movi	r2,-1
1000ff54:	00000b06 	br	1000ff84 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000ff58:	d0a00c17 	ldw	r2,-32720(gp)
1000ff5c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1000ff60:	d0e00c17 	ldw	r3,-32720(gp)
1000ff64:	e0bfff17 	ldw	r2,-4(fp)
1000ff68:	1885883a 	add	r2,r3,r2
1000ff6c:	d0a00c15 	stw	r2,-32720(gp)
1000ff70:	e0bffb17 	ldw	r2,-20(fp)
1000ff74:	e0bffc15 	stw	r2,-16(fp)
1000ff78:	e0bffc17 	ldw	r2,-16(fp)
1000ff7c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000ff80:	e0bffd17 	ldw	r2,-12(fp)
} 
1000ff84:	e037883a 	mov	sp,fp
1000ff88:	df000017 	ldw	fp,0(sp)
1000ff8c:	dec00104 	addi	sp,sp,4
1000ff90:	f800283a 	ret

1000ff94 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1000ff94:	defffa04 	addi	sp,sp,-24
1000ff98:	df000515 	stw	fp,20(sp)
1000ff9c:	df000504 	addi	fp,sp,20
1000ffa0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ffa4:	0005303a 	rdctl	r2,status
1000ffa8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ffac:	e0fffc17 	ldw	r3,-16(fp)
1000ffb0:	00bfff84 	movi	r2,-2
1000ffb4:	1884703a 	and	r2,r3,r2
1000ffb8:	1001703a 	wrctl	status,r2
  
  return context;
1000ffbc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1000ffc0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1000ffc4:	e0bfff17 	ldw	r2,-4(fp)
1000ffc8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1000ffcc:	e0bffd17 	ldw	r2,-12(fp)
1000ffd0:	10800017 	ldw	r2,0(r2)
1000ffd4:	e0fffd17 	ldw	r3,-12(fp)
1000ffd8:	18c00117 	ldw	r3,4(r3)
1000ffdc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1000ffe0:	e0bffd17 	ldw	r2,-12(fp)
1000ffe4:	10800117 	ldw	r2,4(r2)
1000ffe8:	e0fffd17 	ldw	r3,-12(fp)
1000ffec:	18c00017 	ldw	r3,0(r3)
1000fff0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1000fff4:	e0bffd17 	ldw	r2,-12(fp)
1000fff8:	e0fffd17 	ldw	r3,-12(fp)
1000fffc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10010000:	e0bffd17 	ldw	r2,-12(fp)
10010004:	e0fffd17 	ldw	r3,-12(fp)
10010008:	10c00015 	stw	r3,0(r2)
1001000c:	e0bffb17 	ldw	r2,-20(fp)
10010010:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010014:	e0bffe17 	ldw	r2,-8(fp)
10010018:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1001001c:	0001883a 	nop
10010020:	e037883a 	mov	sp,fp
10010024:	df000017 	ldw	fp,0(sp)
10010028:	dec00104 	addi	sp,sp,4
1001002c:	f800283a 	ret

10010030 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10010030:	defffb04 	addi	sp,sp,-20
10010034:	dfc00415 	stw	ra,16(sp)
10010038:	df000315 	stw	fp,12(sp)
1001003c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10010040:	d0a00d17 	ldw	r2,-32716(gp)
10010044:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10010048:	d0a6db17 	ldw	r2,-25748(gp)
1001004c:	10800044 	addi	r2,r2,1
10010050:	d0a6db15 	stw	r2,-25748(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10010054:	00002e06 	br	10010110 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10010058:	e0bffd17 	ldw	r2,-12(fp)
1001005c:	10800017 	ldw	r2,0(r2)
10010060:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10010064:	e0bffd17 	ldw	r2,-12(fp)
10010068:	10800403 	ldbu	r2,16(r2)
1001006c:	10803fcc 	andi	r2,r2,255
10010070:	10000426 	beq	r2,zero,10010084 <alt_tick+0x54>
10010074:	d0a6db17 	ldw	r2,-25748(gp)
10010078:	1000021e 	bne	r2,zero,10010084 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1001007c:	e0bffd17 	ldw	r2,-12(fp)
10010080:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10010084:	e0bffd17 	ldw	r2,-12(fp)
10010088:	10800217 	ldw	r2,8(r2)
1001008c:	d0e6db17 	ldw	r3,-25748(gp)
10010090:	18801d36 	bltu	r3,r2,10010108 <alt_tick+0xd8>
10010094:	e0bffd17 	ldw	r2,-12(fp)
10010098:	10800403 	ldbu	r2,16(r2)
1001009c:	10803fcc 	andi	r2,r2,255
100100a0:	1000191e 	bne	r2,zero,10010108 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
100100a4:	e0bffd17 	ldw	r2,-12(fp)
100100a8:	10800317 	ldw	r2,12(r2)
100100ac:	e0fffd17 	ldw	r3,-12(fp)
100100b0:	18c00517 	ldw	r3,20(r3)
100100b4:	1809883a 	mov	r4,r3
100100b8:	103ee83a 	callr	r2
100100bc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
100100c0:	e0bfff17 	ldw	r2,-4(fp)
100100c4:	1000031e 	bne	r2,zero,100100d4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
100100c8:	e13ffd17 	ldw	r4,-12(fp)
100100cc:	000ff940 	call	1000ff94 <alt_alarm_stop>
100100d0:	00000d06 	br	10010108 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
100100d4:	e0bffd17 	ldw	r2,-12(fp)
100100d8:	10c00217 	ldw	r3,8(r2)
100100dc:	e0bfff17 	ldw	r2,-4(fp)
100100e0:	1887883a 	add	r3,r3,r2
100100e4:	e0bffd17 	ldw	r2,-12(fp)
100100e8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
100100ec:	e0bffd17 	ldw	r2,-12(fp)
100100f0:	10c00217 	ldw	r3,8(r2)
100100f4:	d0a6db17 	ldw	r2,-25748(gp)
100100f8:	1880032e 	bgeu	r3,r2,10010108 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100100fc:	e0bffd17 	ldw	r2,-12(fp)
10010100:	00c00044 	movi	r3,1
10010104:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10010108:	e0bffe17 	ldw	r2,-8(fp)
1001010c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10010110:	e0fffd17 	ldw	r3,-12(fp)
10010114:	d0a00d04 	addi	r2,gp,-32716
10010118:	18bfcf1e 	bne	r3,r2,10010058 <__alt_data_end+0xf8010058>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1001011c:	0001883a 	nop
}
10010120:	0001883a 	nop
10010124:	e037883a 	mov	sp,fp
10010128:	dfc00117 	ldw	ra,4(sp)
1001012c:	df000017 	ldw	fp,0(sp)
10010130:	dec00204 	addi	sp,sp,8
10010134:	f800283a 	ret

10010138 <usleep>:
10010138:	defffd04 	addi	sp,sp,-12
1001013c:	dfc00215 	stw	ra,8(sp)
10010140:	df000115 	stw	fp,4(sp)
10010144:	df000104 	addi	fp,sp,4
10010148:	e13fff15 	stw	r4,-4(fp)
1001014c:	e13fff17 	ldw	r4,-4(fp)
10010150:	0010ef00 	call	10010ef0 <alt_busy_sleep>
10010154:	e037883a 	mov	sp,fp
10010158:	dfc00117 	ldw	ra,4(sp)
1001015c:	df000017 	ldw	fp,0(sp)
10010160:	dec00204 	addi	sp,sp,8
10010164:	f800283a 	ret

10010168 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010168:	defffe04 	addi	sp,sp,-8
1001016c:	dfc00115 	stw	ra,4(sp)
10010170:	df000015 	stw	fp,0(sp)
10010174:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010178:	d0a00b17 	ldw	r2,-32724(gp)
1001017c:	10000326 	beq	r2,zero,1001018c <alt_get_errno+0x24>
10010180:	d0a00b17 	ldw	r2,-32724(gp)
10010184:	103ee83a 	callr	r2
10010188:	00000106 	br	10010190 <alt_get_errno+0x28>
1001018c:	d0a6cc04 	addi	r2,gp,-25808
}
10010190:	e037883a 	mov	sp,fp
10010194:	dfc00117 	ldw	ra,4(sp)
10010198:	df000017 	ldw	fp,0(sp)
1001019c:	dec00204 	addi	sp,sp,8
100101a0:	f800283a 	ret

100101a4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
100101a4:	defff904 	addi	sp,sp,-28
100101a8:	dfc00615 	stw	ra,24(sp)
100101ac:	df000515 	stw	fp,20(sp)
100101b0:	df000504 	addi	fp,sp,20
100101b4:	e13ffd15 	stw	r4,-12(fp)
100101b8:	e17ffe15 	stw	r5,-8(fp)
100101bc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100101c0:	e0bffd17 	ldw	r2,-12(fp)
100101c4:	10000816 	blt	r2,zero,100101e8 <write+0x44>
100101c8:	01400304 	movi	r5,12
100101cc:	e13ffd17 	ldw	r4,-12(fp)
100101d0:	000cc7c0 	call	1000cc7c <__mulsi3>
100101d4:	1007883a 	mov	r3,r2
100101d8:	00840074 	movhi	r2,4097
100101dc:	108cb904 	addi	r2,r2,13028
100101e0:	1885883a 	add	r2,r3,r2
100101e4:	00000106 	br	100101ec <write+0x48>
100101e8:	0005883a 	mov	r2,zero
100101ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
100101f0:	e0bffb17 	ldw	r2,-20(fp)
100101f4:	10002126 	beq	r2,zero,1001027c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
100101f8:	e0bffb17 	ldw	r2,-20(fp)
100101fc:	10800217 	ldw	r2,8(r2)
10010200:	108000cc 	andi	r2,r2,3
10010204:	10001826 	beq	r2,zero,10010268 <write+0xc4>
10010208:	e0bffb17 	ldw	r2,-20(fp)
1001020c:	10800017 	ldw	r2,0(r2)
10010210:	10800617 	ldw	r2,24(r2)
10010214:	10001426 	beq	r2,zero,10010268 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10010218:	e0bffb17 	ldw	r2,-20(fp)
1001021c:	10800017 	ldw	r2,0(r2)
10010220:	10800617 	ldw	r2,24(r2)
10010224:	e0ffff17 	ldw	r3,-4(fp)
10010228:	180d883a 	mov	r6,r3
1001022c:	e17ffe17 	ldw	r5,-8(fp)
10010230:	e13ffb17 	ldw	r4,-20(fp)
10010234:	103ee83a 	callr	r2
10010238:	e0bffc15 	stw	r2,-16(fp)
1001023c:	e0bffc17 	ldw	r2,-16(fp)
10010240:	1000070e 	bge	r2,zero,10010260 <write+0xbc>
      {
        ALT_ERRNO = -rval;
10010244:	00101680 	call	10010168 <alt_get_errno>
10010248:	1007883a 	mov	r3,r2
1001024c:	e0bffc17 	ldw	r2,-16(fp)
10010250:	0085c83a 	sub	r2,zero,r2
10010254:	18800015 	stw	r2,0(r3)
        return -1;
10010258:	00bfffc4 	movi	r2,-1
1001025c:	00000c06 	br	10010290 <write+0xec>
      }
      return rval;
10010260:	e0bffc17 	ldw	r2,-16(fp)
10010264:	00000a06 	br	10010290 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10010268:	00101680 	call	10010168 <alt_get_errno>
1001026c:	1007883a 	mov	r3,r2
10010270:	00800344 	movi	r2,13
10010274:	18800015 	stw	r2,0(r3)
10010278:	00000406 	br	1001028c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1001027c:	00101680 	call	10010168 <alt_get_errno>
10010280:	1007883a 	mov	r3,r2
10010284:	00801444 	movi	r2,81
10010288:	18800015 	stw	r2,0(r3)
  }
  return -1;
1001028c:	00bfffc4 	movi	r2,-1
}
10010290:	e037883a 	mov	sp,fp
10010294:	dfc00117 	ldw	ra,4(sp)
10010298:	df000017 	ldw	fp,0(sp)
1001029c:	dec00204 	addi	sp,sp,8
100102a0:	f800283a 	ret

100102a4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
100102a4:	defffd04 	addi	sp,sp,-12
100102a8:	dfc00215 	stw	ra,8(sp)
100102ac:	df000115 	stw	fp,4(sp)
100102b0:	df000104 	addi	fp,sp,4
100102b4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
100102b8:	d1600804 	addi	r5,gp,-32736
100102bc:	e13fff17 	ldw	r4,-4(fp)
100102c0:	00110a40 	call	100110a4 <alt_dev_llist_insert>
}
100102c4:	e037883a 	mov	sp,fp
100102c8:	dfc00117 	ldw	ra,4(sp)
100102cc:	df000017 	ldw	fp,0(sp)
100102d0:	dec00204 	addi	sp,sp,8
100102d4:	f800283a 	ret

100102d8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
100102d8:	defffd04 	addi	sp,sp,-12
100102dc:	dfc00215 	stw	ra,8(sp)
100102e0:	df000115 	stw	fp,4(sp)
100102e4:	df000104 	addi	fp,sp,4
100102e8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
100102ec:	00118ac0 	call	100118ac <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
100102f0:	00800044 	movi	r2,1
100102f4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
100102f8:	0001883a 	nop
100102fc:	e037883a 	mov	sp,fp
10010300:	dfc00117 	ldw	ra,4(sp)
10010304:	df000017 	ldw	fp,0(sp)
10010308:	dec00204 	addi	sp,sp,8
1001030c:	f800283a 	ret

10010310 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10010310:	defffe04 	addi	sp,sp,-8
10010314:	dfc00115 	stw	ra,4(sp)
10010318:	df000015 	stw	fp,0(sp)
1001031c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10010320:	01800144 	movi	r6,5
10010324:	000b883a 	mov	r5,zero
10010328:	01040074 	movhi	r4,4097
1001032c:	210d2304 	addi	r4,r4,13452
10010330:	00104c00 	call	100104c0 <altera_avalon_jtag_uart_init>
10010334:	01040074 	movhi	r4,4097
10010338:	210d1904 	addi	r4,r4,13412
1001033c:	00102a40 	call	100102a4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10010340:	0001883a 	nop
}
10010344:	0001883a 	nop
10010348:	e037883a 	mov	sp,fp
1001034c:	dfc00117 	ldw	ra,4(sp)
10010350:	df000017 	ldw	fp,0(sp)
10010354:	dec00204 	addi	sp,sp,8
10010358:	f800283a 	ret

1001035c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1001035c:	defffa04 	addi	sp,sp,-24
10010360:	dfc00515 	stw	ra,20(sp)
10010364:	df000415 	stw	fp,16(sp)
10010368:	df000404 	addi	fp,sp,16
1001036c:	e13ffd15 	stw	r4,-12(fp)
10010370:	e17ffe15 	stw	r5,-8(fp)
10010374:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010378:	e0bffd17 	ldw	r2,-12(fp)
1001037c:	10800017 	ldw	r2,0(r2)
10010380:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10010384:	e0bffc17 	ldw	r2,-16(fp)
10010388:	10c00a04 	addi	r3,r2,40
1001038c:	e0bffd17 	ldw	r2,-12(fp)
10010390:	10800217 	ldw	r2,8(r2)
10010394:	100f883a 	mov	r7,r2
10010398:	e1bfff17 	ldw	r6,-4(fp)
1001039c:	e17ffe17 	ldw	r5,-8(fp)
100103a0:	1809883a 	mov	r4,r3
100103a4:	00109840 	call	10010984 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
100103a8:	e037883a 	mov	sp,fp
100103ac:	dfc00117 	ldw	ra,4(sp)
100103b0:	df000017 	ldw	fp,0(sp)
100103b4:	dec00204 	addi	sp,sp,8
100103b8:	f800283a 	ret

100103bc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
100103bc:	defffa04 	addi	sp,sp,-24
100103c0:	dfc00515 	stw	ra,20(sp)
100103c4:	df000415 	stw	fp,16(sp)
100103c8:	df000404 	addi	fp,sp,16
100103cc:	e13ffd15 	stw	r4,-12(fp)
100103d0:	e17ffe15 	stw	r5,-8(fp)
100103d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100103d8:	e0bffd17 	ldw	r2,-12(fp)
100103dc:	10800017 	ldw	r2,0(r2)
100103e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
100103e4:	e0bffc17 	ldw	r2,-16(fp)
100103e8:	10c00a04 	addi	r3,r2,40
100103ec:	e0bffd17 	ldw	r2,-12(fp)
100103f0:	10800217 	ldw	r2,8(r2)
100103f4:	100f883a 	mov	r7,r2
100103f8:	e1bfff17 	ldw	r6,-4(fp)
100103fc:	e17ffe17 	ldw	r5,-8(fp)
10010400:	1809883a 	mov	r4,r3
10010404:	0010ba00 	call	10010ba0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10010408:	e037883a 	mov	sp,fp
1001040c:	dfc00117 	ldw	ra,4(sp)
10010410:	df000017 	ldw	fp,0(sp)
10010414:	dec00204 	addi	sp,sp,8
10010418:	f800283a 	ret

1001041c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1001041c:	defffc04 	addi	sp,sp,-16
10010420:	dfc00315 	stw	ra,12(sp)
10010424:	df000215 	stw	fp,8(sp)
10010428:	df000204 	addi	fp,sp,8
1001042c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010430:	e0bfff17 	ldw	r2,-4(fp)
10010434:	10800017 	ldw	r2,0(r2)
10010438:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1001043c:	e0bffe17 	ldw	r2,-8(fp)
10010440:	10c00a04 	addi	r3,r2,40
10010444:	e0bfff17 	ldw	r2,-4(fp)
10010448:	10800217 	ldw	r2,8(r2)
1001044c:	100b883a 	mov	r5,r2
10010450:	1809883a 	mov	r4,r3
10010454:	001082c0 	call	1001082c <altera_avalon_jtag_uart_close>
}
10010458:	e037883a 	mov	sp,fp
1001045c:	dfc00117 	ldw	ra,4(sp)
10010460:	df000017 	ldw	fp,0(sp)
10010464:	dec00204 	addi	sp,sp,8
10010468:	f800283a 	ret

1001046c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1001046c:	defffa04 	addi	sp,sp,-24
10010470:	dfc00515 	stw	ra,20(sp)
10010474:	df000415 	stw	fp,16(sp)
10010478:	df000404 	addi	fp,sp,16
1001047c:	e13ffd15 	stw	r4,-12(fp)
10010480:	e17ffe15 	stw	r5,-8(fp)
10010484:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10010488:	e0bffd17 	ldw	r2,-12(fp)
1001048c:	10800017 	ldw	r2,0(r2)
10010490:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10010494:	e0bffc17 	ldw	r2,-16(fp)
10010498:	10800a04 	addi	r2,r2,40
1001049c:	e1bfff17 	ldw	r6,-4(fp)
100104a0:	e17ffe17 	ldw	r5,-8(fp)
100104a4:	1009883a 	mov	r4,r2
100104a8:	00108940 	call	10010894 <altera_avalon_jtag_uart_ioctl>
}
100104ac:	e037883a 	mov	sp,fp
100104b0:	dfc00117 	ldw	ra,4(sp)
100104b4:	df000017 	ldw	fp,0(sp)
100104b8:	dec00204 	addi	sp,sp,8
100104bc:	f800283a 	ret

100104c0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
100104c0:	defffa04 	addi	sp,sp,-24
100104c4:	dfc00515 	stw	ra,20(sp)
100104c8:	df000415 	stw	fp,16(sp)
100104cc:	df000404 	addi	fp,sp,16
100104d0:	e13ffd15 	stw	r4,-12(fp)
100104d4:	e17ffe15 	stw	r5,-8(fp)
100104d8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100104dc:	e0bffd17 	ldw	r2,-12(fp)
100104e0:	00c00044 	movi	r3,1
100104e4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
100104e8:	e0bffd17 	ldw	r2,-12(fp)
100104ec:	10800017 	ldw	r2,0(r2)
100104f0:	10800104 	addi	r2,r2,4
100104f4:	1007883a 	mov	r3,r2
100104f8:	e0bffd17 	ldw	r2,-12(fp)
100104fc:	10800817 	ldw	r2,32(r2)
10010500:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10010504:	e0bffe17 	ldw	r2,-8(fp)
10010508:	e0ffff17 	ldw	r3,-4(fp)
1001050c:	d8000015 	stw	zero,0(sp)
10010510:	e1fffd17 	ldw	r7,-12(fp)
10010514:	01840074 	movhi	r6,4097
10010518:	31816004 	addi	r6,r6,1408
1001051c:	180b883a 	mov	r5,r3
10010520:	1009883a 	mov	r4,r2
10010524:	00112280 	call	10011228 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10010528:	e0bffd17 	ldw	r2,-12(fp)
1001052c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10010530:	e0bffd17 	ldw	r2,-12(fp)
10010534:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10010538:	d0e6da17 	ldw	r3,-25752(gp)
1001053c:	e1fffd17 	ldw	r7,-12(fp)
10010540:	01840074 	movhi	r6,4097
10010544:	3181e304 	addi	r6,r6,1932
10010548:	180b883a 	mov	r5,r3
1001054c:	1009883a 	mov	r4,r2
10010550:	0010dc40 	call	10010dc4 <alt_alarm_start>
10010554:	1000040e 	bge	r2,zero,10010568 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10010558:	e0fffd17 	ldw	r3,-12(fp)
1001055c:	00a00034 	movhi	r2,32768
10010560:	10bfffc4 	addi	r2,r2,-1
10010564:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10010568:	0001883a 	nop
1001056c:	e037883a 	mov	sp,fp
10010570:	dfc00117 	ldw	ra,4(sp)
10010574:	df000017 	ldw	fp,0(sp)
10010578:	dec00204 	addi	sp,sp,8
1001057c:	f800283a 	ret

10010580 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10010580:	defff804 	addi	sp,sp,-32
10010584:	df000715 	stw	fp,28(sp)
10010588:	df000704 	addi	fp,sp,28
1001058c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10010590:	e0bfff17 	ldw	r2,-4(fp)
10010594:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10010598:	e0bffb17 	ldw	r2,-20(fp)
1001059c:	10800017 	ldw	r2,0(r2)
100105a0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100105a4:	e0bffc17 	ldw	r2,-16(fp)
100105a8:	10800104 	addi	r2,r2,4
100105ac:	10800037 	ldwio	r2,0(r2)
100105b0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
100105b4:	e0bffd17 	ldw	r2,-12(fp)
100105b8:	1080c00c 	andi	r2,r2,768
100105bc:	10006d26 	beq	r2,zero,10010774 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
100105c0:	e0bffd17 	ldw	r2,-12(fp)
100105c4:	1080400c 	andi	r2,r2,256
100105c8:	10003526 	beq	r2,zero,100106a0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
100105cc:	00800074 	movhi	r2,1
100105d0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100105d4:	e0bffb17 	ldw	r2,-20(fp)
100105d8:	10800a17 	ldw	r2,40(r2)
100105dc:	10800044 	addi	r2,r2,1
100105e0:	1081ffcc 	andi	r2,r2,2047
100105e4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
100105e8:	e0bffb17 	ldw	r2,-20(fp)
100105ec:	10c00b17 	ldw	r3,44(r2)
100105f0:	e0bffe17 	ldw	r2,-8(fp)
100105f4:	18801526 	beq	r3,r2,1001064c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
100105f8:	e0bffc17 	ldw	r2,-16(fp)
100105fc:	10800037 	ldwio	r2,0(r2)
10010600:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10010604:	e0bff917 	ldw	r2,-28(fp)
10010608:	10a0000c 	andi	r2,r2,32768
1001060c:	10001126 	beq	r2,zero,10010654 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10010610:	e0bffb17 	ldw	r2,-20(fp)
10010614:	10800a17 	ldw	r2,40(r2)
10010618:	e0fff917 	ldw	r3,-28(fp)
1001061c:	1809883a 	mov	r4,r3
10010620:	e0fffb17 	ldw	r3,-20(fp)
10010624:	1885883a 	add	r2,r3,r2
10010628:	10800e04 	addi	r2,r2,56
1001062c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010630:	e0bffb17 	ldw	r2,-20(fp)
10010634:	10800a17 	ldw	r2,40(r2)
10010638:	10800044 	addi	r2,r2,1
1001063c:	10c1ffcc 	andi	r3,r2,2047
10010640:	e0bffb17 	ldw	r2,-20(fp)
10010644:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10010648:	003fe206 	br	100105d4 <__alt_data_end+0xf80105d4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1001064c:	0001883a 	nop
10010650:	00000106 	br	10010658 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10010654:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10010658:	e0bff917 	ldw	r2,-28(fp)
1001065c:	10bfffec 	andhi	r2,r2,65535
10010660:	10000f26 	beq	r2,zero,100106a0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010664:	e0bffb17 	ldw	r2,-20(fp)
10010668:	10c00817 	ldw	r3,32(r2)
1001066c:	00bfff84 	movi	r2,-2
10010670:	1886703a 	and	r3,r3,r2
10010674:	e0bffb17 	ldw	r2,-20(fp)
10010678:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1001067c:	e0bffc17 	ldw	r2,-16(fp)
10010680:	10800104 	addi	r2,r2,4
10010684:	1007883a 	mov	r3,r2
10010688:	e0bffb17 	ldw	r2,-20(fp)
1001068c:	10800817 	ldw	r2,32(r2)
10010690:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010694:	e0bffc17 	ldw	r2,-16(fp)
10010698:	10800104 	addi	r2,r2,4
1001069c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
100106a0:	e0bffd17 	ldw	r2,-12(fp)
100106a4:	1080800c 	andi	r2,r2,512
100106a8:	103fbe26 	beq	r2,zero,100105a4 <__alt_data_end+0xf80105a4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
100106ac:	e0bffd17 	ldw	r2,-12(fp)
100106b0:	1004d43a 	srli	r2,r2,16
100106b4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
100106b8:	00001406 	br	1001070c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
100106bc:	e0bffc17 	ldw	r2,-16(fp)
100106c0:	e0fffb17 	ldw	r3,-20(fp)
100106c4:	18c00d17 	ldw	r3,52(r3)
100106c8:	e13ffb17 	ldw	r4,-20(fp)
100106cc:	20c7883a 	add	r3,r4,r3
100106d0:	18c20e04 	addi	r3,r3,2104
100106d4:	18c00003 	ldbu	r3,0(r3)
100106d8:	18c03fcc 	andi	r3,r3,255
100106dc:	18c0201c 	xori	r3,r3,128
100106e0:	18ffe004 	addi	r3,r3,-128
100106e4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100106e8:	e0bffb17 	ldw	r2,-20(fp)
100106ec:	10800d17 	ldw	r2,52(r2)
100106f0:	10800044 	addi	r2,r2,1
100106f4:	10c1ffcc 	andi	r3,r2,2047
100106f8:	e0bffb17 	ldw	r2,-20(fp)
100106fc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10010700:	e0bffa17 	ldw	r2,-24(fp)
10010704:	10bfffc4 	addi	r2,r2,-1
10010708:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1001070c:	e0bffa17 	ldw	r2,-24(fp)
10010710:	10000526 	beq	r2,zero,10010728 <altera_avalon_jtag_uart_irq+0x1a8>
10010714:	e0bffb17 	ldw	r2,-20(fp)
10010718:	10c00d17 	ldw	r3,52(r2)
1001071c:	e0bffb17 	ldw	r2,-20(fp)
10010720:	10800c17 	ldw	r2,48(r2)
10010724:	18bfe51e 	bne	r3,r2,100106bc <__alt_data_end+0xf80106bc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10010728:	e0bffa17 	ldw	r2,-24(fp)
1001072c:	103f9d26 	beq	r2,zero,100105a4 <__alt_data_end+0xf80105a4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010730:	e0bffb17 	ldw	r2,-20(fp)
10010734:	10c00817 	ldw	r3,32(r2)
10010738:	00bfff44 	movi	r2,-3
1001073c:	1886703a 	and	r3,r3,r2
10010740:	e0bffb17 	ldw	r2,-20(fp)
10010744:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010748:	e0bffb17 	ldw	r2,-20(fp)
1001074c:	10800017 	ldw	r2,0(r2)
10010750:	10800104 	addi	r2,r2,4
10010754:	1007883a 	mov	r3,r2
10010758:	e0bffb17 	ldw	r2,-20(fp)
1001075c:	10800817 	ldw	r2,32(r2)
10010760:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010764:	e0bffc17 	ldw	r2,-16(fp)
10010768:	10800104 	addi	r2,r2,4
1001076c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10010770:	003f8c06 	br	100105a4 <__alt_data_end+0xf80105a4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10010774:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10010778:	0001883a 	nop
1001077c:	e037883a 	mov	sp,fp
10010780:	df000017 	ldw	fp,0(sp)
10010784:	dec00104 	addi	sp,sp,4
10010788:	f800283a 	ret

1001078c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1001078c:	defff804 	addi	sp,sp,-32
10010790:	df000715 	stw	fp,28(sp)
10010794:	df000704 	addi	fp,sp,28
10010798:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1001079c:	e0bffb17 	ldw	r2,-20(fp)
100107a0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
100107a4:	e0bff917 	ldw	r2,-28(fp)
100107a8:	10800017 	ldw	r2,0(r2)
100107ac:	10800104 	addi	r2,r2,4
100107b0:	10800037 	ldwio	r2,0(r2)
100107b4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
100107b8:	e0bffa17 	ldw	r2,-24(fp)
100107bc:	1081000c 	andi	r2,r2,1024
100107c0:	10000b26 	beq	r2,zero,100107f0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
100107c4:	e0bff917 	ldw	r2,-28(fp)
100107c8:	10800017 	ldw	r2,0(r2)
100107cc:	10800104 	addi	r2,r2,4
100107d0:	1007883a 	mov	r3,r2
100107d4:	e0bff917 	ldw	r2,-28(fp)
100107d8:	10800817 	ldw	r2,32(r2)
100107dc:	10810014 	ori	r2,r2,1024
100107e0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
100107e4:	e0bff917 	ldw	r2,-28(fp)
100107e8:	10000915 	stw	zero,36(r2)
100107ec:	00000a06 	br	10010818 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
100107f0:	e0bff917 	ldw	r2,-28(fp)
100107f4:	10c00917 	ldw	r3,36(r2)
100107f8:	00a00034 	movhi	r2,32768
100107fc:	10bfff04 	addi	r2,r2,-4
10010800:	10c00536 	bltu	r2,r3,10010818 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10010804:	e0bff917 	ldw	r2,-28(fp)
10010808:	10800917 	ldw	r2,36(r2)
1001080c:	10c00044 	addi	r3,r2,1
10010810:	e0bff917 	ldw	r2,-28(fp)
10010814:	10c00915 	stw	r3,36(r2)
10010818:	d0a6da17 	ldw	r2,-25752(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1001081c:	e037883a 	mov	sp,fp
10010820:	df000017 	ldw	fp,0(sp)
10010824:	dec00104 	addi	sp,sp,4
10010828:	f800283a 	ret

1001082c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1001082c:	defffd04 	addi	sp,sp,-12
10010830:	df000215 	stw	fp,8(sp)
10010834:	df000204 	addi	fp,sp,8
10010838:	e13ffe15 	stw	r4,-8(fp)
1001083c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010840:	00000506 	br	10010858 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10010844:	e0bfff17 	ldw	r2,-4(fp)
10010848:	1090000c 	andi	r2,r2,16384
1001084c:	10000226 	beq	r2,zero,10010858 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10010850:	00bffd44 	movi	r2,-11
10010854:	00000b06 	br	10010884 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010858:	e0bffe17 	ldw	r2,-8(fp)
1001085c:	10c00d17 	ldw	r3,52(r2)
10010860:	e0bffe17 	ldw	r2,-8(fp)
10010864:	10800c17 	ldw	r2,48(r2)
10010868:	18800526 	beq	r3,r2,10010880 <altera_avalon_jtag_uart_close+0x54>
1001086c:	e0bffe17 	ldw	r2,-8(fp)
10010870:	10c00917 	ldw	r3,36(r2)
10010874:	e0bffe17 	ldw	r2,-8(fp)
10010878:	10800117 	ldw	r2,4(r2)
1001087c:	18bff136 	bltu	r3,r2,10010844 <__alt_data_end+0xf8010844>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10010880:	0005883a 	mov	r2,zero
}
10010884:	e037883a 	mov	sp,fp
10010888:	df000017 	ldw	fp,0(sp)
1001088c:	dec00104 	addi	sp,sp,4
10010890:	f800283a 	ret

10010894 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10010894:	defffa04 	addi	sp,sp,-24
10010898:	df000515 	stw	fp,20(sp)
1001089c:	df000504 	addi	fp,sp,20
100108a0:	e13ffd15 	stw	r4,-12(fp)
100108a4:	e17ffe15 	stw	r5,-8(fp)
100108a8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
100108ac:	00bff9c4 	movi	r2,-25
100108b0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
100108b4:	e0bffe17 	ldw	r2,-8(fp)
100108b8:	10da8060 	cmpeqi	r3,r2,27137
100108bc:	1800031e 	bne	r3,zero,100108cc <altera_avalon_jtag_uart_ioctl+0x38>
100108c0:	109a80a0 	cmpeqi	r2,r2,27138
100108c4:	1000181e 	bne	r2,zero,10010928 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
100108c8:	00002906 	br	10010970 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
100108cc:	e0bffd17 	ldw	r2,-12(fp)
100108d0:	10c00117 	ldw	r3,4(r2)
100108d4:	00a00034 	movhi	r2,32768
100108d8:	10bfffc4 	addi	r2,r2,-1
100108dc:	18802126 	beq	r3,r2,10010964 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
100108e0:	e0bfff17 	ldw	r2,-4(fp)
100108e4:	10800017 	ldw	r2,0(r2)
100108e8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
100108ec:	e0bffc17 	ldw	r2,-16(fp)
100108f0:	10800090 	cmplti	r2,r2,2
100108f4:	1000061e 	bne	r2,zero,10010910 <altera_avalon_jtag_uart_ioctl+0x7c>
100108f8:	e0fffc17 	ldw	r3,-16(fp)
100108fc:	00a00034 	movhi	r2,32768
10010900:	10bfffc4 	addi	r2,r2,-1
10010904:	18800226 	beq	r3,r2,10010910 <altera_avalon_jtag_uart_ioctl+0x7c>
10010908:	e0bffc17 	ldw	r2,-16(fp)
1001090c:	00000206 	br	10010918 <altera_avalon_jtag_uart_ioctl+0x84>
10010910:	00a00034 	movhi	r2,32768
10010914:	10bfff84 	addi	r2,r2,-2
10010918:	e0fffd17 	ldw	r3,-12(fp)
1001091c:	18800115 	stw	r2,4(r3)
      rc = 0;
10010920:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10010924:	00000f06 	br	10010964 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10010928:	e0bffd17 	ldw	r2,-12(fp)
1001092c:	10c00117 	ldw	r3,4(r2)
10010930:	00a00034 	movhi	r2,32768
10010934:	10bfffc4 	addi	r2,r2,-1
10010938:	18800c26 	beq	r3,r2,1001096c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1001093c:	e0bffd17 	ldw	r2,-12(fp)
10010940:	10c00917 	ldw	r3,36(r2)
10010944:	e0bffd17 	ldw	r2,-12(fp)
10010948:	10800117 	ldw	r2,4(r2)
1001094c:	1885803a 	cmpltu	r2,r3,r2
10010950:	10c03fcc 	andi	r3,r2,255
10010954:	e0bfff17 	ldw	r2,-4(fp)
10010958:	10c00015 	stw	r3,0(r2)
      rc = 0;
1001095c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10010960:	00000206 	br	1001096c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10010964:	0001883a 	nop
10010968:	00000106 	br	10010970 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1001096c:	0001883a 	nop

  default:
    break;
  }

  return rc;
10010970:	e0bffb17 	ldw	r2,-20(fp)
}
10010974:	e037883a 	mov	sp,fp
10010978:	df000017 	ldw	fp,0(sp)
1001097c:	dec00104 	addi	sp,sp,4
10010980:	f800283a 	ret

10010984 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10010984:	defff304 	addi	sp,sp,-52
10010988:	dfc00c15 	stw	ra,48(sp)
1001098c:	df000b15 	stw	fp,44(sp)
10010990:	df000b04 	addi	fp,sp,44
10010994:	e13ffc15 	stw	r4,-16(fp)
10010998:	e17ffd15 	stw	r5,-12(fp)
1001099c:	e1bffe15 	stw	r6,-8(fp)
100109a0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
100109a4:	e0bffd17 	ldw	r2,-12(fp)
100109a8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100109ac:	00004706 	br	10010acc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
100109b0:	e0bffc17 	ldw	r2,-16(fp)
100109b4:	10800a17 	ldw	r2,40(r2)
100109b8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
100109bc:	e0bffc17 	ldw	r2,-16(fp)
100109c0:	10800b17 	ldw	r2,44(r2)
100109c4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
100109c8:	e0fff717 	ldw	r3,-36(fp)
100109cc:	e0bff817 	ldw	r2,-32(fp)
100109d0:	18800536 	bltu	r3,r2,100109e8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
100109d4:	e0fff717 	ldw	r3,-36(fp)
100109d8:	e0bff817 	ldw	r2,-32(fp)
100109dc:	1885c83a 	sub	r2,r3,r2
100109e0:	e0bff615 	stw	r2,-40(fp)
100109e4:	00000406 	br	100109f8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
100109e8:	00c20004 	movi	r3,2048
100109ec:	e0bff817 	ldw	r2,-32(fp)
100109f0:	1885c83a 	sub	r2,r3,r2
100109f4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100109f8:	e0bff617 	ldw	r2,-40(fp)
100109fc:	10001e26 	beq	r2,zero,10010a78 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10010a00:	e0fffe17 	ldw	r3,-8(fp)
10010a04:	e0bff617 	ldw	r2,-40(fp)
10010a08:	1880022e 	bgeu	r3,r2,10010a14 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10010a0c:	e0bffe17 	ldw	r2,-8(fp)
10010a10:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10010a14:	e0bffc17 	ldw	r2,-16(fp)
10010a18:	10c00e04 	addi	r3,r2,56
10010a1c:	e0bff817 	ldw	r2,-32(fp)
10010a20:	1885883a 	add	r2,r3,r2
10010a24:	e1bff617 	ldw	r6,-40(fp)
10010a28:	100b883a 	mov	r5,r2
10010a2c:	e13ff517 	ldw	r4,-44(fp)
10010a30:	00082a40 	call	100082a4 <memcpy>
      ptr   += n;
10010a34:	e0fff517 	ldw	r3,-44(fp)
10010a38:	e0bff617 	ldw	r2,-40(fp)
10010a3c:	1885883a 	add	r2,r3,r2
10010a40:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10010a44:	e0fffe17 	ldw	r3,-8(fp)
10010a48:	e0bff617 	ldw	r2,-40(fp)
10010a4c:	1885c83a 	sub	r2,r3,r2
10010a50:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010a54:	e0fff817 	ldw	r3,-32(fp)
10010a58:	e0bff617 	ldw	r2,-40(fp)
10010a5c:	1885883a 	add	r2,r3,r2
10010a60:	10c1ffcc 	andi	r3,r2,2047
10010a64:	e0bffc17 	ldw	r2,-16(fp)
10010a68:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10010a6c:	e0bffe17 	ldw	r2,-8(fp)
10010a70:	00bfcf16 	blt	zero,r2,100109b0 <__alt_data_end+0xf80109b0>
10010a74:	00000106 	br	10010a7c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10010a78:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10010a7c:	e0fff517 	ldw	r3,-44(fp)
10010a80:	e0bffd17 	ldw	r2,-12(fp)
10010a84:	1880141e 	bne	r3,r2,10010ad8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10010a88:	e0bfff17 	ldw	r2,-4(fp)
10010a8c:	1090000c 	andi	r2,r2,16384
10010a90:	1000131e 	bne	r2,zero,10010ae0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10010a94:	0001883a 	nop
10010a98:	e0bffc17 	ldw	r2,-16(fp)
10010a9c:	10c00a17 	ldw	r3,40(r2)
10010aa0:	e0bff717 	ldw	r2,-36(fp)
10010aa4:	1880051e 	bne	r3,r2,10010abc <altera_avalon_jtag_uart_read+0x138>
10010aa8:	e0bffc17 	ldw	r2,-16(fp)
10010aac:	10c00917 	ldw	r3,36(r2)
10010ab0:	e0bffc17 	ldw	r2,-16(fp)
10010ab4:	10800117 	ldw	r2,4(r2)
10010ab8:	18bff736 	bltu	r3,r2,10010a98 <__alt_data_end+0xf8010a98>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10010abc:	e0bffc17 	ldw	r2,-16(fp)
10010ac0:	10c00a17 	ldw	r3,40(r2)
10010ac4:	e0bff717 	ldw	r2,-36(fp)
10010ac8:	18800726 	beq	r3,r2,10010ae8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10010acc:	e0bffe17 	ldw	r2,-8(fp)
10010ad0:	00bfb716 	blt	zero,r2,100109b0 <__alt_data_end+0xf80109b0>
10010ad4:	00000506 	br	10010aec <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10010ad8:	0001883a 	nop
10010adc:	00000306 	br	10010aec <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10010ae0:	0001883a 	nop
10010ae4:	00000106 	br	10010aec <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10010ae8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10010aec:	e0fff517 	ldw	r3,-44(fp)
10010af0:	e0bffd17 	ldw	r2,-12(fp)
10010af4:	18801826 	beq	r3,r2,10010b58 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010af8:	0005303a 	rdctl	r2,status
10010afc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010b00:	e0fffb17 	ldw	r3,-20(fp)
10010b04:	00bfff84 	movi	r2,-2
10010b08:	1884703a 	and	r2,r3,r2
10010b0c:	1001703a 	wrctl	status,r2
  
  return context;
10010b10:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10010b14:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010b18:	e0bffc17 	ldw	r2,-16(fp)
10010b1c:	10800817 	ldw	r2,32(r2)
10010b20:	10c00054 	ori	r3,r2,1
10010b24:	e0bffc17 	ldw	r2,-16(fp)
10010b28:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010b2c:	e0bffc17 	ldw	r2,-16(fp)
10010b30:	10800017 	ldw	r2,0(r2)
10010b34:	10800104 	addi	r2,r2,4
10010b38:	1007883a 	mov	r3,r2
10010b3c:	e0bffc17 	ldw	r2,-16(fp)
10010b40:	10800817 	ldw	r2,32(r2)
10010b44:	18800035 	stwio	r2,0(r3)
10010b48:	e0bffa17 	ldw	r2,-24(fp)
10010b4c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010b50:	e0bff917 	ldw	r2,-28(fp)
10010b54:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10010b58:	e0fff517 	ldw	r3,-44(fp)
10010b5c:	e0bffd17 	ldw	r2,-12(fp)
10010b60:	18800426 	beq	r3,r2,10010b74 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10010b64:	e0fff517 	ldw	r3,-44(fp)
10010b68:	e0bffd17 	ldw	r2,-12(fp)
10010b6c:	1885c83a 	sub	r2,r3,r2
10010b70:	00000606 	br	10010b8c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10010b74:	e0bfff17 	ldw	r2,-4(fp)
10010b78:	1090000c 	andi	r2,r2,16384
10010b7c:	10000226 	beq	r2,zero,10010b88 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10010b80:	00bffd44 	movi	r2,-11
10010b84:	00000106 	br	10010b8c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10010b88:	00bffec4 	movi	r2,-5
}
10010b8c:	e037883a 	mov	sp,fp
10010b90:	dfc00117 	ldw	ra,4(sp)
10010b94:	df000017 	ldw	fp,0(sp)
10010b98:	dec00204 	addi	sp,sp,8
10010b9c:	f800283a 	ret

10010ba0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10010ba0:	defff304 	addi	sp,sp,-52
10010ba4:	dfc00c15 	stw	ra,48(sp)
10010ba8:	df000b15 	stw	fp,44(sp)
10010bac:	df000b04 	addi	fp,sp,44
10010bb0:	e13ffc15 	stw	r4,-16(fp)
10010bb4:	e17ffd15 	stw	r5,-12(fp)
10010bb8:	e1bffe15 	stw	r6,-8(fp)
10010bbc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10010bc0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10010bc4:	e0bffd17 	ldw	r2,-12(fp)
10010bc8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10010bcc:	00003706 	br	10010cac <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10010bd0:	e0bffc17 	ldw	r2,-16(fp)
10010bd4:	10800c17 	ldw	r2,48(r2)
10010bd8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10010bdc:	e0bffc17 	ldw	r2,-16(fp)
10010be0:	10800d17 	ldw	r2,52(r2)
10010be4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10010be8:	e0fff917 	ldw	r3,-28(fp)
10010bec:	e0bff517 	ldw	r2,-44(fp)
10010bf0:	1880062e 	bgeu	r3,r2,10010c0c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10010bf4:	e0fff517 	ldw	r3,-44(fp)
10010bf8:	e0bff917 	ldw	r2,-28(fp)
10010bfc:	1885c83a 	sub	r2,r3,r2
10010c00:	10bfffc4 	addi	r2,r2,-1
10010c04:	e0bff615 	stw	r2,-40(fp)
10010c08:	00000b06 	br	10010c38 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10010c0c:	e0bff517 	ldw	r2,-44(fp)
10010c10:	10000526 	beq	r2,zero,10010c28 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10010c14:	00c20004 	movi	r3,2048
10010c18:	e0bff917 	ldw	r2,-28(fp)
10010c1c:	1885c83a 	sub	r2,r3,r2
10010c20:	e0bff615 	stw	r2,-40(fp)
10010c24:	00000406 	br	10010c38 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10010c28:	00c1ffc4 	movi	r3,2047
10010c2c:	e0bff917 	ldw	r2,-28(fp)
10010c30:	1885c83a 	sub	r2,r3,r2
10010c34:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10010c38:	e0bff617 	ldw	r2,-40(fp)
10010c3c:	10001e26 	beq	r2,zero,10010cb8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10010c40:	e0fffe17 	ldw	r3,-8(fp)
10010c44:	e0bff617 	ldw	r2,-40(fp)
10010c48:	1880022e 	bgeu	r3,r2,10010c54 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10010c4c:	e0bffe17 	ldw	r2,-8(fp)
10010c50:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10010c54:	e0bffc17 	ldw	r2,-16(fp)
10010c58:	10c20e04 	addi	r3,r2,2104
10010c5c:	e0bff917 	ldw	r2,-28(fp)
10010c60:	1885883a 	add	r2,r3,r2
10010c64:	e1bff617 	ldw	r6,-40(fp)
10010c68:	e17ffd17 	ldw	r5,-12(fp)
10010c6c:	1009883a 	mov	r4,r2
10010c70:	00082a40 	call	100082a4 <memcpy>
      ptr   += n;
10010c74:	e0fffd17 	ldw	r3,-12(fp)
10010c78:	e0bff617 	ldw	r2,-40(fp)
10010c7c:	1885883a 	add	r2,r3,r2
10010c80:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10010c84:	e0fffe17 	ldw	r3,-8(fp)
10010c88:	e0bff617 	ldw	r2,-40(fp)
10010c8c:	1885c83a 	sub	r2,r3,r2
10010c90:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010c94:	e0fff917 	ldw	r3,-28(fp)
10010c98:	e0bff617 	ldw	r2,-40(fp)
10010c9c:	1885883a 	add	r2,r3,r2
10010ca0:	10c1ffcc 	andi	r3,r2,2047
10010ca4:	e0bffc17 	ldw	r2,-16(fp)
10010ca8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10010cac:	e0bffe17 	ldw	r2,-8(fp)
10010cb0:	00bfc716 	blt	zero,r2,10010bd0 <__alt_data_end+0xf8010bd0>
10010cb4:	00000106 	br	10010cbc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10010cb8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010cbc:	0005303a 	rdctl	r2,status
10010cc0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010cc4:	e0fffb17 	ldw	r3,-20(fp)
10010cc8:	00bfff84 	movi	r2,-2
10010ccc:	1884703a 	and	r2,r3,r2
10010cd0:	1001703a 	wrctl	status,r2
  
  return context;
10010cd4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10010cd8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010cdc:	e0bffc17 	ldw	r2,-16(fp)
10010ce0:	10800817 	ldw	r2,32(r2)
10010ce4:	10c00094 	ori	r3,r2,2
10010ce8:	e0bffc17 	ldw	r2,-16(fp)
10010cec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010cf0:	e0bffc17 	ldw	r2,-16(fp)
10010cf4:	10800017 	ldw	r2,0(r2)
10010cf8:	10800104 	addi	r2,r2,4
10010cfc:	1007883a 	mov	r3,r2
10010d00:	e0bffc17 	ldw	r2,-16(fp)
10010d04:	10800817 	ldw	r2,32(r2)
10010d08:	18800035 	stwio	r2,0(r3)
10010d0c:	e0bffa17 	ldw	r2,-24(fp)
10010d10:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010d14:	e0bff817 	ldw	r2,-32(fp)
10010d18:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10010d1c:	e0bffe17 	ldw	r2,-8(fp)
10010d20:	0080100e 	bge	zero,r2,10010d64 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10010d24:	e0bfff17 	ldw	r2,-4(fp)
10010d28:	1090000c 	andi	r2,r2,16384
10010d2c:	1000101e 	bne	r2,zero,10010d70 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10010d30:	0001883a 	nop
10010d34:	e0bffc17 	ldw	r2,-16(fp)
10010d38:	10c00d17 	ldw	r3,52(r2)
10010d3c:	e0bff517 	ldw	r2,-44(fp)
10010d40:	1880051e 	bne	r3,r2,10010d58 <altera_avalon_jtag_uart_write+0x1b8>
10010d44:	e0bffc17 	ldw	r2,-16(fp)
10010d48:	10c00917 	ldw	r3,36(r2)
10010d4c:	e0bffc17 	ldw	r2,-16(fp)
10010d50:	10800117 	ldw	r2,4(r2)
10010d54:	18bff736 	bltu	r3,r2,10010d34 <__alt_data_end+0xf8010d34>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10010d58:	e0bffc17 	ldw	r2,-16(fp)
10010d5c:	10800917 	ldw	r2,36(r2)
10010d60:	1000051e 	bne	r2,zero,10010d78 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10010d64:	e0bffe17 	ldw	r2,-8(fp)
10010d68:	00bfd016 	blt	zero,r2,10010cac <__alt_data_end+0xf8010cac>
10010d6c:	00000306 	br	10010d7c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10010d70:	0001883a 	nop
10010d74:	00000106 	br	10010d7c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10010d78:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10010d7c:	e0fffd17 	ldw	r3,-12(fp)
10010d80:	e0bff717 	ldw	r2,-36(fp)
10010d84:	18800426 	beq	r3,r2,10010d98 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10010d88:	e0fffd17 	ldw	r3,-12(fp)
10010d8c:	e0bff717 	ldw	r2,-36(fp)
10010d90:	1885c83a 	sub	r2,r3,r2
10010d94:	00000606 	br	10010db0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10010d98:	e0bfff17 	ldw	r2,-4(fp)
10010d9c:	1090000c 	andi	r2,r2,16384
10010da0:	10000226 	beq	r2,zero,10010dac <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10010da4:	00bffd44 	movi	r2,-11
10010da8:	00000106 	br	10010db0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10010dac:	00bffec4 	movi	r2,-5
}
10010db0:	e037883a 	mov	sp,fp
10010db4:	dfc00117 	ldw	ra,4(sp)
10010db8:	df000017 	ldw	fp,0(sp)
10010dbc:	dec00204 	addi	sp,sp,8
10010dc0:	f800283a 	ret

10010dc4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10010dc4:	defff504 	addi	sp,sp,-44
10010dc8:	df000a15 	stw	fp,40(sp)
10010dcc:	df000a04 	addi	fp,sp,40
10010dd0:	e13ffc15 	stw	r4,-16(fp)
10010dd4:	e17ffd15 	stw	r5,-12(fp)
10010dd8:	e1bffe15 	stw	r6,-8(fp)
10010ddc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10010de0:	e03ff615 	stw	zero,-40(fp)
10010de4:	d0a6da17 	ldw	r2,-25752(gp)
  
  if (alt_ticks_per_second ())
10010de8:	10003c26 	beq	r2,zero,10010edc <alt_alarm_start+0x118>
  {
    if (alarm)
10010dec:	e0bffc17 	ldw	r2,-16(fp)
10010df0:	10003826 	beq	r2,zero,10010ed4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10010df4:	e0bffc17 	ldw	r2,-16(fp)
10010df8:	e0fffe17 	ldw	r3,-8(fp)
10010dfc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10010e00:	e0bffc17 	ldw	r2,-16(fp)
10010e04:	e0ffff17 	ldw	r3,-4(fp)
10010e08:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010e0c:	0005303a 	rdctl	r2,status
10010e10:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010e14:	e0fff917 	ldw	r3,-28(fp)
10010e18:	00bfff84 	movi	r2,-2
10010e1c:	1884703a 	and	r2,r3,r2
10010e20:	1001703a 	wrctl	status,r2
  
  return context;
10010e24:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10010e28:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10010e2c:	d0a6db17 	ldw	r2,-25748(gp)
      
      current_nticks = alt_nticks();
10010e30:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10010e34:	e0fffd17 	ldw	r3,-12(fp)
10010e38:	e0bff617 	ldw	r2,-40(fp)
10010e3c:	1885883a 	add	r2,r3,r2
10010e40:	10c00044 	addi	r3,r2,1
10010e44:	e0bffc17 	ldw	r2,-16(fp)
10010e48:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10010e4c:	e0bffc17 	ldw	r2,-16(fp)
10010e50:	10c00217 	ldw	r3,8(r2)
10010e54:	e0bff617 	ldw	r2,-40(fp)
10010e58:	1880042e 	bgeu	r3,r2,10010e6c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10010e5c:	e0bffc17 	ldw	r2,-16(fp)
10010e60:	00c00044 	movi	r3,1
10010e64:	10c00405 	stb	r3,16(r2)
10010e68:	00000206 	br	10010e74 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10010e6c:	e0bffc17 	ldw	r2,-16(fp)
10010e70:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10010e74:	e0bffc17 	ldw	r2,-16(fp)
10010e78:	d0e00d04 	addi	r3,gp,-32716
10010e7c:	e0fffa15 	stw	r3,-24(fp)
10010e80:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010e84:	e0bffb17 	ldw	r2,-20(fp)
10010e88:	e0fffa17 	ldw	r3,-24(fp)
10010e8c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010e90:	e0bffa17 	ldw	r2,-24(fp)
10010e94:	10c00017 	ldw	r3,0(r2)
10010e98:	e0bffb17 	ldw	r2,-20(fp)
10010e9c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10010ea0:	e0bffa17 	ldw	r2,-24(fp)
10010ea4:	10800017 	ldw	r2,0(r2)
10010ea8:	e0fffb17 	ldw	r3,-20(fp)
10010eac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10010eb0:	e0bffa17 	ldw	r2,-24(fp)
10010eb4:	e0fffb17 	ldw	r3,-20(fp)
10010eb8:	10c00015 	stw	r3,0(r2)
10010ebc:	e0bff817 	ldw	r2,-32(fp)
10010ec0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010ec4:	e0bff717 	ldw	r2,-36(fp)
10010ec8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10010ecc:	0005883a 	mov	r2,zero
10010ed0:	00000306 	br	10010ee0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10010ed4:	00bffa84 	movi	r2,-22
10010ed8:	00000106 	br	10010ee0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10010edc:	00bfde84 	movi	r2,-134
  }
}
10010ee0:	e037883a 	mov	sp,fp
10010ee4:	df000017 	ldw	fp,0(sp)
10010ee8:	dec00104 	addi	sp,sp,4
10010eec:	f800283a 	ret

10010ef0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10010ef0:	defffa04 	addi	sp,sp,-24
10010ef4:	dfc00515 	stw	ra,20(sp)
10010ef8:	df000415 	stw	fp,16(sp)
10010efc:	df000404 	addi	fp,sp,16
10010f00:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
10010f04:	00800244 	movi	r2,9
10010f08:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10010f0c:	014003f4 	movhi	r5,15
10010f10:	29509004 	addi	r5,r5,16960
10010f14:	e13ffd17 	ldw	r4,-12(fp)
10010f18:	000cc7c0 	call	1000cc7c <__mulsi3>
10010f1c:	100b883a 	mov	r5,r2
10010f20:	0100bef4 	movhi	r4,763
10010f24:	213c2004 	addi	r4,r4,-3968
10010f28:	00024cc0 	call	100024cc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10010f2c:	100b883a 	mov	r5,r2
10010f30:	01200034 	movhi	r4,32768
10010f34:	213fffc4 	addi	r4,r4,-1
10010f38:	00024cc0 	call	100024cc <__udivsi3>
10010f3c:	100b883a 	mov	r5,r2
10010f40:	e13fff17 	ldw	r4,-4(fp)
10010f44:	00024cc0 	call	100024cc <__udivsi3>
10010f48:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10010f4c:	e0bffe17 	ldw	r2,-8(fp)
10010f50:	10002a26 	beq	r2,zero,10010ffc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10010f54:	e03ffc15 	stw	zero,-16(fp)
10010f58:	00001706 	br	10010fb8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10010f5c:	00a00034 	movhi	r2,32768
10010f60:	10bfffc4 	addi	r2,r2,-1
10010f64:	10bfffc4 	addi	r2,r2,-1
10010f68:	103ffe1e 	bne	r2,zero,10010f64 <__alt_data_end+0xf8010f64>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10010f6c:	014003f4 	movhi	r5,15
10010f70:	29509004 	addi	r5,r5,16960
10010f74:	e13ffd17 	ldw	r4,-12(fp)
10010f78:	000cc7c0 	call	1000cc7c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10010f7c:	100b883a 	mov	r5,r2
10010f80:	0100bef4 	movhi	r4,763
10010f84:	213c2004 	addi	r4,r4,-3968
10010f88:	00024cc0 	call	100024cc <__udivsi3>
10010f8c:	100b883a 	mov	r5,r2
10010f90:	01200034 	movhi	r4,32768
10010f94:	213fffc4 	addi	r4,r4,-1
10010f98:	00024cc0 	call	100024cc <__udivsi3>
10010f9c:	1007883a 	mov	r3,r2
10010fa0:	e0bfff17 	ldw	r2,-4(fp)
10010fa4:	10c5c83a 	sub	r2,r2,r3
10010fa8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10010fac:	e0bffc17 	ldw	r2,-16(fp)
10010fb0:	10800044 	addi	r2,r2,1
10010fb4:	e0bffc15 	stw	r2,-16(fp)
10010fb8:	e0fffc17 	ldw	r3,-16(fp)
10010fbc:	e0bffe17 	ldw	r2,-8(fp)
10010fc0:	18bfe616 	blt	r3,r2,10010f5c <__alt_data_end+0xf8010f5c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10010fc4:	014003f4 	movhi	r5,15
10010fc8:	29509004 	addi	r5,r5,16960
10010fcc:	e13ffd17 	ldw	r4,-12(fp)
10010fd0:	000cc7c0 	call	1000cc7c <__mulsi3>
10010fd4:	100b883a 	mov	r5,r2
10010fd8:	0100bef4 	movhi	r4,763
10010fdc:	213c2004 	addi	r4,r4,-3968
10010fe0:	00024cc0 	call	100024cc <__udivsi3>
10010fe4:	e17fff17 	ldw	r5,-4(fp)
10010fe8:	1009883a 	mov	r4,r2
10010fec:	000cc7c0 	call	1000cc7c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10010ff0:	10bfffc4 	addi	r2,r2,-1
10010ff4:	103ffe1e 	bne	r2,zero,10010ff0 <__alt_data_end+0xf8010ff0>
10010ff8:	00000d06 	br	10011030 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10010ffc:	014003f4 	movhi	r5,15
10011000:	29509004 	addi	r5,r5,16960
10011004:	e13ffd17 	ldw	r4,-12(fp)
10011008:	000cc7c0 	call	1000cc7c <__mulsi3>
1001100c:	100b883a 	mov	r5,r2
10011010:	0100bef4 	movhi	r4,763
10011014:	213c2004 	addi	r4,r4,-3968
10011018:	00024cc0 	call	100024cc <__udivsi3>
1001101c:	e17fff17 	ldw	r5,-4(fp)
10011020:	1009883a 	mov	r4,r2
10011024:	000cc7c0 	call	1000cc7c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10011028:	10bfffc4 	addi	r2,r2,-1
1001102c:	00bffe16 	blt	zero,r2,10011028 <__alt_data_end+0xf8011028>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10011030:	0005883a 	mov	r2,zero
}
10011034:	e037883a 	mov	sp,fp
10011038:	dfc00117 	ldw	ra,4(sp)
1001103c:	df000017 	ldw	fp,0(sp)
10011040:	dec00204 	addi	sp,sp,8
10011044:	f800283a 	ret

10011048 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10011048:	deffff04 	addi	sp,sp,-4
1001104c:	df000015 	stw	fp,0(sp)
10011050:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10011054:	0001883a 	nop
10011058:	e037883a 	mov	sp,fp
1001105c:	df000017 	ldw	fp,0(sp)
10011060:	dec00104 	addi	sp,sp,4
10011064:	f800283a 	ret

10011068 <alt_get_errno>:
10011068:	defffe04 	addi	sp,sp,-8
1001106c:	dfc00115 	stw	ra,4(sp)
10011070:	df000015 	stw	fp,0(sp)
10011074:	d839883a 	mov	fp,sp
10011078:	d0a00b17 	ldw	r2,-32724(gp)
1001107c:	10000326 	beq	r2,zero,1001108c <alt_get_errno+0x24>
10011080:	d0a00b17 	ldw	r2,-32724(gp)
10011084:	103ee83a 	callr	r2
10011088:	00000106 	br	10011090 <alt_get_errno+0x28>
1001108c:	d0a6cc04 	addi	r2,gp,-25808
10011090:	e037883a 	mov	sp,fp
10011094:	dfc00117 	ldw	ra,4(sp)
10011098:	df000017 	ldw	fp,0(sp)
1001109c:	dec00204 	addi	sp,sp,8
100110a0:	f800283a 	ret

100110a4 <alt_dev_llist_insert>:
100110a4:	defffa04 	addi	sp,sp,-24
100110a8:	dfc00515 	stw	ra,20(sp)
100110ac:	df000415 	stw	fp,16(sp)
100110b0:	df000404 	addi	fp,sp,16
100110b4:	e13ffe15 	stw	r4,-8(fp)
100110b8:	e17fff15 	stw	r5,-4(fp)
100110bc:	e0bffe17 	ldw	r2,-8(fp)
100110c0:	10000326 	beq	r2,zero,100110d0 <alt_dev_llist_insert+0x2c>
100110c4:	e0bffe17 	ldw	r2,-8(fp)
100110c8:	10800217 	ldw	r2,8(r2)
100110cc:	1000061e 	bne	r2,zero,100110e8 <alt_dev_llist_insert+0x44>
100110d0:	00110680 	call	10011068 <alt_get_errno>
100110d4:	1007883a 	mov	r3,r2
100110d8:	00800584 	movi	r2,22
100110dc:	18800015 	stw	r2,0(r3)
100110e0:	00bffa84 	movi	r2,-22
100110e4:	00001306 	br	10011134 <alt_dev_llist_insert+0x90>
100110e8:	e0bffe17 	ldw	r2,-8(fp)
100110ec:	e0ffff17 	ldw	r3,-4(fp)
100110f0:	e0fffc15 	stw	r3,-16(fp)
100110f4:	e0bffd15 	stw	r2,-12(fp)
100110f8:	e0bffd17 	ldw	r2,-12(fp)
100110fc:	e0fffc17 	ldw	r3,-16(fp)
10011100:	10c00115 	stw	r3,4(r2)
10011104:	e0bffc17 	ldw	r2,-16(fp)
10011108:	10c00017 	ldw	r3,0(r2)
1001110c:	e0bffd17 	ldw	r2,-12(fp)
10011110:	10c00015 	stw	r3,0(r2)
10011114:	e0bffc17 	ldw	r2,-16(fp)
10011118:	10800017 	ldw	r2,0(r2)
1001111c:	e0fffd17 	ldw	r3,-12(fp)
10011120:	10c00115 	stw	r3,4(r2)
10011124:	e0bffc17 	ldw	r2,-16(fp)
10011128:	e0fffd17 	ldw	r3,-12(fp)
1001112c:	10c00015 	stw	r3,0(r2)
10011130:	0005883a 	mov	r2,zero
10011134:	e037883a 	mov	sp,fp
10011138:	dfc00117 	ldw	ra,4(sp)
1001113c:	df000017 	ldw	fp,0(sp)
10011140:	dec00204 	addi	sp,sp,8
10011144:	f800283a 	ret

10011148 <_do_ctors>:
10011148:	defffd04 	addi	sp,sp,-12
1001114c:	dfc00215 	stw	ra,8(sp)
10011150:	df000115 	stw	fp,4(sp)
10011154:	df000104 	addi	fp,sp,4
10011158:	00840074 	movhi	r2,4097
1001115c:	1087d604 	addi	r2,r2,8024
10011160:	e0bfff15 	stw	r2,-4(fp)
10011164:	00000606 	br	10011180 <_do_ctors+0x38>
10011168:	e0bfff17 	ldw	r2,-4(fp)
1001116c:	10800017 	ldw	r2,0(r2)
10011170:	103ee83a 	callr	r2
10011174:	e0bfff17 	ldw	r2,-4(fp)
10011178:	10bfff04 	addi	r2,r2,-4
1001117c:	e0bfff15 	stw	r2,-4(fp)
10011180:	e0ffff17 	ldw	r3,-4(fp)
10011184:	00840074 	movhi	r2,4097
10011188:	1087d704 	addi	r2,r2,8028
1001118c:	18bff62e 	bgeu	r3,r2,10011168 <__alt_data_end+0xf8011168>
10011190:	0001883a 	nop
10011194:	e037883a 	mov	sp,fp
10011198:	dfc00117 	ldw	ra,4(sp)
1001119c:	df000017 	ldw	fp,0(sp)
100111a0:	dec00204 	addi	sp,sp,8
100111a4:	f800283a 	ret

100111a8 <_do_dtors>:
100111a8:	defffd04 	addi	sp,sp,-12
100111ac:	dfc00215 	stw	ra,8(sp)
100111b0:	df000115 	stw	fp,4(sp)
100111b4:	df000104 	addi	fp,sp,4
100111b8:	00840074 	movhi	r2,4097
100111bc:	1087d604 	addi	r2,r2,8024
100111c0:	e0bfff15 	stw	r2,-4(fp)
100111c4:	00000606 	br	100111e0 <_do_dtors+0x38>
100111c8:	e0bfff17 	ldw	r2,-4(fp)
100111cc:	10800017 	ldw	r2,0(r2)
100111d0:	103ee83a 	callr	r2
100111d4:	e0bfff17 	ldw	r2,-4(fp)
100111d8:	10bfff04 	addi	r2,r2,-4
100111dc:	e0bfff15 	stw	r2,-4(fp)
100111e0:	e0ffff17 	ldw	r3,-4(fp)
100111e4:	00840074 	movhi	r2,4097
100111e8:	1087d704 	addi	r2,r2,8028
100111ec:	18bff62e 	bgeu	r3,r2,100111c8 <__alt_data_end+0xf80111c8>
100111f0:	0001883a 	nop
100111f4:	e037883a 	mov	sp,fp
100111f8:	dfc00117 	ldw	ra,4(sp)
100111fc:	df000017 	ldw	fp,0(sp)
10011200:	dec00204 	addi	sp,sp,8
10011204:	f800283a 	ret

10011208 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10011208:	deffff04 	addi	sp,sp,-4
1001120c:	df000015 	stw	fp,0(sp)
10011210:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10011214:	0001883a 	nop
10011218:	e037883a 	mov	sp,fp
1001121c:	df000017 	ldw	fp,0(sp)
10011220:	dec00104 	addi	sp,sp,4
10011224:	f800283a 	ret

10011228 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011228:	defff904 	addi	sp,sp,-28
1001122c:	dfc00615 	stw	ra,24(sp)
10011230:	df000515 	stw	fp,20(sp)
10011234:	df000504 	addi	fp,sp,20
10011238:	e13ffc15 	stw	r4,-16(fp)
1001123c:	e17ffd15 	stw	r5,-12(fp)
10011240:	e1bffe15 	stw	r6,-8(fp)
10011244:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10011248:	e0800217 	ldw	r2,8(fp)
1001124c:	d8800015 	stw	r2,0(sp)
10011250:	e1ffff17 	ldw	r7,-4(fp)
10011254:	e1bffe17 	ldw	r6,-8(fp)
10011258:	e17ffd17 	ldw	r5,-12(fp)
1001125c:	e13ffc17 	ldw	r4,-16(fp)
10011260:	00113d80 	call	100113d8 <alt_iic_isr_register>
}  
10011264:	e037883a 	mov	sp,fp
10011268:	dfc00117 	ldw	ra,4(sp)
1001126c:	df000017 	ldw	fp,0(sp)
10011270:	dec00204 	addi	sp,sp,8
10011274:	f800283a 	ret

10011278 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10011278:	defff904 	addi	sp,sp,-28
1001127c:	df000615 	stw	fp,24(sp)
10011280:	df000604 	addi	fp,sp,24
10011284:	e13ffe15 	stw	r4,-8(fp)
10011288:	e17fff15 	stw	r5,-4(fp)
1001128c:	e0bfff17 	ldw	r2,-4(fp)
10011290:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011294:	0005303a 	rdctl	r2,status
10011298:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001129c:	e0fffb17 	ldw	r3,-20(fp)
100112a0:	00bfff84 	movi	r2,-2
100112a4:	1884703a 	and	r2,r3,r2
100112a8:	1001703a 	wrctl	status,r2
  
  return context;
100112ac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100112b0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
100112b4:	00c00044 	movi	r3,1
100112b8:	e0bffa17 	ldw	r2,-24(fp)
100112bc:	1884983a 	sll	r2,r3,r2
100112c0:	1007883a 	mov	r3,r2
100112c4:	d0a6dc17 	ldw	r2,-25744(gp)
100112c8:	1884b03a 	or	r2,r3,r2
100112cc:	d0a6dc15 	stw	r2,-25744(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100112d0:	d0a6dc17 	ldw	r2,-25744(gp)
100112d4:	100170fa 	wrctl	ienable,r2
100112d8:	e0bffc17 	ldw	r2,-16(fp)
100112dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100112e0:	e0bffd17 	ldw	r2,-12(fp)
100112e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100112e8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
100112ec:	0001883a 	nop
}
100112f0:	e037883a 	mov	sp,fp
100112f4:	df000017 	ldw	fp,0(sp)
100112f8:	dec00104 	addi	sp,sp,4
100112fc:	f800283a 	ret

10011300 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10011300:	defff904 	addi	sp,sp,-28
10011304:	df000615 	stw	fp,24(sp)
10011308:	df000604 	addi	fp,sp,24
1001130c:	e13ffe15 	stw	r4,-8(fp)
10011310:	e17fff15 	stw	r5,-4(fp)
10011314:	e0bfff17 	ldw	r2,-4(fp)
10011318:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001131c:	0005303a 	rdctl	r2,status
10011320:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011324:	e0fffb17 	ldw	r3,-20(fp)
10011328:	00bfff84 	movi	r2,-2
1001132c:	1884703a 	and	r2,r3,r2
10011330:	1001703a 	wrctl	status,r2
  
  return context;
10011334:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011338:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1001133c:	00c00044 	movi	r3,1
10011340:	e0bffa17 	ldw	r2,-24(fp)
10011344:	1884983a 	sll	r2,r3,r2
10011348:	0084303a 	nor	r2,zero,r2
1001134c:	1007883a 	mov	r3,r2
10011350:	d0a6dc17 	ldw	r2,-25744(gp)
10011354:	1884703a 	and	r2,r3,r2
10011358:	d0a6dc15 	stw	r2,-25744(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1001135c:	d0a6dc17 	ldw	r2,-25744(gp)
10011360:	100170fa 	wrctl	ienable,r2
10011364:	e0bffc17 	ldw	r2,-16(fp)
10011368:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001136c:	e0bffd17 	ldw	r2,-12(fp)
10011370:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10011374:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10011378:	0001883a 	nop
}
1001137c:	e037883a 	mov	sp,fp
10011380:	df000017 	ldw	fp,0(sp)
10011384:	dec00104 	addi	sp,sp,4
10011388:	f800283a 	ret

1001138c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1001138c:	defffc04 	addi	sp,sp,-16
10011390:	df000315 	stw	fp,12(sp)
10011394:	df000304 	addi	fp,sp,12
10011398:	e13ffe15 	stw	r4,-8(fp)
1001139c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
100113a0:	000530fa 	rdctl	r2,ienable
100113a4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
100113a8:	00c00044 	movi	r3,1
100113ac:	e0bfff17 	ldw	r2,-4(fp)
100113b0:	1884983a 	sll	r2,r3,r2
100113b4:	1007883a 	mov	r3,r2
100113b8:	e0bffd17 	ldw	r2,-12(fp)
100113bc:	1884703a 	and	r2,r3,r2
100113c0:	1004c03a 	cmpne	r2,r2,zero
100113c4:	10803fcc 	andi	r2,r2,255
}
100113c8:	e037883a 	mov	sp,fp
100113cc:	df000017 	ldw	fp,0(sp)
100113d0:	dec00104 	addi	sp,sp,4
100113d4:	f800283a 	ret

100113d8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100113d8:	defff504 	addi	sp,sp,-44
100113dc:	dfc00a15 	stw	ra,40(sp)
100113e0:	df000915 	stw	fp,36(sp)
100113e4:	df000904 	addi	fp,sp,36
100113e8:	e13ffc15 	stw	r4,-16(fp)
100113ec:	e17ffd15 	stw	r5,-12(fp)
100113f0:	e1bffe15 	stw	r6,-8(fp)
100113f4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
100113f8:	00bffa84 	movi	r2,-22
100113fc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10011400:	e0bffd17 	ldw	r2,-12(fp)
10011404:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10011408:	e0bff817 	ldw	r2,-32(fp)
1001140c:	10800808 	cmpgei	r2,r2,32
10011410:	1000271e 	bne	r2,zero,100114b0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011414:	0005303a 	rdctl	r2,status
10011418:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001141c:	e0fffb17 	ldw	r3,-20(fp)
10011420:	00bfff84 	movi	r2,-2
10011424:	1884703a 	and	r2,r3,r2
10011428:	1001703a 	wrctl	status,r2
  
  return context;
1001142c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10011430:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10011434:	00840074 	movhi	r2,4097
10011438:	10981904 	addi	r2,r2,24676
1001143c:	e0fff817 	ldw	r3,-32(fp)
10011440:	180690fa 	slli	r3,r3,3
10011444:	10c5883a 	add	r2,r2,r3
10011448:	e0fffe17 	ldw	r3,-8(fp)
1001144c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10011450:	00840074 	movhi	r2,4097
10011454:	10981904 	addi	r2,r2,24676
10011458:	e0fff817 	ldw	r3,-32(fp)
1001145c:	180690fa 	slli	r3,r3,3
10011460:	10c5883a 	add	r2,r2,r3
10011464:	10800104 	addi	r2,r2,4
10011468:	e0ffff17 	ldw	r3,-4(fp)
1001146c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10011470:	e0bffe17 	ldw	r2,-8(fp)
10011474:	10000526 	beq	r2,zero,1001148c <alt_iic_isr_register+0xb4>
10011478:	e0bff817 	ldw	r2,-32(fp)
1001147c:	100b883a 	mov	r5,r2
10011480:	e13ffc17 	ldw	r4,-16(fp)
10011484:	00112780 	call	10011278 <alt_ic_irq_enable>
10011488:	00000406 	br	1001149c <alt_iic_isr_register+0xc4>
1001148c:	e0bff817 	ldw	r2,-32(fp)
10011490:	100b883a 	mov	r5,r2
10011494:	e13ffc17 	ldw	r4,-16(fp)
10011498:	00113000 	call	10011300 <alt_ic_irq_disable>
1001149c:	e0bff715 	stw	r2,-36(fp)
100114a0:	e0bffa17 	ldw	r2,-24(fp)
100114a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100114a8:	e0bff917 	ldw	r2,-28(fp)
100114ac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
100114b0:	e0bff717 	ldw	r2,-36(fp)
}
100114b4:	e037883a 	mov	sp,fp
100114b8:	dfc00117 	ldw	ra,4(sp)
100114bc:	df000017 	ldw	fp,0(sp)
100114c0:	dec00204 	addi	sp,sp,8
100114c4:	f800283a 	ret

100114c8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
100114c8:	defff804 	addi	sp,sp,-32
100114cc:	dfc00715 	stw	ra,28(sp)
100114d0:	df000615 	stw	fp,24(sp)
100114d4:	dc000515 	stw	r16,20(sp)
100114d8:	df000604 	addi	fp,sp,24
100114dc:	e13ffb15 	stw	r4,-20(fp)
100114e0:	e17ffc15 	stw	r5,-16(fp)
100114e4:	e1bffd15 	stw	r6,-12(fp)
100114e8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
100114ec:	e1bffe17 	ldw	r6,-8(fp)
100114f0:	e17ffd17 	ldw	r5,-12(fp)
100114f4:	e13ffc17 	ldw	r4,-16(fp)
100114f8:	00117500 	call	10011750 <open>
100114fc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10011500:	e0bffa17 	ldw	r2,-24(fp)
10011504:	10002216 	blt	r2,zero,10011590 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10011508:	04040074 	movhi	r16,4097
1001150c:	840cb904 	addi	r16,r16,13028
10011510:	e0bffa17 	ldw	r2,-24(fp)
10011514:	01400304 	movi	r5,12
10011518:	1009883a 	mov	r4,r2
1001151c:	000cc7c0 	call	1000cc7c <__mulsi3>
10011520:	8085883a 	add	r2,r16,r2
10011524:	10c00017 	ldw	r3,0(r2)
10011528:	e0bffb17 	ldw	r2,-20(fp)
1001152c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10011530:	04040074 	movhi	r16,4097
10011534:	840cb904 	addi	r16,r16,13028
10011538:	e0bffa17 	ldw	r2,-24(fp)
1001153c:	01400304 	movi	r5,12
10011540:	1009883a 	mov	r4,r2
10011544:	000cc7c0 	call	1000cc7c <__mulsi3>
10011548:	8085883a 	add	r2,r16,r2
1001154c:	10800104 	addi	r2,r2,4
10011550:	10c00017 	ldw	r3,0(r2)
10011554:	e0bffb17 	ldw	r2,-20(fp)
10011558:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1001155c:	04040074 	movhi	r16,4097
10011560:	840cb904 	addi	r16,r16,13028
10011564:	e0bffa17 	ldw	r2,-24(fp)
10011568:	01400304 	movi	r5,12
1001156c:	1009883a 	mov	r4,r2
10011570:	000cc7c0 	call	1000cc7c <__mulsi3>
10011574:	8085883a 	add	r2,r16,r2
10011578:	10800204 	addi	r2,r2,8
1001157c:	10c00017 	ldw	r3,0(r2)
10011580:	e0bffb17 	ldw	r2,-20(fp)
10011584:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10011588:	e13ffa17 	ldw	r4,-24(fp)
1001158c:	000fe600 	call	1000fe60 <alt_release_fd>
  }
} 
10011590:	0001883a 	nop
10011594:	e6ffff04 	addi	sp,fp,-4
10011598:	dfc00217 	ldw	ra,8(sp)
1001159c:	df000117 	ldw	fp,4(sp)
100115a0:	dc000017 	ldw	r16,0(sp)
100115a4:	dec00304 	addi	sp,sp,12
100115a8:	f800283a 	ret

100115ac <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
100115ac:	defffb04 	addi	sp,sp,-20
100115b0:	dfc00415 	stw	ra,16(sp)
100115b4:	df000315 	stw	fp,12(sp)
100115b8:	df000304 	addi	fp,sp,12
100115bc:	e13ffd15 	stw	r4,-12(fp)
100115c0:	e17ffe15 	stw	r5,-8(fp)
100115c4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
100115c8:	01c07fc4 	movi	r7,511
100115cc:	01800044 	movi	r6,1
100115d0:	e17ffd17 	ldw	r5,-12(fp)
100115d4:	01040074 	movhi	r4,4097
100115d8:	210cbc04 	addi	r4,r4,13040
100115dc:	00114c80 	call	100114c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
100115e0:	01c07fc4 	movi	r7,511
100115e4:	000d883a 	mov	r6,zero
100115e8:	e17ffe17 	ldw	r5,-8(fp)
100115ec:	01040074 	movhi	r4,4097
100115f0:	210cb904 	addi	r4,r4,13028
100115f4:	00114c80 	call	100114c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
100115f8:	01c07fc4 	movi	r7,511
100115fc:	01800044 	movi	r6,1
10011600:	e17fff17 	ldw	r5,-4(fp)
10011604:	01040074 	movhi	r4,4097
10011608:	210cbf04 	addi	r4,r4,13052
1001160c:	00114c80 	call	100114c8 <alt_open_fd>
}  
10011610:	0001883a 	nop
10011614:	e037883a 	mov	sp,fp
10011618:	dfc00117 	ldw	ra,4(sp)
1001161c:	df000017 	ldw	fp,0(sp)
10011620:	dec00204 	addi	sp,sp,8
10011624:	f800283a 	ret

10011628 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011628:	defffe04 	addi	sp,sp,-8
1001162c:	dfc00115 	stw	ra,4(sp)
10011630:	df000015 	stw	fp,0(sp)
10011634:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011638:	d0a00b17 	ldw	r2,-32724(gp)
1001163c:	10000326 	beq	r2,zero,1001164c <alt_get_errno+0x24>
10011640:	d0a00b17 	ldw	r2,-32724(gp)
10011644:	103ee83a 	callr	r2
10011648:	00000106 	br	10011650 <alt_get_errno+0x28>
1001164c:	d0a6cc04 	addi	r2,gp,-25808
}
10011650:	e037883a 	mov	sp,fp
10011654:	dfc00117 	ldw	ra,4(sp)
10011658:	df000017 	ldw	fp,0(sp)
1001165c:	dec00204 	addi	sp,sp,8
10011660:	f800283a 	ret

10011664 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10011664:	defffb04 	addi	sp,sp,-20
10011668:	dfc00415 	stw	ra,16(sp)
1001166c:	df000315 	stw	fp,12(sp)
10011670:	dc000215 	stw	r16,8(sp)
10011674:	df000304 	addi	fp,sp,12
10011678:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1001167c:	e0bffe17 	ldw	r2,-8(fp)
10011680:	10800217 	ldw	r2,8(r2)
10011684:	10d00034 	orhi	r3,r2,16384
10011688:	e0bffe17 	ldw	r2,-8(fp)
1001168c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10011690:	e03ffd15 	stw	zero,-12(fp)
10011694:	00002306 	br	10011724 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10011698:	04040074 	movhi	r16,4097
1001169c:	840cb904 	addi	r16,r16,13028
100116a0:	e0bffd17 	ldw	r2,-12(fp)
100116a4:	01400304 	movi	r5,12
100116a8:	1009883a 	mov	r4,r2
100116ac:	000cc7c0 	call	1000cc7c <__mulsi3>
100116b0:	8085883a 	add	r2,r16,r2
100116b4:	10c00017 	ldw	r3,0(r2)
100116b8:	e0bffe17 	ldw	r2,-8(fp)
100116bc:	10800017 	ldw	r2,0(r2)
100116c0:	1880151e 	bne	r3,r2,10011718 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100116c4:	04040074 	movhi	r16,4097
100116c8:	840cb904 	addi	r16,r16,13028
100116cc:	e0bffd17 	ldw	r2,-12(fp)
100116d0:	01400304 	movi	r5,12
100116d4:	1009883a 	mov	r4,r2
100116d8:	000cc7c0 	call	1000cc7c <__mulsi3>
100116dc:	8085883a 	add	r2,r16,r2
100116e0:	10800204 	addi	r2,r2,8
100116e4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100116e8:	10000b0e 	bge	r2,zero,10011718 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
100116ec:	01400304 	movi	r5,12
100116f0:	e13ffd17 	ldw	r4,-12(fp)
100116f4:	000cc7c0 	call	1000cc7c <__mulsi3>
100116f8:	1007883a 	mov	r3,r2
100116fc:	00840074 	movhi	r2,4097
10011700:	108cb904 	addi	r2,r2,13028
10011704:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10011708:	e0bffe17 	ldw	r2,-8(fp)
1001170c:	18800226 	beq	r3,r2,10011718 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10011710:	00bffcc4 	movi	r2,-13
10011714:	00000806 	br	10011738 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10011718:	e0bffd17 	ldw	r2,-12(fp)
1001171c:	10800044 	addi	r2,r2,1
10011720:	e0bffd15 	stw	r2,-12(fp)
10011724:	d0a00a17 	ldw	r2,-32728(gp)
10011728:	1007883a 	mov	r3,r2
1001172c:	e0bffd17 	ldw	r2,-12(fp)
10011730:	18bfd92e 	bgeu	r3,r2,10011698 <__alt_data_end+0xf8011698>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10011734:	0005883a 	mov	r2,zero
}
10011738:	e6ffff04 	addi	sp,fp,-4
1001173c:	dfc00217 	ldw	ra,8(sp)
10011740:	df000117 	ldw	fp,4(sp)
10011744:	dc000017 	ldw	r16,0(sp)
10011748:	dec00304 	addi	sp,sp,12
1001174c:	f800283a 	ret

10011750 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10011750:	defff604 	addi	sp,sp,-40
10011754:	dfc00915 	stw	ra,36(sp)
10011758:	df000815 	stw	fp,32(sp)
1001175c:	df000804 	addi	fp,sp,32
10011760:	e13ffd15 	stw	r4,-12(fp)
10011764:	e17ffe15 	stw	r5,-8(fp)
10011768:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1001176c:	00bfffc4 	movi	r2,-1
10011770:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10011774:	00bffb44 	movi	r2,-19
10011778:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1001177c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10011780:	d1600804 	addi	r5,gp,-32736
10011784:	e13ffd17 	ldw	r4,-12(fp)
10011788:	00118d00 	call	100118d0 <alt_find_dev>
1001178c:	e0bff815 	stw	r2,-32(fp)
10011790:	e0bff817 	ldw	r2,-32(fp)
10011794:	1000051e 	bne	r2,zero,100117ac <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10011798:	e13ffd17 	ldw	r4,-12(fp)
1001179c:	00119600 	call	10011960 <alt_find_file>
100117a0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
100117a4:	00800044 	movi	r2,1
100117a8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
100117ac:	e0bff817 	ldw	r2,-32(fp)
100117b0:	10002b26 	beq	r2,zero,10011860 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
100117b4:	e13ff817 	ldw	r4,-32(fp)
100117b8:	0011a680 	call	10011a68 <alt_get_fd>
100117bc:	e0bff915 	stw	r2,-28(fp)
100117c0:	e0bff917 	ldw	r2,-28(fp)
100117c4:	1000030e 	bge	r2,zero,100117d4 <open+0x84>
    {
      status = index;
100117c8:	e0bff917 	ldw	r2,-28(fp)
100117cc:	e0bffa15 	stw	r2,-24(fp)
100117d0:	00002506 	br	10011868 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
100117d4:	01400304 	movi	r5,12
100117d8:	e13ff917 	ldw	r4,-28(fp)
100117dc:	000cc7c0 	call	1000cc7c <__mulsi3>
100117e0:	1007883a 	mov	r3,r2
100117e4:	00840074 	movhi	r2,4097
100117e8:	108cb904 	addi	r2,r2,13028
100117ec:	1885883a 	add	r2,r3,r2
100117f0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
100117f4:	e0fffe17 	ldw	r3,-8(fp)
100117f8:	00900034 	movhi	r2,16384
100117fc:	10bfffc4 	addi	r2,r2,-1
10011800:	1886703a 	and	r3,r3,r2
10011804:	e0bffc17 	ldw	r2,-16(fp)
10011808:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1001180c:	e0bffb17 	ldw	r2,-20(fp)
10011810:	1000051e 	bne	r2,zero,10011828 <open+0xd8>
10011814:	e13ffc17 	ldw	r4,-16(fp)
10011818:	00116640 	call	10011664 <alt_file_locked>
1001181c:	e0bffa15 	stw	r2,-24(fp)
10011820:	e0bffa17 	ldw	r2,-24(fp)
10011824:	10001016 	blt	r2,zero,10011868 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10011828:	e0bff817 	ldw	r2,-32(fp)
1001182c:	10800317 	ldw	r2,12(r2)
10011830:	10000826 	beq	r2,zero,10011854 <open+0x104>
10011834:	e0bff817 	ldw	r2,-32(fp)
10011838:	10800317 	ldw	r2,12(r2)
1001183c:	e1ffff17 	ldw	r7,-4(fp)
10011840:	e1bffe17 	ldw	r6,-8(fp)
10011844:	e17ffd17 	ldw	r5,-12(fp)
10011848:	e13ffc17 	ldw	r4,-16(fp)
1001184c:	103ee83a 	callr	r2
10011850:	00000106 	br	10011858 <open+0x108>
10011854:	0005883a 	mov	r2,zero
10011858:	e0bffa15 	stw	r2,-24(fp)
1001185c:	00000206 	br	10011868 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
10011860:	00bffb44 	movi	r2,-19
10011864:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10011868:	e0bffa17 	ldw	r2,-24(fp)
1001186c:	1000090e 	bge	r2,zero,10011894 <open+0x144>
  {
    alt_release_fd (index);  
10011870:	e13ff917 	ldw	r4,-28(fp)
10011874:	000fe600 	call	1000fe60 <alt_release_fd>
    ALT_ERRNO = -status;
10011878:	00116280 	call	10011628 <alt_get_errno>
1001187c:	1007883a 	mov	r3,r2
10011880:	e0bffa17 	ldw	r2,-24(fp)
10011884:	0085c83a 	sub	r2,zero,r2
10011888:	18800015 	stw	r2,0(r3)
    return -1;
1001188c:	00bfffc4 	movi	r2,-1
10011890:	00000106 	br	10011898 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
10011894:	e0bff917 	ldw	r2,-28(fp)
}
10011898:	e037883a 	mov	sp,fp
1001189c:	dfc00117 	ldw	ra,4(sp)
100118a0:	df000017 	ldw	fp,0(sp)
100118a4:	dec00204 	addi	sp,sp,8
100118a8:	f800283a 	ret

100118ac <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
100118ac:	deffff04 	addi	sp,sp,-4
100118b0:	df000015 	stw	fp,0(sp)
100118b4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100118b8:	000170fa 	wrctl	ienable,zero
}
100118bc:	0001883a 	nop
100118c0:	e037883a 	mov	sp,fp
100118c4:	df000017 	ldw	fp,0(sp)
100118c8:	dec00104 	addi	sp,sp,4
100118cc:	f800283a 	ret

100118d0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
100118d0:	defffa04 	addi	sp,sp,-24
100118d4:	dfc00515 	stw	ra,20(sp)
100118d8:	df000415 	stw	fp,16(sp)
100118dc:	df000404 	addi	fp,sp,16
100118e0:	e13ffe15 	stw	r4,-8(fp)
100118e4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
100118e8:	e0bfff17 	ldw	r2,-4(fp)
100118ec:	10800017 	ldw	r2,0(r2)
100118f0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
100118f4:	e13ffe17 	ldw	r4,-8(fp)
100118f8:	00027440 	call	10002744 <strlen>
100118fc:	10800044 	addi	r2,r2,1
10011900:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011904:	00000d06 	br	1001193c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10011908:	e0bffc17 	ldw	r2,-16(fp)
1001190c:	10800217 	ldw	r2,8(r2)
10011910:	e0fffd17 	ldw	r3,-12(fp)
10011914:	180d883a 	mov	r6,r3
10011918:	e17ffe17 	ldw	r5,-8(fp)
1001191c:	1009883a 	mov	r4,r2
10011920:	0011c140 	call	10011c14 <memcmp>
10011924:	1000021e 	bne	r2,zero,10011930 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10011928:	e0bffc17 	ldw	r2,-16(fp)
1001192c:	00000706 	br	1001194c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10011930:	e0bffc17 	ldw	r2,-16(fp)
10011934:	10800017 	ldw	r2,0(r2)
10011938:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1001193c:	e0fffc17 	ldw	r3,-16(fp)
10011940:	e0bfff17 	ldw	r2,-4(fp)
10011944:	18bff01e 	bne	r3,r2,10011908 <__alt_data_end+0xf8011908>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10011948:	0005883a 	mov	r2,zero
}
1001194c:	e037883a 	mov	sp,fp
10011950:	dfc00117 	ldw	ra,4(sp)
10011954:	df000017 	ldw	fp,0(sp)
10011958:	dec00204 	addi	sp,sp,8
1001195c:	f800283a 	ret

10011960 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10011960:	defffb04 	addi	sp,sp,-20
10011964:	dfc00415 	stw	ra,16(sp)
10011968:	df000315 	stw	fp,12(sp)
1001196c:	df000304 	addi	fp,sp,12
10011970:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10011974:	d0a00617 	ldw	r2,-32744(gp)
10011978:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1001197c:	00003106 	br	10011a44 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10011980:	e0bffd17 	ldw	r2,-12(fp)
10011984:	10800217 	ldw	r2,8(r2)
10011988:	1009883a 	mov	r4,r2
1001198c:	00027440 	call	10002744 <strlen>
10011990:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10011994:	e0bffd17 	ldw	r2,-12(fp)
10011998:	10c00217 	ldw	r3,8(r2)
1001199c:	e0bffe17 	ldw	r2,-8(fp)
100119a0:	10bfffc4 	addi	r2,r2,-1
100119a4:	1885883a 	add	r2,r3,r2
100119a8:	10800003 	ldbu	r2,0(r2)
100119ac:	10803fcc 	andi	r2,r2,255
100119b0:	1080201c 	xori	r2,r2,128
100119b4:	10bfe004 	addi	r2,r2,-128
100119b8:	10800bd8 	cmpnei	r2,r2,47
100119bc:	1000031e 	bne	r2,zero,100119cc <alt_find_file+0x6c>
    {
      len -= 1;
100119c0:	e0bffe17 	ldw	r2,-8(fp)
100119c4:	10bfffc4 	addi	r2,r2,-1
100119c8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100119cc:	e0bffe17 	ldw	r2,-8(fp)
100119d0:	e0ffff17 	ldw	r3,-4(fp)
100119d4:	1885883a 	add	r2,r3,r2
100119d8:	10800003 	ldbu	r2,0(r2)
100119dc:	10803fcc 	andi	r2,r2,255
100119e0:	1080201c 	xori	r2,r2,128
100119e4:	10bfe004 	addi	r2,r2,-128
100119e8:	10800be0 	cmpeqi	r2,r2,47
100119ec:	1000081e 	bne	r2,zero,10011a10 <alt_find_file+0xb0>
100119f0:	e0bffe17 	ldw	r2,-8(fp)
100119f4:	e0ffff17 	ldw	r3,-4(fp)
100119f8:	1885883a 	add	r2,r3,r2
100119fc:	10800003 	ldbu	r2,0(r2)
10011a00:	10803fcc 	andi	r2,r2,255
10011a04:	1080201c 	xori	r2,r2,128
10011a08:	10bfe004 	addi	r2,r2,-128
10011a0c:	10000a1e 	bne	r2,zero,10011a38 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10011a10:	e0bffd17 	ldw	r2,-12(fp)
10011a14:	10800217 	ldw	r2,8(r2)
10011a18:	e0fffe17 	ldw	r3,-8(fp)
10011a1c:	180d883a 	mov	r6,r3
10011a20:	e17fff17 	ldw	r5,-4(fp)
10011a24:	1009883a 	mov	r4,r2
10011a28:	0011c140 	call	10011c14 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011a2c:	1000021e 	bne	r2,zero,10011a38 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10011a30:	e0bffd17 	ldw	r2,-12(fp)
10011a34:	00000706 	br	10011a54 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10011a38:	e0bffd17 	ldw	r2,-12(fp)
10011a3c:	10800017 	ldw	r2,0(r2)
10011a40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011a44:	e0fffd17 	ldw	r3,-12(fp)
10011a48:	d0a00604 	addi	r2,gp,-32744
10011a4c:	18bfcc1e 	bne	r3,r2,10011980 <__alt_data_end+0xf8011980>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10011a50:	0005883a 	mov	r2,zero
}
10011a54:	e037883a 	mov	sp,fp
10011a58:	dfc00117 	ldw	ra,4(sp)
10011a5c:	df000017 	ldw	fp,0(sp)
10011a60:	dec00204 	addi	sp,sp,8
10011a64:	f800283a 	ret

10011a68 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10011a68:	defffa04 	addi	sp,sp,-24
10011a6c:	dfc00515 	stw	ra,20(sp)
10011a70:	df000415 	stw	fp,16(sp)
10011a74:	dc000315 	stw	r16,12(sp)
10011a78:	df000404 	addi	fp,sp,16
10011a7c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10011a80:	00bffa04 	movi	r2,-24
10011a84:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011a88:	e03ffc15 	stw	zero,-16(fp)
10011a8c:	00001d06 	br	10011b04 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
10011a90:	04040074 	movhi	r16,4097
10011a94:	840cb904 	addi	r16,r16,13028
10011a98:	e0bffc17 	ldw	r2,-16(fp)
10011a9c:	01400304 	movi	r5,12
10011aa0:	1009883a 	mov	r4,r2
10011aa4:	000cc7c0 	call	1000cc7c <__mulsi3>
10011aa8:	8085883a 	add	r2,r16,r2
10011aac:	10800017 	ldw	r2,0(r2)
10011ab0:	1000111e 	bne	r2,zero,10011af8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10011ab4:	04040074 	movhi	r16,4097
10011ab8:	840cb904 	addi	r16,r16,13028
10011abc:	e0bffc17 	ldw	r2,-16(fp)
10011ac0:	01400304 	movi	r5,12
10011ac4:	1009883a 	mov	r4,r2
10011ac8:	000cc7c0 	call	1000cc7c <__mulsi3>
10011acc:	8085883a 	add	r2,r16,r2
10011ad0:	e0fffe17 	ldw	r3,-8(fp)
10011ad4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10011ad8:	d0e00a17 	ldw	r3,-32728(gp)
10011adc:	e0bffc17 	ldw	r2,-16(fp)
10011ae0:	1880020e 	bge	r3,r2,10011aec <alt_get_fd+0x84>
      {
        alt_max_fd = i;
10011ae4:	e0bffc17 	ldw	r2,-16(fp)
10011ae8:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
10011aec:	e0bffc17 	ldw	r2,-16(fp)
10011af0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10011af4:	00000606 	br	10011b10 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011af8:	e0bffc17 	ldw	r2,-16(fp)
10011afc:	10800044 	addi	r2,r2,1
10011b00:	e0bffc15 	stw	r2,-16(fp)
10011b04:	e0bffc17 	ldw	r2,-16(fp)
10011b08:	10800810 	cmplti	r2,r2,32
10011b0c:	103fe01e 	bne	r2,zero,10011a90 <__alt_data_end+0xf8011a90>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10011b10:	e0bffd17 	ldw	r2,-12(fp)
}
10011b14:	e6ffff04 	addi	sp,fp,-4
10011b18:	dfc00217 	ldw	ra,8(sp)
10011b1c:	df000117 	ldw	fp,4(sp)
10011b20:	dc000017 	ldw	r16,0(sp)
10011b24:	dec00304 	addi	sp,sp,12
10011b28:	f800283a 	ret

10011b2c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10011b2c:	defffe04 	addi	sp,sp,-8
10011b30:	df000115 	stw	fp,4(sp)
10011b34:	df000104 	addi	fp,sp,4
10011b38:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10011b3c:	e0bfff17 	ldw	r2,-4(fp)
10011b40:	10bffe84 	addi	r2,r2,-6
10011b44:	10c00428 	cmpgeui	r3,r2,16
10011b48:	18001a1e 	bne	r3,zero,10011bb4 <alt_exception_cause_generated_bad_addr+0x88>
10011b4c:	100690ba 	slli	r3,r2,2
10011b50:	00840074 	movhi	r2,4097
10011b54:	1086d904 	addi	r2,r2,7012
10011b58:	1885883a 	add	r2,r3,r2
10011b5c:	10800017 	ldw	r2,0(r2)
10011b60:	1000683a 	jmp	r2
10011b64:	10011ba4 	muli	zero,r2,1134
10011b68:	10011ba4 	muli	zero,r2,1134
10011b6c:	10011bb4 	orhi	zero,r2,1134
10011b70:	10011bb4 	orhi	zero,r2,1134
10011b74:	10011bb4 	orhi	zero,r2,1134
10011b78:	10011ba4 	muli	zero,r2,1134
10011b7c:	10011bac 	andhi	zero,r2,1134
10011b80:	10011bb4 	orhi	zero,r2,1134
10011b84:	10011ba4 	muli	zero,r2,1134
10011b88:	10011ba4 	muli	zero,r2,1134
10011b8c:	10011bb4 	orhi	zero,r2,1134
10011b90:	10011ba4 	muli	zero,r2,1134
10011b94:	10011bac 	andhi	zero,r2,1134
10011b98:	10011bb4 	orhi	zero,r2,1134
10011b9c:	10011bb4 	orhi	zero,r2,1134
10011ba0:	10011ba4 	muli	zero,r2,1134
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10011ba4:	00800044 	movi	r2,1
10011ba8:	00000306 	br	10011bb8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10011bac:	0005883a 	mov	r2,zero
10011bb0:	00000106 	br	10011bb8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10011bb4:	0005883a 	mov	r2,zero
  }
}
10011bb8:	e037883a 	mov	sp,fp
10011bbc:	df000017 	ldw	fp,0(sp)
10011bc0:	dec00104 	addi	sp,sp,4
10011bc4:	f800283a 	ret

10011bc8 <atexit>:
10011bc8:	200b883a 	mov	r5,r4
10011bcc:	000f883a 	mov	r7,zero
10011bd0:	000d883a 	mov	r6,zero
10011bd4:	0009883a 	mov	r4,zero
10011bd8:	0011c901 	jmpi	10011c90 <__register_exitproc>

10011bdc <exit>:
10011bdc:	defffe04 	addi	sp,sp,-8
10011be0:	000b883a 	mov	r5,zero
10011be4:	dc000015 	stw	r16,0(sp)
10011be8:	dfc00115 	stw	ra,4(sp)
10011bec:	2021883a 	mov	r16,r4
10011bf0:	0011da80 	call	10011da8 <__call_exitprocs>
10011bf4:	00840074 	movhi	r2,4097
10011bf8:	10913104 	addi	r2,r2,17604
10011bfc:	11000017 	ldw	r4,0(r2)
10011c00:	20800f17 	ldw	r2,60(r4)
10011c04:	10000126 	beq	r2,zero,10011c0c <exit+0x30>
10011c08:	103ee83a 	callr	r2
10011c0c:	8009883a 	mov	r4,r16
10011c10:	0011f280 	call	10011f28 <_exit>

10011c14 <memcmp>:
10011c14:	01c000c4 	movi	r7,3
10011c18:	3980192e 	bgeu	r7,r6,10011c80 <memcmp+0x6c>
10011c1c:	2144b03a 	or	r2,r4,r5
10011c20:	11c4703a 	and	r2,r2,r7
10011c24:	10000f26 	beq	r2,zero,10011c64 <memcmp+0x50>
10011c28:	20800003 	ldbu	r2,0(r4)
10011c2c:	28c00003 	ldbu	r3,0(r5)
10011c30:	10c0151e 	bne	r2,r3,10011c88 <memcmp+0x74>
10011c34:	31bfff84 	addi	r6,r6,-2
10011c38:	01ffffc4 	movi	r7,-1
10011c3c:	00000406 	br	10011c50 <memcmp+0x3c>
10011c40:	20800003 	ldbu	r2,0(r4)
10011c44:	28c00003 	ldbu	r3,0(r5)
10011c48:	31bfffc4 	addi	r6,r6,-1
10011c4c:	10c00e1e 	bne	r2,r3,10011c88 <memcmp+0x74>
10011c50:	21000044 	addi	r4,r4,1
10011c54:	29400044 	addi	r5,r5,1
10011c58:	31fff91e 	bne	r6,r7,10011c40 <__alt_data_end+0xf8011c40>
10011c5c:	0005883a 	mov	r2,zero
10011c60:	f800283a 	ret
10011c64:	20c00017 	ldw	r3,0(r4)
10011c68:	28800017 	ldw	r2,0(r5)
10011c6c:	18bfee1e 	bne	r3,r2,10011c28 <__alt_data_end+0xf8011c28>
10011c70:	31bfff04 	addi	r6,r6,-4
10011c74:	21000104 	addi	r4,r4,4
10011c78:	29400104 	addi	r5,r5,4
10011c7c:	39bff936 	bltu	r7,r6,10011c64 <__alt_data_end+0xf8011c64>
10011c80:	303fe91e 	bne	r6,zero,10011c28 <__alt_data_end+0xf8011c28>
10011c84:	003ff506 	br	10011c5c <__alt_data_end+0xf8011c5c>
10011c88:	10c5c83a 	sub	r2,r2,r3
10011c8c:	f800283a 	ret

10011c90 <__register_exitproc>:
10011c90:	defffa04 	addi	sp,sp,-24
10011c94:	dc000315 	stw	r16,12(sp)
10011c98:	04040074 	movhi	r16,4097
10011c9c:	84113104 	addi	r16,r16,17604
10011ca0:	80c00017 	ldw	r3,0(r16)
10011ca4:	dc400415 	stw	r17,16(sp)
10011ca8:	dfc00515 	stw	ra,20(sp)
10011cac:	18805217 	ldw	r2,328(r3)
10011cb0:	2023883a 	mov	r17,r4
10011cb4:	10003726 	beq	r2,zero,10011d94 <__register_exitproc+0x104>
10011cb8:	10c00117 	ldw	r3,4(r2)
10011cbc:	010007c4 	movi	r4,31
10011cc0:	20c00e16 	blt	r4,r3,10011cfc <__register_exitproc+0x6c>
10011cc4:	1a000044 	addi	r8,r3,1
10011cc8:	8800221e 	bne	r17,zero,10011d54 <__register_exitproc+0xc4>
10011ccc:	18c00084 	addi	r3,r3,2
10011cd0:	18c7883a 	add	r3,r3,r3
10011cd4:	18c7883a 	add	r3,r3,r3
10011cd8:	12000115 	stw	r8,4(r2)
10011cdc:	10c7883a 	add	r3,r2,r3
10011ce0:	19400015 	stw	r5,0(r3)
10011ce4:	0005883a 	mov	r2,zero
10011ce8:	dfc00517 	ldw	ra,20(sp)
10011cec:	dc400417 	ldw	r17,16(sp)
10011cf0:	dc000317 	ldw	r16,12(sp)
10011cf4:	dec00604 	addi	sp,sp,24
10011cf8:	f800283a 	ret
10011cfc:	00800034 	movhi	r2,0
10011d00:	10800004 	addi	r2,r2,0
10011d04:	10002626 	beq	r2,zero,10011da0 <__register_exitproc+0x110>
10011d08:	01006404 	movi	r4,400
10011d0c:	d9400015 	stw	r5,0(sp)
10011d10:	d9800115 	stw	r6,4(sp)
10011d14:	d9c00215 	stw	r7,8(sp)
10011d18:	00000000 	call	10000000 <__alt_mem_sdram>
10011d1c:	d9400017 	ldw	r5,0(sp)
10011d20:	d9800117 	ldw	r6,4(sp)
10011d24:	d9c00217 	ldw	r7,8(sp)
10011d28:	10001d26 	beq	r2,zero,10011da0 <__register_exitproc+0x110>
10011d2c:	81000017 	ldw	r4,0(r16)
10011d30:	10000115 	stw	zero,4(r2)
10011d34:	02000044 	movi	r8,1
10011d38:	22405217 	ldw	r9,328(r4)
10011d3c:	0007883a 	mov	r3,zero
10011d40:	12400015 	stw	r9,0(r2)
10011d44:	20805215 	stw	r2,328(r4)
10011d48:	10006215 	stw	zero,392(r2)
10011d4c:	10006315 	stw	zero,396(r2)
10011d50:	883fde26 	beq	r17,zero,10011ccc <__alt_data_end+0xf8011ccc>
10011d54:	18c9883a 	add	r4,r3,r3
10011d58:	2109883a 	add	r4,r4,r4
10011d5c:	1109883a 	add	r4,r2,r4
10011d60:	21802215 	stw	r6,136(r4)
10011d64:	01800044 	movi	r6,1
10011d68:	12406217 	ldw	r9,392(r2)
10011d6c:	30cc983a 	sll	r6,r6,r3
10011d70:	4992b03a 	or	r9,r9,r6
10011d74:	12406215 	stw	r9,392(r2)
10011d78:	21c04215 	stw	r7,264(r4)
10011d7c:	01000084 	movi	r4,2
10011d80:	893fd21e 	bne	r17,r4,10011ccc <__alt_data_end+0xf8011ccc>
10011d84:	11006317 	ldw	r4,396(r2)
10011d88:	218cb03a 	or	r6,r4,r6
10011d8c:	11806315 	stw	r6,396(r2)
10011d90:	003fce06 	br	10011ccc <__alt_data_end+0xf8011ccc>
10011d94:	18805304 	addi	r2,r3,332
10011d98:	18805215 	stw	r2,328(r3)
10011d9c:	003fc606 	br	10011cb8 <__alt_data_end+0xf8011cb8>
10011da0:	00bfffc4 	movi	r2,-1
10011da4:	003fd006 	br	10011ce8 <__alt_data_end+0xf8011ce8>

10011da8 <__call_exitprocs>:
10011da8:	defff504 	addi	sp,sp,-44
10011dac:	df000915 	stw	fp,36(sp)
10011db0:	dd400615 	stw	r21,24(sp)
10011db4:	dc800315 	stw	r18,12(sp)
10011db8:	dfc00a15 	stw	ra,40(sp)
10011dbc:	ddc00815 	stw	r23,32(sp)
10011dc0:	dd800715 	stw	r22,28(sp)
10011dc4:	dd000515 	stw	r20,20(sp)
10011dc8:	dcc00415 	stw	r19,16(sp)
10011dcc:	dc400215 	stw	r17,8(sp)
10011dd0:	dc000115 	stw	r16,4(sp)
10011dd4:	d9000015 	stw	r4,0(sp)
10011dd8:	2839883a 	mov	fp,r5
10011ddc:	04800044 	movi	r18,1
10011de0:	057fffc4 	movi	r21,-1
10011de4:	00840074 	movhi	r2,4097
10011de8:	10913104 	addi	r2,r2,17604
10011dec:	12000017 	ldw	r8,0(r2)
10011df0:	45005217 	ldw	r20,328(r8)
10011df4:	44c05204 	addi	r19,r8,328
10011df8:	a0001c26 	beq	r20,zero,10011e6c <__call_exitprocs+0xc4>
10011dfc:	a0800117 	ldw	r2,4(r20)
10011e00:	15ffffc4 	addi	r23,r2,-1
10011e04:	b8000d16 	blt	r23,zero,10011e3c <__call_exitprocs+0x94>
10011e08:	14000044 	addi	r16,r2,1
10011e0c:	8421883a 	add	r16,r16,r16
10011e10:	8421883a 	add	r16,r16,r16
10011e14:	84402004 	addi	r17,r16,128
10011e18:	a463883a 	add	r17,r20,r17
10011e1c:	a421883a 	add	r16,r20,r16
10011e20:	e0001e26 	beq	fp,zero,10011e9c <__call_exitprocs+0xf4>
10011e24:	80804017 	ldw	r2,256(r16)
10011e28:	e0801c26 	beq	fp,r2,10011e9c <__call_exitprocs+0xf4>
10011e2c:	bdffffc4 	addi	r23,r23,-1
10011e30:	843fff04 	addi	r16,r16,-4
10011e34:	8c7fff04 	addi	r17,r17,-4
10011e38:	bd7ff91e 	bne	r23,r21,10011e20 <__alt_data_end+0xf8011e20>
10011e3c:	00800034 	movhi	r2,0
10011e40:	10800004 	addi	r2,r2,0
10011e44:	10000926 	beq	r2,zero,10011e6c <__call_exitprocs+0xc4>
10011e48:	a0800117 	ldw	r2,4(r20)
10011e4c:	1000301e 	bne	r2,zero,10011f10 <__call_exitprocs+0x168>
10011e50:	a0800017 	ldw	r2,0(r20)
10011e54:	10003226 	beq	r2,zero,10011f20 <__call_exitprocs+0x178>
10011e58:	a009883a 	mov	r4,r20
10011e5c:	98800015 	stw	r2,0(r19)
10011e60:	00000000 	call	10000000 <__alt_mem_sdram>
10011e64:	9d000017 	ldw	r20,0(r19)
10011e68:	a03fe41e 	bne	r20,zero,10011dfc <__alt_data_end+0xf8011dfc>
10011e6c:	dfc00a17 	ldw	ra,40(sp)
10011e70:	df000917 	ldw	fp,36(sp)
10011e74:	ddc00817 	ldw	r23,32(sp)
10011e78:	dd800717 	ldw	r22,28(sp)
10011e7c:	dd400617 	ldw	r21,24(sp)
10011e80:	dd000517 	ldw	r20,20(sp)
10011e84:	dcc00417 	ldw	r19,16(sp)
10011e88:	dc800317 	ldw	r18,12(sp)
10011e8c:	dc400217 	ldw	r17,8(sp)
10011e90:	dc000117 	ldw	r16,4(sp)
10011e94:	dec00b04 	addi	sp,sp,44
10011e98:	f800283a 	ret
10011e9c:	a0800117 	ldw	r2,4(r20)
10011ea0:	80c00017 	ldw	r3,0(r16)
10011ea4:	10bfffc4 	addi	r2,r2,-1
10011ea8:	15c01426 	beq	r2,r23,10011efc <__call_exitprocs+0x154>
10011eac:	80000015 	stw	zero,0(r16)
10011eb0:	183fde26 	beq	r3,zero,10011e2c <__alt_data_end+0xf8011e2c>
10011eb4:	95c8983a 	sll	r4,r18,r23
10011eb8:	a0806217 	ldw	r2,392(r20)
10011ebc:	a5800117 	ldw	r22,4(r20)
10011ec0:	2084703a 	and	r2,r4,r2
10011ec4:	10000b26 	beq	r2,zero,10011ef4 <__call_exitprocs+0x14c>
10011ec8:	a0806317 	ldw	r2,396(r20)
10011ecc:	2088703a 	and	r4,r4,r2
10011ed0:	20000c1e 	bne	r4,zero,10011f04 <__call_exitprocs+0x15c>
10011ed4:	89400017 	ldw	r5,0(r17)
10011ed8:	d9000017 	ldw	r4,0(sp)
10011edc:	183ee83a 	callr	r3
10011ee0:	a0800117 	ldw	r2,4(r20)
10011ee4:	15bfbf1e 	bne	r2,r22,10011de4 <__alt_data_end+0xf8011de4>
10011ee8:	98800017 	ldw	r2,0(r19)
10011eec:	153fcf26 	beq	r2,r20,10011e2c <__alt_data_end+0xf8011e2c>
10011ef0:	003fbc06 	br	10011de4 <__alt_data_end+0xf8011de4>
10011ef4:	183ee83a 	callr	r3
10011ef8:	003ff906 	br	10011ee0 <__alt_data_end+0xf8011ee0>
10011efc:	a5c00115 	stw	r23,4(r20)
10011f00:	003feb06 	br	10011eb0 <__alt_data_end+0xf8011eb0>
10011f04:	89000017 	ldw	r4,0(r17)
10011f08:	183ee83a 	callr	r3
10011f0c:	003ff406 	br	10011ee0 <__alt_data_end+0xf8011ee0>
10011f10:	a0800017 	ldw	r2,0(r20)
10011f14:	a027883a 	mov	r19,r20
10011f18:	1029883a 	mov	r20,r2
10011f1c:	003fb606 	br	10011df8 <__alt_data_end+0xf8011df8>
10011f20:	0005883a 	mov	r2,zero
10011f24:	003ffb06 	br	10011f14 <__alt_data_end+0xf8011f14>

10011f28 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10011f28:	defffd04 	addi	sp,sp,-12
10011f2c:	df000215 	stw	fp,8(sp)
10011f30:	df000204 	addi	fp,sp,8
10011f34:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10011f38:	0001883a 	nop
10011f3c:	e0bfff17 	ldw	r2,-4(fp)
10011f40:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10011f44:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10011f48:	10000226 	beq	r2,zero,10011f54 <_exit+0x2c>
    ALT_SIM_FAIL();
10011f4c:	002af070 	cmpltui	zero,zero,43969
10011f50:	00000106 	br	10011f58 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10011f54:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10011f58:	003fff06 	br	10011f58 <__alt_data_end+0xf8011f58>
